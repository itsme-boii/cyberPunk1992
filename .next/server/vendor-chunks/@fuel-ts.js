"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fuel-ts";
exports.ids = ["vendor-chunks/@fuel-ts"];
exports.modules = {

/***/ "(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@fuel-ts/abi-coder/dist/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ASSET_ID_LEN: () => (/* binding */ ASSET_ID_LEN),\n/* harmony export */   ArrayCoder: () => (/* binding */ ArrayCoder),\n/* harmony export */   B256Coder: () => (/* binding */ B256Coder),\n/* harmony export */   B512Coder: () => (/* binding */ B512Coder),\n/* harmony export */   BYTES_32: () => (/* binding */ BYTES_32),\n/* harmony export */   BigNumberCoder: () => (/* binding */ BigNumberCoder),\n/* harmony export */   BooleanCoder: () => (/* binding */ BooleanCoder),\n/* harmony export */   ByteCoder: () => (/* binding */ ByteCoder),\n/* harmony export */   CONTRACT_ID_LEN: () => (/* binding */ CONTRACT_ID_LEN),\n/* harmony export */   Coder: () => (/* binding */ Coder),\n/* harmony export */   ENCODING_V1: () => (/* binding */ ENCODING_V1),\n/* harmony export */   EnumCoder: () => (/* binding */ EnumCoder),\n/* harmony export */   INPUT_COIN_FIXED_SIZE: () => (/* binding */ INPUT_COIN_FIXED_SIZE),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   NumberCoder: () => (/* binding */ NumberCoder),\n/* harmony export */   OptionCoder: () => (/* binding */ OptionCoder),\n/* harmony export */   RawSliceCoder: () => (/* binding */ RawSliceCoder),\n/* harmony export */   SCRIPT_FIXED_SIZE: () => (/* binding */ SCRIPT_FIXED_SIZE),\n/* harmony export */   StdStringCoder: () => (/* binding */ StdStringCoder),\n/* harmony export */   StrSliceCoder: () => (/* binding */ StrSliceCoder),\n/* harmony export */   StringCoder: () => (/* binding */ StringCoder),\n/* harmony export */   StructCoder: () => (/* binding */ StructCoder),\n/* harmony export */   TupleCoder: () => (/* binding */ TupleCoder),\n/* harmony export */   UTXO_ID_LEN: () => (/* binding */ UTXO_ID_LEN),\n/* harmony export */   VecCoder: () => (/* binding */ VecCoder),\n/* harmony export */   WORD_SIZE: () => (/* binding */ WORD_SIZE),\n/* harmony export */   calculateVmTxMemory: () => (/* binding */ calculateVmTxMemory)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/encoding/coders/AbstractCoder.ts\nvar Coder = class {\n  name;\n  type;\n  encodedLength;\n  constructor(name, type, encodedLength) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n};\n\n// src/encoding/coders/ArrayCoder.ts\n\n\n\n// src/utils/constants.ts\nvar U8_CODER_TYPE = \"u8\";\nvar U16_CODER_TYPE = \"u16\";\nvar U32_CODER_TYPE = \"u32\";\nvar U64_CODER_TYPE = \"u64\";\nvar U256_CODER_TYPE = \"u256\";\nvar RAW_PTR_CODER_TYPE = \"raw untyped ptr\";\nvar RAW_SLICE_CODER_TYPE = \"raw untyped slice\";\nvar BOOL_CODER_TYPE = \"bool\";\nvar B256_CODER_TYPE = \"b256\";\nvar B512_CODER_TYPE = \"struct std::b512::B512\";\nvar OPTION_CODER_TYPE = \"enum std::option::Option\";\nvar VEC_CODER_TYPE = \"struct std::vec::Vec\";\nvar BYTES_CODER_TYPE = \"struct std::bytes::Bytes\";\nvar STD_STRING_CODER_TYPE = \"struct std::string::String\";\nvar STR_SLICE_CODER_TYPE = \"str\";\nvar VOID_TYPE = \"()\";\nvar optionRegEx = /^enum (std::option::)?Option$/m;\nvar stringRegEx = /^str\\[(?<length>[0-9]+)\\]/;\nvar arrayRegEx = /^\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nvar structRegEx = /^struct.+/;\nvar enumRegEx = /^enum.+$/;\nvar tupleRegEx = /^\\((?<items>.*)\\)$/;\nvar genericRegEx = /^generic.+$/;\nvar fullNameRegExMatch = /([^\\s]+)$/m;\nvar ENCODING_V1 = \"1\";\nvar WORD_SIZE = 8;\nvar BYTES_32 = 32;\nvar UTXO_ID_LEN = BYTES_32 + 2;\nvar ASSET_ID_LEN = BYTES_32;\nvar CONTRACT_ID_LEN = BYTES_32;\nvar ADDRESS_LEN = BYTES_32;\nvar NONCE_LEN = BYTES_32;\nvar TX_LEN = WORD_SIZE * 4;\nvar TX_POINTER_LEN = WORD_SIZE * 2;\nvar MAX_BYTES = 2 ** 32 - 1;\nvar calculateVmTxMemory = ({ maxInputs }) => BYTES_32 + // Tx ID\nASSET_ID_LEN + // Base asset ID\n// Asset ID/Balance coin input pairs\nmaxInputs * (ASSET_ID_LEN + WORD_SIZE) + WORD_SIZE;\nvar SCRIPT_FIXED_SIZE = WORD_SIZE + // Identifier\nWORD_SIZE + // Gas limit\nWORD_SIZE + // Script size\nWORD_SIZE + // Script data size\nWORD_SIZE + // Policies\nWORD_SIZE + // Inputs size\nWORD_SIZE + // Outputs size\nWORD_SIZE + // Witnesses size\nBYTES_32;\nvar INPUT_COIN_FIXED_SIZE = WORD_SIZE + // Identifier\nTX_LEN + // Utxo Length\nWORD_SIZE + // Output Index\nADDRESS_LEN + // Owner\nWORD_SIZE + // Amount\nASSET_ID_LEN + // Asset id\nTX_POINTER_LEN + // TxPointer\nWORD_SIZE + // Witnesses index\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\nvar INPUT_MESSAGE_FIXED_SIZE = WORD_SIZE + // Identifier\nADDRESS_LEN + // Sender\nADDRESS_LEN + // Recipient\nWORD_SIZE + // Amount\nNONCE_LEN + // Nonce\nWORD_SIZE + // witness_index\nWORD_SIZE + // Data size\nWORD_SIZE + // Predicate size\nWORD_SIZE + // Predicate data size\nWORD_SIZE;\n\n// src/utils/utilities.ts\nvar isUint8Array = (value) => value instanceof Uint8Array;\nvar hasNestedOption = (coders) => {\n  const array = Array.isArray(coders) ? coders : Object.values(coders);\n  for (const node of array) {\n    if (node.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coder\" in node && node.coder.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n    if (\"coders\" in node) {\n      const child = hasNestedOption(node.coders);\n      if (child) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// src/encoding/coders/ArrayCoder.ts\nvar ArrayCoder = class extends Coder {\n  coder;\n  length;\n  #hasNestedOption;\n  constructor(coder, length) {\n    super(\"array\", `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n    if (this.length !== value.length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concat)(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid array data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Array(this.length).fill(0).map(() => {\n      let decoded;\n      [decoded, newOffset] = this.coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/B256Coder.ts\n\n\n\nvar B256Coder = class extends Coder {\n  constructor() {\n    super(\"b256\", \"b256\", WORD_SIZE * 4);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toHex)(bytes, 32), offset + 32];\n  }\n};\n\n// src/encoding/coders/B512Coder.ts\n\n\n\nvar B512Coder = class extends Coder {\n  constructor() {\n    super(\"b512\", \"struct B512\", WORD_SIZE * 8);\n  }\n  encode(value) {\n    let encodedValue;\n    try {\n      encodedValue = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    const decoded = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toHex)(bytes, this.encodedLength), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BigNumberCoder.ts\n\n\nvar encodedLengths = {\n  u64: WORD_SIZE,\n  u256: WORD_SIZE * 4\n};\nvar BigNumberCoder = class extends Coder {\n  constructor(baseType) {\n    super(\"bigNumber\", baseType, encodedLengths[baseType]);\n  }\n  encode(value) {\n    let bytes;\n    if (typeof value === \"number\" && value > Number.MAX_SAFE_INTEGER) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`\n      );\n    }\n    try {\n      bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value, this.encodedLength);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return bytes;\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);\n    }\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    bytes = bytes.slice(0, this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/BooleanCoder.ts\n\n\nvar BooleanCoder = class extends Coder {\n  options;\n  constructor(options = {\n    padToWordSize: false\n  }) {\n    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;\n    super(\"boolean\", \"boolean\", encodedLength);\n    this.options = options;\n  }\n  encode(value) {\n    const isTrueBool = value === true || value === false;\n    if (!isTrueBool) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);\n    }\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value ? 1 : 0, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);\n    }\n    const bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(data.slice(offset, offset + this.encodedLength));\n    if (bytes.isZero()) {\n      return [false, offset + this.encodedLength];\n    }\n    if (!bytes.eq((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(1))) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid boolean value.`);\n    }\n    return [true, offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/ByteCoder.ts\n\n\nvar ByteCoder = class extends Coder {\n  constructor() {\n    super(\"struct\", \"struct Bytes\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < WORD_SIZE) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid byte data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);\n    }\n    return [dataBytes, offsetAndLength + length];\n  }\n};\n__publicField(ByteCoder, \"memorySize\", 1);\n\n// src/encoding/coders/EnumCoder.ts\n\n\n\nvar EnumCoder = class extends Coder {\n  name;\n  coders;\n  #caseIndexCoder;\n  #encodedValueSize;\n  #shouldValidateLength;\n  constructor(name, coders) {\n    const caseIndexCoder = new BigNumberCoder(\"u64\");\n    const encodedValueSize = Object.values(coders).reduce(\n      (min, coder) => Math.min(min, coder.encodedLength),\n      0\n    );\n    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n    this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));\n  }\n  // Checks that we're handling a native enum that is of type void.\n  #isNativeEnum(coder) {\n    return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;\n  }\n  #encodeNativeEnum(value) {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concat)([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n  encode(value) {\n    if (typeof value === \"string\" && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE, \"A field for the case must be provided.\");\n    }\n    if (empty.length !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE, \"Only one field must be provided.\");\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    if (caseIndex === -1) {\n      const validCases = Object.keys(this.coders).map((v) => `'${v}'`).join(\", \");\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`\n      );\n    }\n    const encodedValue = valueCoder.encode(value[caseKey]);\n    return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);\n  }\n  #decodeNativeEnum(caseKey, newOffset) {\n    return [caseKey, newOffset];\n  }\n  decode(data, offset) {\n    if (this.#shouldValidateLength && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const caseBytes = new BigNumberCoder(\"u64\").decode(data, offset)[0];\n    const caseIndex = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toNumber)(caseBytes);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}.`\n      );\n    }\n    const valueCoder = this.coders[caseKey];\n    const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;\n    if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);\n    if (this.#isNativeEnum(this.coders[caseKey])) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n    return [{ [caseKey]: decoded }, newOffset];\n  }\n};\n\n// src/encoding/coders/NumberCoder.ts\n\n\nvar getLength = (baseType) => {\n  switch (baseType) {\n    case \"u8\":\n      return 1;\n    case \"u16\":\n      return 2;\n    case \"u32\":\n      return 4;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);\n  }\n};\nvar NumberCoder = class extends Coder {\n  baseType;\n  options;\n  constructor(baseType, options = {\n    padToWordSize: false\n  }) {\n    const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);\n    super(\"number\", baseType, length);\n    this.baseType = baseType;\n    this.options = options;\n  }\n  encode(value) {\n    let bytes;\n    try {\n      bytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);\n    }\n    if (bytes.length > this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);\n    }\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toBytes)(bytes, this.encodedLength);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid number data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);\n    }\n    return [(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.toNumber)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/OptionCoder.ts\nvar OptionCoder = class extends EnumCoder {\n  encode(value) {\n    const result = super.encode(this.toSwayOption(value));\n    return result;\n  }\n  toSwayOption(input) {\n    if (input !== void 0) {\n      return { Some: input };\n    }\n    return { None: [] };\n  }\n  decode(data, offset) {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded), newOffset];\n  }\n  toOption(output) {\n    if (output && \"Some\" in output) {\n      return output.Some;\n    }\n    return void 0;\n  }\n};\n\n// src/encoding/coders/RawSliceCoder.ts\n\n\nvar RawSliceCoder = class extends Coder {\n  constructor() {\n    super(\"raw untyped slice\", \"raw untyped slice\", WORD_SIZE);\n  }\n  encode(value) {\n    if (!Array.isArray(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), value.length);\n    const bytes = internalCoder.encode(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(bytes.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);\n    }\n    const internalCoder = new ArrayCoder(new NumberCoder(\"u8\"), length);\n    const [decodedValue] = internalCoder.decode(dataBytes, 0);\n    return [decodedValue, offsetAndLength + length];\n  }\n};\n\n// src/encoding/coders/StdStringCoder.ts\n\n\n\nvar StdStringCoder = class extends Coder {\n  constructor() {\n    super(\"struct\", \"struct String\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid std string data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (dataBytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(dataBytes), offsetAndLength + length];\n  }\n};\n__publicField(StdStringCoder, \"memorySize\", 1);\n\n// src/encoding/coders/StrSliceCoder.ts\n\n\n\nvar StrSliceCoder = class extends Coder {\n  constructor() {\n    super(\"strSlice\", \"str\", WORD_SIZE);\n  }\n  encode(value) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n    const lengthBytes = new BigNumberCoder(\"u64\").encode(value.length);\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const bytes = data.slice(offsetAndLength, offsetAndLength + length);\n    if (bytes.length !== length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(bytes), offsetAndLength + length];\n  }\n};\n__publicField(StrSliceCoder, \"memorySize\", 1);\n\n// src/encoding/coders/StringCoder.ts\n\n\nvar StringCoder = class extends Coder {\n  constructor(length) {\n    super(\"string\", `str[${length}]`, length);\n  }\n  encode(value) {\n    if (value.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value);\n  }\n  decode(data, offset) {\n    if (data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string data size.`);\n    }\n    const bytes = data.slice(offset, offset + this.encodedLength);\n    if (bytes.length !== this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);\n    }\n    return [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(bytes), offset + this.encodedLength];\n  }\n};\n\n// src/encoding/coders/StructCoder.ts\n\n\nvar StructCoder = class extends Coder {\n  name;\n  coders;\n  #hasNestedOption;\n  constructor(name, coders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super(\"struct\", `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(\n      Object.keys(this.coders).map((fieldName) => {\n        const fieldCoder = this.coders[fieldName];\n        const fieldValue = value[fieldName];\n        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n            `Invalid ${this.type}. Field \"${fieldName}\" not present.`\n          );\n        }\n        return fieldCoder.encode(fieldValue);\n      })\n    );\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid struct data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n      obj[fieldName] = decoded;\n      return obj;\n    }, {});\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/TupleCoder.ts\n\n\nvar TupleCoder = class extends Coder {\n  coders;\n  #hasNestedOption;\n  constructor(coders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super(\"tuple\", `(${coders.map((coder) => coder.type).join(\", \")})`, encodedLength);\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n  encode(value) {\n    if (this.coders.length !== value.length) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);\n    }\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n      return decoded;\n    });\n    return [decodedValue, newOffset];\n  }\n};\n\n// src/encoding/coders/VecCoder.ts\n\n\n\nvar VecCoder = class extends Coder {\n  coder;\n  #hasNestedOption;\n  constructor(coder) {\n    super(\"struct\", `struct Vec`, WORD_SIZE);\n    this.coder = coder;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n  encode(value) {\n    if (!Array.isArray(value) && !isUint8Array(value)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ENCODE_ERROR,\n        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`\n      );\n    }\n    const lengthCoder = new BigNumberCoder(\"u64\");\n    if (isUint8Array(value)) {\n      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);\n    }\n    const bytes = value.map((v) => this.coder.encode(v));\n    const lengthBytes = lengthCoder.encode(value.length);\n    return new Uint8Array([...lengthBytes, ...(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(bytes)]);\n  }\n  decode(data, offset) {\n    if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid vec data size.`);\n    }\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(new BigNumberCoder(\"u64\").decode(lengthBytes, 0)[0]).toNumber();\n    const dataLength = length * this.coder.encodedLength;\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);\n    if (!this.#hasNestedOption && dataBytes.length !== dataLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);\n    }\n    let newOffset = offsetAndLength;\n    const chunks = [];\n    for (let i = 0; i < length; i++) {\n      const [decoded, optionOffset] = this.coder.decode(data, newOffset);\n      chunks.push(decoded);\n      newOffset = optionOffset;\n    }\n    return [chunks, newOffset];\n  }\n};\n\n// src/Interface.ts\n\n\n\n// src/ResolvedAbiType.ts\n\n\n// src/utils/json-abi.ts\n\nvar getEncodingVersion = (encoding) => {\n  switch (encoding) {\n    case void 0:\n    case ENCODING_V1:\n      return ENCODING_V1;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version '${encoding}' is unsupported.`\n      );\n  }\n};\nvar findTypeById = (abi, typeId) => {\n  const type = abi.types.find((t) => t.typeId === typeId);\n  if (!type) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.TYPE_NOT_FOUND,\n      `Type with typeId '${typeId}' doesn't exist in the ABI.`\n    );\n  }\n  return type;\n};\nvar findNonVoidInputs = (abi, inputs) => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE);\nvar findVectorBufferArgument = (components) => {\n  const bufferComponent = components.find((c) => c.name === \"buf\");\n  const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];\n  if (!bufferComponent || !bufferTypeArgument) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n      `The Vec type provided is missing or has a malformed 'buf' component.`\n    );\n  }\n  return bufferTypeArgument;\n};\n\n// src/ResolvedAbiType.ts\nvar ResolvedAbiType = class {\n  abi;\n  name;\n  type;\n  originalTypeArguments;\n  components;\n  constructor(abi, argument) {\n    this.abi = abi;\n    this.name = argument.name;\n    const jsonABIType = findTypeById(abi, argument.type);\n    if (jsonABIType.type.length > 256) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n        `The provided ABI type is too long: ${jsonABIType.type}.`\n      );\n    }\n    this.type = jsonABIType.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      jsonABIType.components,\n      jsonABIType.typeParameters ?? ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)\n    );\n  }\n  static getResolvedGenericComponents(abi, arg, components, typeParameters) {\n    if (components === null) {\n      return null;\n    }\n    if (typeParameters === null || typeParameters.length === 0) {\n      return components.map((c) => new ResolvedAbiType(abi, c));\n    }\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o = { ...obj };\n        o[typeParameter] = structuredClone(\n          arg.typeArguments?.[typeParameterIndex]\n        );\n        return o;\n      },\n      {}\n    );\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n    return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));\n  }\n  static resolveGenericArgTypes(abi, args, typeParametersAndArgsMap) {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== void 0) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name\n        };\n      }\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          )\n        };\n      }\n      const argType = findTypeById(abi, arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp])\n        };\n      }\n      return arg;\n    });\n  }\n  static getImplicitGenericTypeParameters(abi, args, implicitGenericParametersParam) {\n    if (!Array.isArray(args)) {\n      return null;\n    }\n    const implicitGenericParameters = implicitGenericParametersParam ?? [];\n    args.forEach((a) => {\n      const argType = findTypeById(abi, a.type);\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n      if (!Array.isArray(a.typeArguments)) {\n        return;\n      }\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n  getSignature() {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n    return `${prefix}${content}`;\n  }\n  getArgSignaturePrefix() {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) {\n      return \"s\";\n    }\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) {\n      return \"a\";\n    }\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) {\n      return \"e\";\n    }\n    return \"\";\n  }\n  getArgSignatureContent() {\n    if (this.type === \"raw untyped ptr\") {\n      return \"rawptr\";\n    }\n    if (this.type === \"raw untyped slice\") {\n      return \"rawslice\";\n    }\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n    if (this.components === null) {\n      return this.type;\n    }\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n    const typeArgumentsSignature = this.originalTypeArguments !== null ? `<${this.originalTypeArguments.map((a) => new ResolvedAbiType(this.abi, a).getSignature()).join(\",\")}>` : \"\";\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(\",\")})`;\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n};\n\n// src/encoding/strategies/getCoderForEncoding.ts\n\n\n// src/encoding/strategies/getCoderV1.ts\n\n\n// src/encoding/coders/VoidCoder.ts\nvar VoidCoder = class extends Coder {\n  constructor() {\n    super(\"void\", VOID_TYPE, 0);\n  }\n  encode(_value) {\n    return new Uint8Array([]);\n  }\n  decode(_data, offset) {\n    return [void 0, offset];\n  }\n};\n\n// src/encoding/strategies/getCoders.ts\nfunction getCoders(components, options) {\n  const { getCoder: getCoder2 } = options;\n  return components.reduce((obj, component) => {\n    const o = obj;\n    o[component.name] = getCoder2(component, options);\n    return o;\n  }, {});\n}\n\n// src/encoding/strategies/getCoderV1.ts\nvar getCoder = (resolvedAbiType, _options) => {\n  switch (resolvedAbiType.type) {\n    case U8_CODER_TYPE:\n    case U16_CODER_TYPE:\n    case U32_CODER_TYPE:\n      return new NumberCoder(resolvedAbiType.type);\n    case U64_CODER_TYPE:\n    case RAW_PTR_CODER_TYPE:\n      return new BigNumberCoder(\"u64\");\n    case U256_CODER_TYPE:\n      return new BigNumberCoder(\"u256\");\n    case RAW_SLICE_CODER_TYPE:\n      return new RawSliceCoder();\n    case BOOL_CODER_TYPE:\n      return new BooleanCoder();\n    case B256_CODER_TYPE:\n      return new B256Coder();\n    case B512_CODER_TYPE:\n      return new B512Coder();\n    case BYTES_CODER_TYPE:\n      return new ByteCoder();\n    case STD_STRING_CODER_TYPE:\n      return new StdStringCoder();\n    case STR_SLICE_CODER_TYPE:\n      return new StrSliceCoder();\n    case VOID_TYPE:\n      return new VoidCoder();\n    default:\n      break;\n  }\n  const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n  if (stringMatch) {\n    const length = parseInt(stringMatch.length, 10);\n    return new StringCoder(length);\n  }\n  const components = resolvedAbiType.components;\n  const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n  if (arrayMatch) {\n    const length = parseInt(arrayMatch.length, 10);\n    const arg = components[0];\n    if (!arg) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_COMPONENT,\n        `The provided Array type is missing an item of 'component'.`\n      );\n    }\n    const arrayElementCoder = getCoder(arg);\n    return new ArrayCoder(arrayElementCoder, length);\n  }\n  if (resolvedAbiType.type === VEC_CODER_TYPE) {\n    const arg = findVectorBufferArgument(components);\n    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });\n    return new VecCoder(itemCoder);\n  }\n  const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];\n  const structMatch = structRegEx.test(resolvedAbiType.type);\n  if (structMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    return new StructCoder(coderName, coders);\n  }\n  const enumMatch = enumRegEx.test(resolvedAbiType.type);\n  if (enumMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n    if (isOptionEnum) {\n      return new OptionCoder(coderName, coders);\n    }\n    return new EnumCoder(coderName, coders);\n  }\n  const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n  if (tupleMatch) {\n    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));\n    return new TupleCoder(coders);\n  }\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n    _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CODER_NOT_FOUND,\n    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`\n  );\n};\n\n// src/encoding/strategies/getCoderForEncoding.ts\nfunction getCoderForEncoding(encoding = ENCODING_V1) {\n  switch (encoding) {\n    case ENCODING_V1:\n      return getCoder;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version ${encoding} is unsupported.`\n      );\n  }\n}\n\n// src/AbiCoder.ts\nvar AbiCoder = class {\n  static getCoder(abi, argument, options = {\n    padToWordSize: false\n  }) {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);\n  }\n  static encode(abi, argument, value, options) {\n    return this.getCoder(abi, argument, options).encode(value);\n  }\n  static decode(abi, argument, data, offset, options) {\n    return this.getCoder(abi, argument, options).decode(data, offset);\n  }\n};\n\n// src/FunctionFragment.ts\n\n\n\n\n\n\n// src/utils/getFunctionInputs.ts\nvar getFunctionInputs = (params) => {\n  const { jsonAbi, inputs } = params;\n  let isMandatory = false;\n  return inputs.reduceRight((result, input) => {\n    const type = findTypeById(jsonAbi, input.type);\n    isMandatory = isMandatory || type.type !== VOID_TYPE && !optionRegEx.test(type.type);\n    return [{ ...input, isOptional: !isMandatory }, ...result];\n  }, []);\n};\n\n// src/utils/padValuesWithUndefined.ts\nvar padValuesWithUndefined = (values, inputs) => {\n  if (values.length >= inputs.length) {\n    return values;\n  }\n  const paddedValues = values.slice();\n  paddedValues.length = inputs.length;\n  paddedValues.fill(void 0, values.length);\n  return paddedValues;\n};\n\n// src/FunctionFragment.ts\nvar FunctionFragment = class {\n  signature;\n  selector;\n  selectorBytes;\n  encoding;\n  name;\n  jsonFn;\n  attributes;\n  jsonAbiOld;\n  jsonFnOld;\n  constructor(jsonAbi, fn) {\n    this.jsonFn = fn;\n    this.jsonAbiOld = jsonAbi;\n    this.jsonFnOld = jsonAbi.functions.find((f) => f.name === fn.name);\n    this.name = fn.name;\n    this.signature = FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);\n    this.selector = FunctionFragment.getFunctionSelector(this.signature);\n    this.selectorBytes = new StdStringCoder().encode(this.name);\n    this.encoding = getEncodingVersion(jsonAbi.encoding);\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n  static getSignature(abi, fn) {\n    const inputsSignatures = fn.inputs.map(\n      (input) => new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(\",\")})`;\n  }\n  static getFunctionSelector(functionSignature) {\n    const hashedFunctionSignature = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_3__.bufferFromString)(functionSignature, \"utf-8\"));\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_2__.bn)(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n  encodeArguments(values) {\n    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });\n    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;\n    if (values.length < mandatoryInputLength) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,\n        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`\n      );\n    }\n    const coders = this.jsonFnOld.inputs.map(\n      (t) => AbiCoder.getCoder(this.jsonAbiOld, t, {\n        encoding: this.encoding\n      })\n    );\n    const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);\n    return new TupleCoder(coders).encode(argumentValues);\n  }\n  decodeArguments(data) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data);\n    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);\n    if (nonVoidInputs.length === 0) {\n      if (bytes.length === 0) {\n        return void 0;\n      }\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DECODE_ERROR,\n        `Types/values length mismatch during decode. ${JSON.stringify({\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonVoidInputs: nonVoidInputs.length,\n            values: bytes.length\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonVoidInputs,\n            values: bytes\n          }\n        })}`\n      );\n    }\n    const result = this.jsonFnOld.inputs.reduce(\n      (obj, input) => {\n        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });\n        const [decodedValue, decodedOffset] = coder.decode(bytes, obj.offset);\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: decodedOffset\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n    return result.decoded;\n  }\n  decodeOutput(data) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data);\n    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {\n      encoding: this.encoding\n    });\n    return coder.decode(bytes, 0);\n  }\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly() {\n    const storageAttribute = this.attributes.find((attr) => attr.name === \"storage\");\n    return !storageAttribute?.arguments?.includes(\"write\");\n  }\n};\n\n// src/utils/transpile-abi.ts\nvar findTypeByConcreteId = (types, id) => types.find((x) => x.concreteTypeId === id);\nvar findConcreteTypeById = (abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id);\nfunction finsertTypeIdByConcreteTypeId(abi, types, id) {\n  const concreteType = findConcreteTypeById(abi, id);\n  if (concreteType.metadataTypeId !== void 0) {\n    return concreteType.metadataTypeId;\n  }\n  const type = findTypeByConcreteId(types, id);\n  if (type) {\n    return type.typeId;\n  }\n  types.push({\n    typeId: types.length,\n    type: concreteType.type,\n    components: parseComponents(concreteType.components),\n    concreteTypeId: id,\n    typeParameters: concreteType.typeParameters ?? null,\n    originalConcreteTypeId: concreteType?.concreteTypeId\n  });\n  return types.length - 1;\n}\nfunction parseFunctionTypeArguments(abi, types, concreteType) {\n  return concreteType.typeArguments?.map((cTypeId) => {\n    const self = findConcreteTypeById(abi, cTypeId);\n    const type = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);\n    return {\n      name: \"\",\n      type,\n      // originalTypeId: cTypeId,\n      typeArguments: parseFunctionTypeArguments(abi, types, self)\n    };\n  }) ?? null;\n}\nfunction parseConcreteType(abi, types, concreteTypeId, name) {\n  const type = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);\n  const concrete = findConcreteTypeById(abi, concreteTypeId);\n  return {\n    name: name ?? \"\",\n    type,\n    // concreteTypeId,\n    typeArguments: parseFunctionTypeArguments(abi, types, concrete)\n  };\n}\nfunction parseComponents(abi, types, components) {\n  return components?.map((component) => {\n    const { typeId, name, typeArguments } = component;\n    const type = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);\n    return {\n      name,\n      type,\n      // originalTypeId: typeId,\n      typeArguments: parseComponents(abi, types, typeArguments)\n    };\n  }) ?? null;\n}\nfunction transpileAbi(abi) {\n  if (!abi.specVersion) {\n    return abi;\n  }\n  const types = [];\n  abi.metadataTypes.forEach((m) => {\n    const t = {\n      typeId: m.metadataTypeId,\n      type: m.type,\n      components: m.components ?? (m.type === \"()\" ? [] : null),\n      typeParameters: m.typeParameters ?? null\n    };\n    types.push(t);\n  });\n  types.forEach((t) => {\n    t.components = parseComponents(abi, types, t.components);\n  });\n  const functions = abi.functions.map((fn) => {\n    const inputs = fn.inputs.map(\n      ({ concreteTypeId, name }) => parseConcreteType(abi, types, concreteTypeId, name)\n    );\n    const output = parseConcreteType(abi, types, fn.output, \"\");\n    return { ...fn, inputs, output };\n  });\n  const configurables = abi.configurables.map((conf) => ({\n    name: conf.name,\n    configurableType: parseConcreteType(abi, types, conf.concreteTypeId),\n    offset: conf.offset\n  }));\n  const loggedTypes = abi.loggedTypes.map((log) => ({\n    logId: log.logId,\n    loggedType: parseConcreteType(abi, types, log.concreteTypeId)\n  }));\n  const transpiled = {\n    encoding: abi.encodingVersion,\n    types,\n    functions,\n    loggedTypes,\n    messagesTypes: abi.messagesTypes,\n    configurables\n  };\n  return transpiled;\n}\n\n// src/Interface.ts\nvar Interface = class {\n  functions;\n  configurables;\n  jsonAbi;\n  encoding;\n  jsonAbiOld;\n  constructor(jsonAbi) {\n    this.jsonAbi = jsonAbi;\n    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);\n    this.jsonAbiOld = transpileAbi(jsonAbi);\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])\n    );\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector) {\n    const fn = Object.values(this.functions).find(\n      (f) => f.name === nameOrSignatureOrSelector || f.signature === nameOrSignatureOrSelector || f.selector === nameOrSignatureOrSelector\n    );\n    if (fn !== void 0) {\n      return fn;\n    }\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.FUNCTION_NOT_FOUND,\n      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`\n    );\n  }\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment, data) {\n    const fragment = typeof functionFragment === \"string\" ? this.getFunction(functionFragment) : functionFragment;\n    return fragment.decodeOutput(data);\n  }\n  decodeLog(data, logId) {\n    const loggedType = this.jsonAbiOld.loggedTypes.find((type) => type.logId === logId);\n    if (!loggedType) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.LOG_TYPE_NOT_FOUND,\n        `Log type with logId '${logId}' doesn't exist in the ABI.`\n      );\n    }\n    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data), 0, {\n      encoding: this.encoding\n    });\n  }\n  encodeConfigurable(name, value) {\n    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);\n    if (!configurable) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n        `A configurable with the '${name}' was not found in the ABI.`\n      );\n    }\n    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {\n      encoding: this.encoding\n    });\n  }\n  encodeType(concreteTypeId, value) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {\n      encoding: this.encoding\n    });\n  }\n  decodeType(concreteTypeId, data) {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      \"\"\n    );\n    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/account/dist/configs.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@fuel-ts/account/dist/configs.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEVNET_NETWORK_URL: () => (/* binding */ DEVNET_NETWORK_URL),\n/* harmony export */   TESTNET_NETWORK_URL: () => (/* binding */ TESTNET_NETWORK_URL)\n/* harmony export */ });\n// src/configs.ts\nvar DEVNET_NETWORK_URL = \"https://devnet.fuel.network/v1/graphql\";\nvar TESTNET_NETWORK_URL = \"https://testnet.fuel.network/v1/graphql\";\n\n//# sourceMappingURL=configs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvYWNjb3VudC9kaXN0L2NvbmZpZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvanVib2lpL0Z1ZWwvQXJjYW5lL25vZGVfbW9kdWxlcy9AZnVlbC10cy9hY2NvdW50L2Rpc3QvY29uZmlncy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbmZpZ3MudHNcbnZhciBERVZORVRfTkVUV09SS19VUkwgPSBcImh0dHBzOi8vZGV2bmV0LmZ1ZWwubmV0d29yay92MS9ncmFwaHFsXCI7XG52YXIgVEVTVE5FVF9ORVRXT1JLX1VSTCA9IFwiaHR0cHM6Ly90ZXN0bmV0LmZ1ZWwubmV0d29yay92MS9ncmFwaHFsXCI7XG5leHBvcnQge1xuICBERVZORVRfTkVUV09SS19VUkwsXG4gIFRFU1RORVRfTkVUV09SS19VUkxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWdzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/account/dist/configs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/account/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@fuel-ts/account/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractAccount: () => (/* binding */ AbstractAccount),\n/* harmony export */   AbstractScriptRequest: () => (/* binding */ AbstractScriptRequest),\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AddressType: () => (/* binding */ AddressType),\n/* harmony export */   BLOCKS_PAGE_SIZE_LIMIT: () => (/* binding */ BLOCKS_PAGE_SIZE_LIMIT),\n/* harmony export */   BaseTransactionRequest: () => (/* binding */ BaseTransactionRequest),\n/* harmony export */   BaseWalletUnlocked: () => (/* binding */ BaseWalletUnlocked),\n/* harmony export */   BlobTransactionRequest: () => (/* binding */ BlobTransactionRequest),\n/* harmony export */   CHAIN_IDS: () => (/* binding */ CHAIN_IDS),\n/* harmony export */   ChainName: () => (/* binding */ ChainName),\n/* harmony export */   ChangeOutputCollisionError: () => (/* binding */ ChangeOutputCollisionError),\n/* harmony export */   CreateTransactionRequest: () => (/* binding */ CreateTransactionRequest),\n/* harmony export */   DEFAULT_RESOURCE_CACHE_TTL: () => (/* binding */ DEFAULT_RESOURCE_CACHE_TTL),\n/* harmony export */   Fuel: () => (/* binding */ Fuel),\n/* harmony export */   FuelConnector: () => (/* binding */ FuelConnector),\n/* harmony export */   FuelConnectorEventType: () => (/* binding */ FuelConnectorEventType),\n/* harmony export */   FuelConnectorEventTypes: () => (/* binding */ FuelConnectorEventTypes),\n/* harmony export */   FuelConnectorMethods: () => (/* binding */ FuelConnectorMethods),\n/* harmony export */   GAS_USED_MODIFIER: () => (/* binding */ GAS_USED_MODIFIER),\n/* harmony export */   HDWallet: () => (/* binding */ hdwallet_default),\n/* harmony export */   Language: () => (/* binding */ Language),\n/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage),\n/* harmony export */   MNEMONIC_SIZES: () => (/* binding */ MNEMONIC_SIZES),\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage),\n/* harmony export */   Mnemonic: () => (/* binding */ mnemonic_default),\n/* harmony export */   MnemonicVault: () => (/* binding */ MnemonicVault),\n/* harmony export */   NoWitnessAtIndexError: () => (/* binding */ NoWitnessAtIndexError),\n/* harmony export */   NoWitnessByOwnerError: () => (/* binding */ NoWitnessByOwnerError),\n/* harmony export */   OperationName: () => (/* binding */ OperationName),\n/* harmony export */   Predicate: () => (/* binding */ Predicate),\n/* harmony export */   PrivateKeyVault: () => (/* binding */ PrivateKeyVault),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   RESOURCES_PAGE_SIZE_LIMIT: () => (/* binding */ RESOURCES_PAGE_SIZE_LIMIT),\n/* harmony export */   ScriptTransactionRequest: () => (/* binding */ ScriptTransactionRequest),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   StorageAbstract: () => (/* binding */ StorageAbstract),\n/* harmony export */   TRANSACTIONS_PAGE_SIZE_LIMIT: () => (/* binding */ TRANSACTIONS_PAGE_SIZE_LIMIT),\n/* harmony export */   TransactionResponse: () => (/* binding */ TransactionResponse),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType),\n/* harmony export */   TransactionTypeName: () => (/* binding */ TransactionTypeName),\n/* harmony export */   UpgradeTransactionRequest: () => (/* binding */ UpgradeTransactionRequest),\n/* harmony export */   UploadTransactionRequest: () => (/* binding */ UploadTransactionRequest),\n/* harmony export */   Vault: () => (/* binding */ Vault),\n/* harmony export */   Wallet: () => (/* binding */ Wallet),\n/* harmony export */   WalletLocked: () => (/* binding */ WalletLocked),\n/* harmony export */   WalletManager: () => (/* binding */ WalletManager),\n/* harmony export */   WalletUnlocked: () => (/* binding */ WalletUnlocked),\n/* harmony export */   addAmountToCoinQuantities: () => (/* binding */ addAmountToCoinQuantities),\n/* harmony export */   addOperation: () => (/* binding */ addOperation),\n/* harmony export */   aggregateInputsAmountsByAssetAndOwner: () => (/* binding */ aggregateInputsAmountsByAssetAndOwner),\n/* harmony export */   assemblePanicError: () => (/* binding */ assemblePanicError),\n/* harmony export */   assembleReceiptByType: () => (/* binding */ assembleReceiptByType),\n/* harmony export */   assembleRevertError: () => (/* binding */ assembleRevertError),\n/* harmony export */   assembleTransactionSummary: () => (/* binding */ assembleTransactionSummary),\n/* harmony export */   assets: () => (/* binding */ assets),\n/* harmony export */   buildBlockExplorerUrl: () => (/* binding */ buildBlockExplorerUrl),\n/* harmony export */   cacheFor: () => (/* binding */ cacheFor),\n/* harmony export */   cacheRequestInputsResources: () => (/* binding */ cacheRequestInputsResources),\n/* harmony export */   cacheRequestInputsResourcesFromOwner: () => (/* binding */ cacheRequestInputsResourcesFromOwner),\n/* harmony export */   calculateGasFee: () => (/* binding */ calculateGasFee),\n/* harmony export */   calculateMetadataGasForTxBlob: () => (/* binding */ calculateMetadataGasForTxBlob),\n/* harmony export */   calculateMetadataGasForTxCreate: () => (/* binding */ calculateMetadataGasForTxCreate),\n/* harmony export */   calculateMetadataGasForTxScript: () => (/* binding */ calculateMetadataGasForTxScript),\n/* harmony export */   calculateMetadataGasForTxUpgrade: () => (/* binding */ calculateMetadataGasForTxUpgrade),\n/* harmony export */   calculateMetadataGasForTxUpload: () => (/* binding */ calculateMetadataGasForTxUpload),\n/* harmony export */   calculateMinGasForTxUpload: () => (/* binding */ calculateMinGasForTxUpload),\n/* harmony export */   calculateTXFeeForSummary: () => (/* binding */ calculateTXFeeForSummary),\n/* harmony export */   coinQuantityfy: () => (/* binding */ coinQuantityfy),\n/* harmony export */   deferPromise: () => (/* binding */ deferPromise),\n/* harmony export */   deployScriptOrPredicate: () => (/* binding */ deployScriptOrPredicate),\n/* harmony export */   dispatchFuelConnectorEvent: () => (/* binding */ dispatchFuelConnectorEvent),\n/* harmony export */   english: () => (/* binding */ english),\n/* harmony export */   extractBurnedAssetsFromReceipts: () => (/* binding */ extractBurnedAssetsFromReceipts),\n/* harmony export */   extractMintedAssetsFromReceipts: () => (/* binding */ extractMintedAssetsFromReceipts),\n/* harmony export */   extractTxError: () => (/* binding */ extractTxError),\n/* harmony export */   fuelAssetsBaseUrl: () => (/* binding */ fuelAssetsBaseUrl),\n/* harmony export */   gasUsedByInputs: () => (/* binding */ gasUsedByInputs),\n/* harmony export */   getAssetAmountInRequestInputs: () => (/* binding */ getAssetAmountInRequestInputs),\n/* harmony export */   getAssetById: () => (/* binding */ getAssetById),\n/* harmony export */   getAssetEth: () => (/* binding */ getAssetEth),\n/* harmony export */   getAssetFuel: () => (/* binding */ getAssetFuel),\n/* harmony export */   getAssetNetwork: () => (/* binding */ getAssetNetwork),\n/* harmony export */   getAssetWithNetwork: () => (/* binding */ getAssetWithNetwork),\n/* harmony export */   getAssetsByOwner: () => (/* binding */ getAssetsByOwner),\n/* harmony export */   getBurnableAssetCount: () => (/* binding */ getBurnableAssetCount),\n/* harmony export */   getBytecodeConfigurableOffset: () => (/* binding */ getBytecodeConfigurableOffset),\n/* harmony export */   getBytecodeDataOffset: () => (/* binding */ getBytecodeDataOffset),\n/* harmony export */   getBytecodeId: () => (/* binding */ getBytecodeId),\n/* harmony export */   getContractCallOperations: () => (/* binding */ getContractCallOperations),\n/* harmony export */   getContractCreatedOperations: () => (/* binding */ getContractCreatedOperations),\n/* harmony export */   getDecodedLogs: () => (/* binding */ getDecodedLogs),\n/* harmony export */   getDefaultChainId: () => (/* binding */ getDefaultChainId),\n/* harmony export */   getGasUsedFromReceipts: () => (/* binding */ getGasUsedFromReceipts),\n/* harmony export */   getInputAccountAddress: () => (/* binding */ getInputAccountAddress),\n/* harmony export */   getInputContractFromIndex: () => (/* binding */ getInputContractFromIndex),\n/* harmony export */   getInputFromAssetId: () => (/* binding */ getInputFromAssetId),\n/* harmony export */   getInputsByType: () => (/* binding */ getInputsByType),\n/* harmony export */   getInputsByTypes: () => (/* binding */ getInputsByTypes),\n/* harmony export */   getInputsCoin: () => (/* binding */ getInputsCoin),\n/* harmony export */   getInputsCoinAndMessage: () => (/* binding */ getInputsCoinAndMessage),\n/* harmony export */   getInputsContract: () => (/* binding */ getInputsContract),\n/* harmony export */   getInputsMessage: () => (/* binding */ getInputsMessage),\n/* harmony export */   getLegacyBlobId: () => (/* binding */ getLegacyBlobId),\n/* harmony export */   getMaxGas: () => (/* binding */ getMaxGas),\n/* harmony export */   getMinGas: () => (/* binding */ getMinGas),\n/* harmony export */   getOperations: () => (/* binding */ getOperations),\n/* harmony export */   getOutputsByType: () => (/* binding */ getOutputsByType),\n/* harmony export */   getOutputsChange: () => (/* binding */ getOutputsChange),\n/* harmony export */   getOutputsCoin: () => (/* binding */ getOutputsCoin),\n/* harmony export */   getOutputsContract: () => (/* binding */ getOutputsContract),\n/* harmony export */   getOutputsContractCreated: () => (/* binding */ getOutputsContractCreated),\n/* harmony export */   getOutputsVariable: () => (/* binding */ getOutputsVariable),\n/* harmony export */   getPayProducerOperations: () => (/* binding */ getPayProducerOperations),\n/* harmony export */   getPredicateRoot: () => (/* binding */ getPredicateRoot),\n/* harmony export */   getReceiptsByType: () => (/* binding */ getReceiptsByType),\n/* harmony export */   getReceiptsCall: () => (/* binding */ getReceiptsCall),\n/* harmony export */   getReceiptsMessageOut: () => (/* binding */ getReceiptsMessageOut),\n/* harmony export */   getReceiptsTransferOut: () => (/* binding */ getReceiptsTransferOut),\n/* harmony export */   getReceiptsWithMissingData: () => (/* binding */ getReceiptsWithMissingData),\n/* harmony export */   getRequestInputResourceOwner: () => (/* binding */ getRequestInputResourceOwner),\n/* harmony export */   getTotalFeeFromStatus: () => (/* binding */ getTotalFeeFromStatus),\n/* harmony export */   getTransactionStatusName: () => (/* binding */ getTransactionStatusName),\n/* harmony export */   getTransactionSummary: () => (/* binding */ getTransactionSummary),\n/* harmony export */   getTransactionSummaryFromRequest: () => (/* binding */ getTransactionSummaryFromRequest),\n/* harmony export */   getTransactionTypeName: () => (/* binding */ getTransactionTypeName),\n/* harmony export */   getTransactionsSummaries: () => (/* binding */ getTransactionsSummaries),\n/* harmony export */   getTransferOperations: () => (/* binding */ getTransferOperations),\n/* harmony export */   getWithdrawFromFuelOperations: () => (/* binding */ getWithdrawFromFuelOperations),\n/* harmony export */   hasSameAssetId: () => (/* binding */ hasSameAssetId),\n/* harmony export */   inputify: () => (/* binding */ inputify),\n/* harmony export */   isCoin: () => (/* binding */ isCoin),\n/* harmony export */   isInputCoin: () => (/* binding */ isInputCoin),\n/* harmony export */   isMessage: () => (/* binding */ isMessage),\n/* harmony export */   isMessageCoin: () => (/* binding */ isMessageCoin),\n/* harmony export */   isRawCoin: () => (/* binding */ isRawCoin),\n/* harmony export */   isRawMessage: () => (/* binding */ isRawMessage),\n/* harmony export */   isRequestInputCoin: () => (/* binding */ isRequestInputCoin),\n/* harmony export */   isRequestInputCoinOrMessage: () => (/* binding */ isRequestInputCoinOrMessage),\n/* harmony export */   isRequestInputMessage: () => (/* binding */ isRequestInputMessage),\n/* harmony export */   isRequestInputMessageWithoutData: () => (/* binding */ isRequestInputMessageWithoutData),\n/* harmony export */   isRequestInputResource: () => (/* binding */ isRequestInputResource),\n/* harmony export */   isRequestInputResourceFromOwner: () => (/* binding */ isRequestInputResourceFromOwner),\n/* harmony export */   isTransactionTypeBlob: () => (/* binding */ isTransactionTypeBlob),\n/* harmony export */   isTransactionTypeCreate: () => (/* binding */ isTransactionTypeCreate),\n/* harmony export */   isTransactionTypeScript: () => (/* binding */ isTransactionTypeScript),\n/* harmony export */   isTransactionTypeUpgrade: () => (/* binding */ isTransactionTypeUpgrade),\n/* harmony export */   isTransactionTypeUpload: () => (/* binding */ isTransactionTypeUpload),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isTypeBlob: () => (/* binding */ isTypeBlob),\n/* harmony export */   isTypeCreate: () => (/* binding */ isTypeCreate),\n/* harmony export */   isTypeMint: () => (/* binding */ isTypeMint),\n/* harmony export */   isTypeScript: () => (/* binding */ isTypeScript),\n/* harmony export */   isTypeUpgrade: () => (/* binding */ isTypeUpgrade),\n/* harmony export */   isTypeUpload: () => (/* binding */ isTypeUpload),\n/* harmony export */   normalizeJSON: () => (/* binding */ normalizeJSON),\n/* harmony export */   outputify: () => (/* binding */ outputify),\n/* harmony export */   processGqlReceipt: () => (/* binding */ processGqlReceipt),\n/* harmony export */   processGraphqlStatus: () => (/* binding */ processGraphqlStatus),\n/* harmony export */   rawAssets: () => (/* binding */ rawAssets),\n/* harmony export */   resolveGasDependentCosts: () => (/* binding */ resolveGasDependentCosts),\n/* harmony export */   resolveIconPaths: () => (/* binding */ resolveIconPaths),\n/* harmony export */   returnZeroScript: () => (/* binding */ returnZeroScript),\n/* harmony export */   transactionRequestify: () => (/* binding */ transactionRequestify),\n/* harmony export */   urlJoin: () => (/* binding */ urlJoin),\n/* harmony export */   validateTransactionForAssetBurn: () => (/* binding */ validateTransactionForAssetBurn),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout),\n/* harmony export */   withdrawScript: () => (/* binding */ withdrawScript)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/address */ \"(ssr)/./node_modules/@fuel-ts/address/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/transactions */ \"(ssr)/./node_modules/@fuel-ts/transactions/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/ramda/es/clone.js\");\n/* harmony import */ var _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/versions */ \"(ssr)/./node_modules/@fuel-ts/versions/dist/index.mjs\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! graphql-request */ \"(ssr)/./node_modules/graphql-request/build/esm/index.js\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! graphql-tag */ \"(ssr)/./node_modules/graphql-tag/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @fuel-ts/address/configs */ \"(ssr)/./node_modules/@fuel-ts/address/dist/configs.mjs\");\n/* harmony import */ var _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fuel-ts/transactions/configs */ \"(ssr)/./node_modules/@fuel-ts/transactions/dist/configs.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @fuel-ts/merkle */ \"(ssr)/./node_modules/@fuel-ts/merkle/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/providers/chains.ts\nvar CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889\n  }\n};\n\n// src/assets/utils/network.ts\nvar getDefaultChainId = (networkType) => {\n  if (networkType === \"ethereum\") {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === \"fuel\") {\n    return CHAIN_IDS.fuel.testnet;\n  }\n  return void 0;\n};\nvar getAssetNetwork = ({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  );\n  return network;\n};\nvar getAssetWithNetwork = ({\n  asset,\n  chainId,\n  networkType\n}) => {\n  const { networks: _, ...assetRest } = asset;\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  if (chainIdToUse === void 0) {\n    return void 0;\n  }\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType\n  });\n  if (!assetNetwork) {\n    return void 0;\n  }\n  return {\n    ...assetRest,\n    ...assetNetwork\n  };\n};\nvar getAssetEth = (asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"ethereum\",\n  chainId\n});\nvar getAssetFuel = (asset, chainId) => getAssetWithNetwork({\n  asset,\n  networkType: \"fuel\",\n  chainId\n});\n\n// src/assets/utils/url.ts\nvar DELIMITER_PATH = \"/\";\nvar trimRegex = /^\\/|\\/$/g;\nvar trimPath = (path = \"\") => path.replace(trimRegex, \"\");\nfunction urlJoin(baseUrl, ...paths) {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;\n  const rootPath = baseUrl?.[0] === \"/\" && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift(\"\");\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n\n// src/assets/utils/resolveIconPaths.ts\nfunction resolveIconPaths(assets2, basePath = \"./\") {\n  return assets2.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon)\n  }));\n}\n\n// src/assets/utils/fuelAssetsBaseUrl.ts\nvar fuelAssetsBaseUrl = \"https://assets.fuel.network/providers/\";\n\n// src/assets/assets.ts\nvar rawAssets = [\n  {\n    name: \"Ethereum\",\n    symbol: \"ETH\",\n    icon: \"eth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18\n      },\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\"\n      }\n    ]\n  },\n  {\n    name: \"WETH\",\n    symbol: \"WETH\",\n    icon: \"weth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"weETH\",\n    symbol: \"weETH\",\n    icon: \"weETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsETH\",\n    symbol: \"rsETH\",\n    icon: \"rsETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rETH\",\n    symbol: \"rETH\",\n    icon: \"reth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xae78736cd615f374d3085123a210448e74fc6393\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wbETH\",\n    symbol: \"wbETH\",\n    icon: \"wbeth.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa2E3356610840701BDf5611a53974510Ae27E2e1\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rstETH\",\n    symbol: \"rstETH\",\n    icon: \"rstETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a4EffD87C2f3C55CA251080b1343b605f327E3a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"amphrETH\",\n    symbol: \"amphrETH\",\n    icon: \"amphrETH.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x5fD13359Ba15A84B76f7F87568309040176167cd\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mBTC\",\n    symbol: \"Manta mBTC\",\n    icon: \"manta-mbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4041381e947CFD3D483d67a25C6aa9Dc924250c5\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mETH\",\n    symbol: \"Manta mETH\",\n    icon: \"manta-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8CdF550C04Bc9B9F10938368349C9c8051A772b6\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Manta mUSD\",\n    symbol: \"Manta mUSD\",\n    icon: \"manta-musd.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x3f24E1d7a973867fC2A03fE199E5502514E0e11E\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pumpBTC\",\n    symbol: \"pumpBTC\",\n    icon: \"pumpbtc.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xf469fbd2abcd6b9de8e169d128226c0fc90a012e\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"FBTC\",\n    symbol: \"FBTC\",\n    icon: \"fbtc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xc96de26018a54d51c097160568752c4e3bd6c364\",\n        decimals: 8\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a\",\n        decimals: 8\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC\",\n    symbol: \"SolvBTC\",\n    icon: \"solvBTC.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7a56e1c57c7475ccf742a1832b028f0456652f97\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"SolvBTC.BBN\",\n    symbol: \"SolvBTC.BBN\",\n    icon: \"SolvBTC.BBN.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd9d920aa40f578ab794426f5c90f6c731d159def\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Mantle mETH\",\n    symbol: \"Mantle mETH\",\n    icon: \"mantle-meth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sDAI\",\n    symbol: \"sDAI\",\n    icon: \"sdai.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x83f20f44975d03b1b09e64809b757c47f942beea\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"USDT\",\n    symbol: \"USDT\",\n    icon: \"usdt.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDC\",\n    symbol: \"USDC\",\n    icon: \"usdc.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n        decimals: 6\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b\",\n        decimals: 6\n      }\n    ]\n  },\n  {\n    name: \"USDe\",\n    symbol: \"USDe\",\n    icon: \"USDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"sUSDe\",\n    symbol: \"sUSDe\",\n    icon: \"sUSDe.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x9d39a5de30e57443bff2a8307a4256c8797a3497\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"rsUSDe\",\n    symbol: \"rsUSDe\",\n    icon: \"rsUSDe.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"wstETH\",\n    symbol: \"wstETH\",\n    icon: \"wsteth.svg\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"ezETH\",\n    symbol: \"ezETH\",\n    icon: \"ezeth.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xbf5495Efe5DB9ce00f80364C8B423567e58d2110\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"pzETH\",\n    symbol: \"pzETH\",\n    icon: \"pzETH.webp\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"Re7LRT\",\n    symbol: \"Re7LRT\",\n    icon: \"Re7LRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995\",\n        decimals: 9\n      }\n    ]\n  },\n  {\n    name: \"steakLRT\",\n    symbol: \"steakLRT\",\n    icon: \"steakLRT.png\",\n    networks: [\n      {\n        type: \"ethereum\",\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: \"0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc\",\n        decimals: 18\n      },\n      {\n        type: \"fuel\",\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId: \"0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8\",\n        assetId: \"0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30\",\n        decimals: 9\n      }\n    ]\n  }\n];\nvar assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);\n\n// src/assets/asset-api.ts\nvar networks = {\n  mainnet: \"https://mainnet-explorer.fuel.network\",\n  testnet: \"https://explorer-indexer-testnet.fuel.network\"\n};\nvar request = async (url, slug) => {\n  const response = await fetch(`${url}${slug}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    }\n  });\n  try {\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\nvar buildQueryString = (parameters) => {\n  const query = new URLSearchParams();\n  Object.entries(parameters).forEach(([key, value]) => {\n    query.set(key, value.toString());\n  });\n  return query.size > 0 ? `?${query.toString()}` : \"\";\n};\nvar getAssetById = (opts) => {\n  const { network = \"mainnet\", assetId } = opts;\n  const url = networks[network];\n  return request(url, `/assets/${assetId}`);\n};\nvar getAssetsByOwner = async (opts) => {\n  const { network = \"mainnet\", owner, pagination = { last: 10 } } = opts;\n  const url = networks[network];\n  const { last } = pagination;\n  const queryString = buildQueryString({ last });\n  const response = await request(url, `/accounts/${owner}/assets${queryString}`);\n  if (!response) {\n    return { data: [], pageInfo: { count: 0 } };\n  }\n  return response;\n};\n\n// src/account.ts\n\n\n\n\n\n\n\n\n\n// src/providers/coin-quantity.ts\n\n\nvar coinQuantityfy = (coinQuantityLike) => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? void 0;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? void 0;\n  }\n  const bnAmount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount);\n  return {\n    assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId),\n    amount: bnAmount.lt(1) ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1) : bnAmount,\n    max: max ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(max) : void 0\n  };\n};\nvar addAmountToCoinQuantities = (params) => {\n  const { amount, assetId } = params;\n  const coinQuantities = [...params.coinQuantities];\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n  return coinQuantities;\n};\n\n// src/providers/provider.ts\n\n\n\n\n\n\n\n\n\n\n\n// src/providers/__generated__/operations.ts\n\nvar SubmittedStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nvar ReceiptFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nvar SuccessStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nvar SuccessStatusWithBlockIdFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nvar MalleableTransactionFieldsFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nvar FailureStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nvar FailureStatusWithBlockIdFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nvar SqueezedOutStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nvar TransactionStatusSubscriptionFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar TransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar TransactionFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nvar TransactionRawPayloadFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nvar InputEstimatePredicatesFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nvar TransactionEstimatePredicatesFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nvar DryRunFailureStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunSuccessStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nvar DryRunTransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nvar DryRunTransactionExecutionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nvar BlockFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nvar CoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nvar MessageCoinFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nvar MessageFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nvar GetMessageFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nvar MessageProofFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nvar TxParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nvar PredicateParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nvar ScriptParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nvar ContractParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nvar FeeParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nvar DependentCostFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nvar GasCostsFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nvar ConsensusParametersFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nvar ChainInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nvar ContractBalanceFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nvar PageInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nvar NodeInfoFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n}\n    `;\nvar RelayedTransactionStatusFragmentDoc = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nvar GetVersionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nvar GetNodeInfoDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nvar GetChainDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nvar GetChainAndNodeInfoDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nvar GetTransactionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nvar GetTransactionWithReceiptsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nvar GetTransactionsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nvar GetTransactionsByOwnerDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nvar EstimatePredicatesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nvar GetLatestBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetLatestBlockHeightDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nvar GetBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nvar GetBlockWithTransactionsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nvar GetBlocksDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nvar GetCoinDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nvar GetCoinsDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nvar GetCoinsToSpendDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nvar GetContractDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nvar GetContractBalanceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nvar GetBalanceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nvar GetLatestGasPriceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nvar EstimateGasPriceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nvar GetBalancesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    `;\nvar GetMessagesDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nvar DaCompressedBlockDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query daCompressedBlock($height: U32!) {\n  daCompressedBlock(height: $height) {\n    bytes\n  }\n}\n    `;\nvar GetMessageProofDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nvar GetMessageStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nvar GetRelayedTransactionStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nvar DryRunDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nvar SubmitDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nvar ProduceBlocksDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nvar GetMessageByNonceDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nvar IsUserAccountDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nvar GetConsensusParametersVersionDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nvar SubmitAndAwaitStatusDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {\n  submitAndAwaitStatus(tx: $encodedTransaction) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nvar StatusChangeDocument = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n    subscription statusChange($transactionId: TransactionId!) {\n  statusChange(id: $transactionId) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nfunction getSdk(requester) {\n  return {\n    getVersion(variables, options) {\n      return requester(GetVersionDocument, variables, options);\n    },\n    getNodeInfo(variables, options) {\n      return requester(GetNodeInfoDocument, variables, options);\n    },\n    getChain(variables, options) {\n      return requester(GetChainDocument, variables, options);\n    },\n    getChainAndNodeInfo(variables, options) {\n      return requester(GetChainAndNodeInfoDocument, variables, options);\n    },\n    getTransaction(variables, options) {\n      return requester(GetTransactionDocument, variables, options);\n    },\n    getTransactionWithReceipts(variables, options) {\n      return requester(GetTransactionWithReceiptsDocument, variables, options);\n    },\n    getTransactions(variables, options) {\n      return requester(GetTransactionsDocument, variables, options);\n    },\n    getTransactionsByOwner(variables, options) {\n      return requester(GetTransactionsByOwnerDocument, variables, options);\n    },\n    estimatePredicates(variables, options) {\n      return requester(EstimatePredicatesDocument, variables, options);\n    },\n    getLatestBlock(variables, options) {\n      return requester(GetLatestBlockDocument, variables, options);\n    },\n    getLatestBlockHeight(variables, options) {\n      return requester(GetLatestBlockHeightDocument, variables, options);\n    },\n    getBlock(variables, options) {\n      return requester(GetBlockDocument, variables, options);\n    },\n    getBlockWithTransactions(variables, options) {\n      return requester(GetBlockWithTransactionsDocument, variables, options);\n    },\n    getBlocks(variables, options) {\n      return requester(GetBlocksDocument, variables, options);\n    },\n    getCoin(variables, options) {\n      return requester(GetCoinDocument, variables, options);\n    },\n    getCoins(variables, options) {\n      return requester(GetCoinsDocument, variables, options);\n    },\n    getCoinsToSpend(variables, options) {\n      return requester(GetCoinsToSpendDocument, variables, options);\n    },\n    getContract(variables, options) {\n      return requester(GetContractDocument, variables, options);\n    },\n    getContractBalance(variables, options) {\n      return requester(GetContractBalanceDocument, variables, options);\n    },\n    getBalance(variables, options) {\n      return requester(GetBalanceDocument, variables, options);\n    },\n    getLatestGasPrice(variables, options) {\n      return requester(GetLatestGasPriceDocument, variables, options);\n    },\n    estimateGasPrice(variables, options) {\n      return requester(EstimateGasPriceDocument, variables, options);\n    },\n    getBalances(variables, options) {\n      return requester(GetBalancesDocument, variables, options);\n    },\n    getMessages(variables, options) {\n      return requester(GetMessagesDocument, variables, options);\n    },\n    daCompressedBlock(variables, options) {\n      return requester(DaCompressedBlockDocument, variables, options);\n    },\n    getMessageProof(variables, options) {\n      return requester(GetMessageProofDocument, variables, options);\n    },\n    getMessageStatus(variables, options) {\n      return requester(GetMessageStatusDocument, variables, options);\n    },\n    getRelayedTransactionStatus(variables, options) {\n      return requester(GetRelayedTransactionStatusDocument, variables, options);\n    },\n    dryRun(variables, options) {\n      return requester(DryRunDocument, variables, options);\n    },\n    submit(variables, options) {\n      return requester(SubmitDocument, variables, options);\n    },\n    produceBlocks(variables, options) {\n      return requester(ProduceBlocksDocument, variables, options);\n    },\n    getMessageByNonce(variables, options) {\n      return requester(GetMessageByNonceDocument, variables, options);\n    },\n    isUserAccount(variables, options) {\n      return requester(IsUserAccountDocument, variables, options);\n    },\n    getConsensusParametersVersion(variables, options) {\n      return requester(GetConsensusParametersVersionDocument, variables, options);\n    },\n    submitAndAwaitStatus(variables, options) {\n      return requester(SubmitAndAwaitStatusDocument, variables, options);\n    },\n    statusChange(variables, options) {\n      return requester(StatusChangeDocument, variables, options);\n    }\n  };\n}\n\n// src/providers/fuel-graphql-subscriber.ts\n\n\n\n// src/providers/utils/handle-gql-error-message.ts\n\nvar mapGqlErrorMessage = (error) => {\n  switch (error.message) {\n    case \"not enough coins to fit the target\" /* NOT_ENOUGH_COINS */:\n      return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account(s) sending the transaction don't have enough funds to cover the transaction.`,\n        {},\n        error\n      );\n    case \"max number of coins is reached while trying to fit the target\" /* MAX_COINS_REACHED */:\n      return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_COINS_REACHED,\n        \"The account retrieving coins has exceeded the maximum number of coins per asset. Please consider combining your coins into a single UTXO.\",\n        {},\n        error\n      );\n    default:\n      return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_REQUEST, error.message, {}, error);\n  }\n};\nvar mapGqlErrorWithIncompatibleNodeVersion = (error, incompatibleNodeVersionMessage) => {\n  if (!incompatibleNodeVersionMessage) {\n    return error;\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n    error.code,\n    `${error.message}\n\n${incompatibleNodeVersionMessage}`,\n    error.metadata,\n    error.rawError\n  );\n};\nvar assertGqlResponseHasNoErrors = (errors, incompatibleNodeVersionMessage = false) => {\n  if (!Array.isArray(errors)) {\n    return;\n  }\n  const mappedErrors = errors.map(mapGqlErrorMessage);\n  if (mappedErrors.length === 1) {\n    throw mapGqlErrorWithIncompatibleNodeVersion(mappedErrors[0], incompatibleNodeVersionMessage);\n  }\n  const errorMessage = mappedErrors.map((err) => err.message).join(\"\\n\");\n  throw mapGqlErrorWithIncompatibleNodeVersion(\n    new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_REQUEST, errorMessage, {}, mappedErrors),\n    incompatibleNodeVersionMessage\n  );\n};\n\n// src/providers/fuel-graphql-subscriber.ts\nvar _FuelGraphqlSubscriber = class {\n  constructor(stream) {\n    this.stream = stream;\n  }\n  static async create(options) {\n    const { url, query, variables, fetchFn } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: (0,graphql__WEBPACK_IMPORTED_MODULE_10__.print)(query),\n        variables\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/event-stream\"\n      }\n    });\n    const [errorReader, resultReader] = response.body.tee().map((stream) => stream.getReader());\n    await new _FuelGraphqlSubscriber(errorReader).next();\n    return new _FuelGraphqlSubscriber(resultReader);\n  }\n  events = [];\n  parsingLeftover = \"\";\n  async next() {\n    while (true) {\n      if (this.events.length > 0) {\n        const { data, errors } = this.events.shift();\n        assertGqlResponseHasNoErrors(errors, _FuelGraphqlSubscriber.incompatibleNodeVersionMessage);\n        return { value: data, done: false };\n      }\n      const { value, done } = await this.stream.read();\n      if (done) {\n        return { value, done };\n      }\n      const decoded = _FuelGraphqlSubscriber.textDecoder.decode(value).replace(\":keep-alive-text\\n\\n\", \"\");\n      if (decoded === \"\") {\n        continue;\n      }\n      const text = `${this.parsingLeftover}${decoded}`;\n      const regex = /data:.*\\n\\n/g;\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n      matches.forEach((match) => {\n        try {\n          this.events.push(JSON.parse(match.replace(/^data:/, \"\")));\n        } catch (e) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      });\n      this.parsingLeftover = text.replace(matches.join(), \"\");\n    }\n  }\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return() {\n    return Promise.resolve({ done: true, value: void 0 });\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n};\nvar FuelGraphqlSubscriber = _FuelGraphqlSubscriber;\n__publicField(FuelGraphqlSubscriber, \"incompatibleNodeVersionMessage\", false);\n__publicField(FuelGraphqlSubscriber, \"textDecoder\", new TextDecoder());\n\n// src/providers/resource-cache.ts\n\n\nvar cache = /* @__PURE__ */ new Map();\nvar ResourceCache = class {\n  ttl;\n  constructor(ttl) {\n    this.ttl = ttl;\n    if (typeof ttl !== \"number\" || this.ttl <= 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n  // Add resources to the cache\n  set(transactionId, resources) {\n    const currentTime = Date.now();\n    const existingResources = cache.get(transactionId) || {\n      utxos: /* @__PURE__ */ new Set(),\n      messages: /* @__PURE__ */ new Set(),\n      timestamp: currentTime\n    };\n    resources.utxos.forEach((utxo) => existingResources.utxos.add((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(utxo)));\n    resources.messages.forEach((message) => existingResources.messages.add((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(message)));\n    cache.set(transactionId, existingResources);\n  }\n  // Remove resources from the cache for a given transaction ID\n  unset(transactionId) {\n    cache.delete(transactionId);\n  }\n  // Get all cached resources and remove expired ones\n  getActiveData() {\n    const allResources = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    cache.forEach((resource, transactionId) => {\n      if (currentTime - resource.timestamp < this.ttl) {\n        allResources.utxos.push(...resource.utxos);\n        allResources.messages.push(...resource.messages);\n      } else {\n        cache.delete(transactionId);\n      }\n    });\n    return allResources;\n  }\n  // Check if a UTXO ID or message nonce is already cached and not expired\n  isCached(key) {\n    const currentTime = Date.now();\n    for (const [transactionId, resourceData] of cache.entries()) {\n      if (currentTime - resourceData.timestamp > this.ttl) {\n        cache.delete(transactionId);\n      } else if (resourceData.utxos.has(key) || resourceData.messages.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  clear() {\n    cache.clear();\n  }\n};\n\n// src/providers/transaction-request/input.ts\n\n\n\n\n\n\nvar inputify = (value) => {\n  const { type } = value;\n  switch (value.type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin: {\n      const predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicate ?? \"0x\");\n      const predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicateData ?? \"0x\");\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin,\n        txID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.id).slice(0, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32)),\n        outputIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.id).slice(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n        owner: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.owner),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId),\n        txPointer: {\n          blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(0, 8)),\n          txIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(8, 16))\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.predicateGasUsed),\n        predicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicate.length),\n        predicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateData.length),\n        predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicate),\n        predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicateData)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract,\n        txID: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        outputIndex: 0,\n        balanceRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        stateRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        txPointer: {\n          blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(0, 8)),\n          txIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toNumber)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.txPointer).slice(8, 16))\n        },\n        contractID: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.contractId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message: {\n      const predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicate ?? \"0x\");\n      const predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.predicateData ?? \"0x\");\n      const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value.data ?? \"0x\");\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message,\n        sender: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.sender),\n        recipient: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.recipient),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        nonce: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.predicateGasUsed),\n        predicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicate.length),\n        predicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateData.length),\n        predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicate),\n        predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(predicateData),\n        data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data),\n        dataLength: data.length\n      };\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n\n// src/providers/transaction-request/output.ts\n\n\n\n\n\nvar outputify = (value) => {\n  const { type } = value;\n  switch (type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        to: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(value.amount),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        stateRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        to: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0),\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.assetId)\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable,\n        to: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0),\n        assetId: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32\n      };\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated: {\n      return {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n        contractId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.contractId),\n        stateRoot: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value.stateRoot)\n      };\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n\n// src/providers/transaction-request/transaction-request.ts\n\n\n\n\n\n\n\n\n\n// src/providers/message.ts\nvar isMessageCoin = (message) => !(\"data\" in message);\n\n// src/providers/resource.ts\nvar isRawCoin = (resource) => \"utxoId\" in resource;\nvar isRawMessage = (resource) => \"recipient\" in resource;\nvar isCoin = (resource) => \"id\" in resource;\nvar isMessage = (resource) => \"recipient\" in resource;\n\n// src/providers/utils/receipts.ts\n\n\n\n\n\n\nvar doesReceiptHaveMissingOutputVariables = (receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert && receipt.val.toString(\"hex\") === _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\nvar doesReceiptHaveMissingContractId = (receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic && receipt.contractId !== \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar getReceiptsWithMissingData = (receipts) => receipts.reduce(\n  (memo, receipt) => {\n    if (doesReceiptHaveMissingOutputVariables(receipt)) {\n      memo.missingOutputVariables.push(receipt);\n    }\n    if (doesReceiptHaveMissingContractId(receipt)) {\n      memo.missingOutputContractIds.push(receipt);\n    }\n    return memo;\n  },\n  {\n    missingOutputVariables: [],\n    missingOutputContractIds: []\n  }\n);\nvar hexOrZero = (hex) => hex || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\nfunction assembleReceiptByType(receipt) {\n  const { receiptType } = receipt;\n  switch (receiptType) {\n    case \"CALL\" /* Call */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.gas),\n        param1: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.param1),\n        param2: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.param2),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return callReceipt;\n    }\n    case \"RETURN\" /* Return */: {\n      const returnReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return returnReceipt;\n    }\n    case \"RETURN_DATA\" /* ReturnData */: {\n      const returnDataReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ptr),\n        len: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return returnDataReceipt;\n    }\n    case \"PANIC\" /* Panic */: {\n      const panicReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.reason),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is),\n        contractId: hexOrZero(receipt.contractId)\n      };\n      return panicReceipt;\n    }\n    case \"REVERT\" /* Revert */: {\n      const revertReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return revertReceipt;\n    }\n    case \"LOG\" /* Log */: {\n      const ra = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra);\n      const rb = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rb);\n      const rc = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rc);\n      const rd = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rd);\n      const logReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return logReceipt;\n    }\n    case \"LOG_DATA\" /* LogData */: {\n      const ra = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ra);\n      const rb = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.rb);\n      const logDataReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.ptr),\n        len: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return logDataReceipt;\n    }\n    case \"TRANSFER\" /* Transfer */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return transferReceipt;\n    }\n    case \"TRANSFER_OUT\" /* TransferOut */: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return transferOutReceipt;\n    }\n    case \"SCRIPT_RESULT\" /* ScriptResult */: {\n      const scriptResultReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ScriptResult,\n        result: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.result),\n        gasUsed: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.gasUsed)\n      };\n      return scriptResultReceipt;\n    }\n    case \"MESSAGE_OUT\" /* MessageOut */: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.amount);\n      const data = receipt.data ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.len).toNumber();\n      const messageId = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data)\n      });\n      const receiptMessageOut = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId\n      };\n      return receiptMessageOut;\n    }\n    case \"MINT\" /* Mint */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = (0,_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.getMintedAssetId)(contractId, subId);\n      const mintReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return mintReceipt;\n    }\n    case \"BURN\" /* Burn */: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = (0,_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.getMintedAssetId)(contractId, subId);\n      const burnReceipt = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.val),\n        pc: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.pc),\n        is: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(receipt.is)\n      };\n      return burnReceipt;\n    }\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n}\n\n// src/providers/utils/block-explorer.ts\n\nvar DEFAULT_BLOCK_EXPLORER_URL = \"https://app.fuel.network\";\nvar getPathFromInput = (key, value) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\nvar buildBlockExplorerUrl = (options = {}) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n  const customInputParams = [\n    {\n      key: \"address\",\n      value: address\n    },\n    {\n      key: \"txId\",\n      value: txId\n    },\n    {\n      key: \"blockNumber\",\n      value: blockNumber\n    }\n  ];\n  const definedValues = customInputParams.filter((param) => !!param.value).map(({ key, value }) => ({\n    key,\n    value\n  }));\n  const hasAnyDefinedValues = definedValues.length > 0;\n  if (definedValues.length > 1) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams.map((param) => param.key).join(\", \")}.`\n    );\n  }\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(\", \");\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n  const pathGeneratedFromInputParams = hasAnyDefinedValues ? getPathFromInput(\n    definedValues[0].key,\n    definedValues[0].value\n  ) : \"\";\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, \"\") : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, \"\");\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, \"\");\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : void 0;\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? \"\" : \"https://\";\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : \"\"}`;\n  return url;\n};\n\n// src/providers/utils/gas.ts\n\n\n\nvar getGasUsedFromReceipts = (receipts) => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.ScriptResult\n  );\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\n  return gasUsed;\n};\nfunction resolveGasDependentCosts(byteSize, gasDependentCost) {\n  const base = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.base);\n  let dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (\"unitsPerGas\" in gasDependentCost) {\n    dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(byteSize).div((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.unitsPerGas));\n  } else {\n    dependentValue = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(byteSize).mul((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasDependentCost.gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\nfunction gasUsedByInputs(inputs, txBytesSize, gasCosts) {\n  const witnessCache = [];\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = \"owner\" in input || \"sender\" in input;\n    if (isCoinOrMessage) {\n      if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n        return true;\n      }\n      if (!witnessCache.includes(input.witnessIndex)) {\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if (\"predicate\" in input && input.predicate && input.predicate !== \"0x\") {\n      return total.add(\n        vmInitializationCost.add(resolveGasDependentCosts((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(input.predicate).length, gasCosts.contractRoot)).add((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed))\n      );\n    }\n    return total.add(gasCosts.ecr1);\n  }, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\n  return totalGas;\n}\nfunction getMinGas(params) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n  return minGas;\n}\nfunction getMaxGas(params) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0),\n    maxGasPerTx\n  } = params;\n  let remainingAllowedWitnessGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\nfunction calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const contractIdInputSize = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\nfunction calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\nfunction calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\nfunction calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n  return txId;\n}\nfunction calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n  return txId;\n}\nfunction calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize\n}) {\n  const additionalStoragePerByte = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(baseMinGas).add(additionalStoragePerByte);\n}\nvar calculateGasFee = (params) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip));\n};\n\n// src/providers/utils/json.ts\n\n\nfunction normalize(object) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case \"Uint8Array\":\n        object[key] = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(object[key]);\n        break;\n      case \"Array\":\n        object[key] = normalize(object[key]);\n        break;\n      case \"BN\":\n        object[key] = object[key].toHex();\n        break;\n      case \"Address\":\n        object[key] = object[key].toB256();\n        break;\n      case \"Object\":\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\nfunction normalizeJSON(root) {\n  return normalize((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(root));\n}\n\n// src/providers/utils/extract-tx-error.ts\n\n\n\n\nvar assemblePanicError = (statusReason, metadata) => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n  if (_fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\n\nYou can read more about this error at:\n\n${_fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason\n  });\n};\nvar stringify = (obj) => JSON.stringify(obj, null, 2);\nvar assembleRevertError = (receipts, logs, metadata) => {\n  let errorMessage = \"The transaction reverted with an unknown reason.\";\n  const revertReceipt = receipts.find(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert);\n  let reason = \"\";\n  if (revertReceipt) {\n    const reasonHex = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n    switch (reasonHex) {\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_REQUIRE_SIGNAL: {\n        reason = \"require\";\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${logs.length ? stringify(lastLog) : \"an error.\"}.`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_EQ_SIGNAL: {\n        const sufix = logs.length >= 2 ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.` : \".\";\n        reason = \"assert_eq\";\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${sufix}`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_NE_SIGNAL: {\n        const sufix = logs.length >= 2 ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.` : \".\";\n        reason = \"assert_ne\";\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${sufix}`;\n        break;\n      }\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_ASSERT_SIGNAL:\n        reason = \"assert\";\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n      case _fuel_ts_transactions_configs__WEBPACK_IMPORTED_MODULE_12__.FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = \"MissingOutputChange\";\n        errorMessage = `The transaction reverted because it's missing an \"OutputChange\".`;\n        break;\n      default:\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: \"unknown\"\n          }\n        );\n    }\n  }\n  return new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason\n  });\n};\nvar extractTxError = (params) => {\n  const { receipts, statusReason, logs } = params;\n  const isPanic = receipts.some(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Revert);\n  const metadata = {\n    logs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: \"\"\n  };\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n\n// src/providers/transaction-request/errors.ts\nvar ChangeOutputCollisionError = class extends Error {\n  name = \"ChangeOutputCollisionError\";\n  message = 'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n};\nvar NoWitnessAtIndexError = class extends Error {\n  constructor(index) {\n    super();\n    this.index = index;\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n  name = \"NoWitnessAtIndexError\";\n};\nvar NoWitnessByOwnerError = class extends Error {\n  constructor(owner) {\n    super();\n    this.owner = owner;\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n  name = \"NoWitnessByOwnerError\";\n};\n\n// src/providers/transaction-request/helpers.ts\n\n\n\nvar isRequestInputCoin = (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin;\nvar isRequestInputMessage = (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message;\nvar isRequestInputMessageWithoutData = (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.data).isZero();\nvar isRequestInputCoinOrMessage = (input) => isRequestInputCoin(input) || isRequestInputMessage(input);\nvar isRequestInputResource = (input) => isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\nvar getRequestInputResourceOwner = (input) => isRequestInputCoin(input) ? input.owner : input.recipient;\nvar isRequestInputResourceFromOwner = (input, owner) => getRequestInputResourceOwner(input) === owner.toB256();\nvar getAssetAmountInRequestInputs = (inputs, assetId, baseAsset) => inputs.filter(isRequestInputResource).reduce((acc, input) => {\n  if (isRequestInputCoin(input) && input.assetId === assetId) {\n    return acc.add(input.amount);\n  }\n  if (isRequestInputMessage(input) && assetId === baseAsset) {\n    return acc.add(input.amount);\n  }\n  return acc;\n}, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0));\nvar cacheRequestInputsResources = (inputs) => inputs.filter(isRequestInputResource).reduce(\n  (cache2, input) => {\n    if (isRequestInputCoin(input)) {\n      cache2.utxos.push(input.id);\n    } else {\n      cache2.messages.push(input.nonce);\n    }\n    return cache2;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n);\nvar cacheRequestInputsResourcesFromOwner = (inputs, owner) => inputs.reduce(\n  (acc, input) => {\n    if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n      acc.utxos.push(input.id);\n    } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n      acc.messages.push(input.nonce);\n    }\n    return acc;\n  },\n  {\n    utxos: [],\n    messages: []\n  }\n);\nvar getBurnableAssetCount = (baseAssetId, transactionRequest) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  if (inputs.some((i) => isRequestInputMessage(i) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\nvar validateTransactionForAssetBurn = (baseAssetId, transactionRequest, enableAssetBurn = false) => {\n  if (enableAssetBurn === true) {\n    return;\n  }\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n  const message = [\n    \"Asset burn detected.\",\n    \"Add the relevant change outputs to the transaction to avoid burning assets.\",\n    \"Or enable asset burn, upon sending the transaction.\"\n  ].join(\"\\n\");\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ASSET_BURN_DETECTED, message);\n};\n\n// src/providers/transaction-request/witness.ts\n\nvar witnessify = (value) => {\n  const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value);\n  return {\n    data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(data),\n    dataLength: data.length\n  };\n};\n\n// src/providers/transaction-request/transaction-request.ts\nvar BaseTransactionRequest = class {\n  /** Gas price for transaction */\n  tip;\n  /** Block until which tx cannot be included */\n  maturity;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit;\n  /** List of inputs */\n  inputs = [];\n  /** List of outputs */\n  outputs = [];\n  /** List of witnesses */\n  witnesses = [];\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses\n  } = {}) {\n    this.tip = tip ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip) : void 0;\n    this.maturity = maturity && maturity > 0 ? maturity : void 0;\n    this.witnessLimit = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(witnessLimit) ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit) : void 0;\n    this.maxFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n  }\n  static getPolicyMeta(req) {\n    let policyTypes = 0;\n    const policies = [];\n    const { tip, witnessLimit, maturity } = req;\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip).gt(0)) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip;\n      policies.push({ data: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tip), type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip });\n    }\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(witnessLimit) && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit).gte(0)) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit;\n      policies.push({ data: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(witnessLimit), type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Maturity;\n      policies.push({ data: maturity, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Maturity });\n    }\n    policyTypes += _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.MaxFee });\n    return {\n      policyTypes,\n      policies\n    };\n  }\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n  getBaseTransaction() {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length\n    };\n  }\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes() {\n    return new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().encode(this.toTransaction());\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  pushInput(input) {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  pushOutput(output) {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness() {\n    this.addWitness((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([_fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32, _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32]));\n    return this.witnesses.length - 1;\n  }\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address, signature) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === \"number\") {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index, witness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(this));\n      })\n    );\n    return this;\n  }\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs() {\n    return this.inputs.filter(\n      (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin\n    );\n  }\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin\n    );\n  }\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change\n    );\n  }\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner) {\n    const ownerAddress = (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(owner);\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin:\n          return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.owner) === ownerAddress.toB256();\n        case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message:\n          return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(input.recipient) === ownerAddress.toB256();\n        default:\n          return false;\n      }\n    });\n    return found?.witnessIndex;\n  }\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n    let witnessIndex;\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      id,\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: \"0x00000000000000000000000000000000\",\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    this.addChangeOutput(owner, assetId);\n  }\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n    let witnessIndex;\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n      if (typeof witnessIndex !== \"number\") {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n    const input = {\n      nonce,\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? \"0x\" : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData\n    };\n    this.pushInput(input);\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n    return this;\n  }\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources) {\n    resources.forEach((resource) => this.addResource(resource));\n    return this;\n  }\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to, amount, assetId) {\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n      to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n      amount,\n      assetId\n    });\n    return this;\n  }\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to, quantities) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin,\n        to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId\n      });\n    });\n    return this;\n  }\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to, assetId) {\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(output.assetId) === assetId\n    );\n    if (!changeOutput) {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change,\n        to: (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(to).toB256(),\n        assetId\n      });\n    }\n  }\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Not implemented\");\n  }\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo) {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte }\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts)\n    });\n  }\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities, baseAssetId, resourcesOwner) {\n    const findAssetInput = (assetId) => this.inputs.find((input) => {\n      if (\"assetId\" in input) {\n        return input.assetId === assetId;\n      }\n      return false;\n    });\n    const updateAssetInput = (assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      let usedQuantity = quantity;\n      if (assetId === baseAssetId) {\n        usedQuantity = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(\"1000000000000000000\");\n      }\n      if (assetInput && \"assetId\" in assetInput) {\n        assetInput.id = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address.fromRandom(),\n            blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n            txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1)\n          }\n        ]);\n      }\n    };\n    updateAssetInput(baseAssetId, (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1e11));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n    return this;\n  }\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities() {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount),\n      assetId: assetId.toString()\n    }));\n    return coinsQuantities;\n  }\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n  removeWitness(index) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n  adjustWitnessIndexes(removedIndex) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n  updatePredicateGasUsed(inputs) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find(\n        (x) => isRequestInputResourceFromOwner(x, new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(String(owner)))\n      );\n      if (correspondingInput && \"predicateGasUsed\" in correspondingInput && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(correspondingInput.predicateGasUsed).gt(0)) {\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n  byteLength() {\n    return this.toTransactionBytes().byteLength;\n  }\n};\n\n// src/providers/transaction-request/blob-transaction-request.ts\n\n\n// src/providers/transaction-request/hash-transaction.ts\n\n\n\n\n\n\nfunction hashTransaction(transactionRequest, chainId) {\n  const transaction = transactionRequest.toTransaction();\n  if (transaction.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script) {\n    transaction.receiptsRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n  }\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(input);\n    switch (inputClone.type) {\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.predicateGasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return inputClone;\n      }\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message: {\n        inputClone.predicateGasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return inputClone;\n      }\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0\n        };\n        inputClone.txID = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        inputClone.stateRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(output);\n    switch (outputClone.type) {\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract: {\n        outputClone.balanceRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        outputClone.stateRoot = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return outputClone;\n      }\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change: {\n        outputClone.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        return outputClone;\n      }\n      case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable: {\n        outputClone.to = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        outputClone.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n        outputClone.assetId = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n  const chainIdBytes = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.uint64ToBytesBE)(chainId);\n  const concatenatedData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([chainIdBytes, new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().encode(transaction)]);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(concatenatedData);\n}\n\n// src/providers/transaction-request/blob-transaction-request.ts\nvar BlobTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob;\n  /** Blob ID */\n  blobId;\n  /** Witness index of the bytecode to create */\n  witnessIndex;\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex\n    };\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length\n    });\n  }\n};\n\n// src/providers/transaction-request/create-transaction-request.ts\n\n\n\n\n\n\n// src/providers/transaction-request/storage-slot.ts\n\nvar getStorageValue = (value) => {\n  const v = new Uint8Array(32);\n  v.set((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(value));\n  return v;\n};\nvar storageSlotify = (storageSlot) => {\n  let key;\n  let value;\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n  return {\n    key: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(key),\n    value: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(getStorageValue(value))\n  };\n};\n\n// src/providers/transaction-request/create-transaction-request.ts\nvar CreateTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex;\n  /** Salt */\n  salt;\n  /** List of storage slots to initialize */\n  storageSlots;\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(salt ?? _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32);\n    this.storageSlots = [...storageSlots ?? []];\n  }\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(storageSlots.length),\n      salt: this.salt ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.salt) : _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      storageSlots\n    };\n  }\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated\n    );\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(contractId, stateRoot) {\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n      contractId,\n      stateRoot\n    });\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.witnesses[this.bytecodeWitnessIndex] || \"0x\").length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\n\n\n\n\n\n\n\n\n// src/providers/transaction-request/scripts.ts\n\nvar returnZeroScript = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\"0x24000000\"),\n  encodeScriptData: () => new Uint8Array(0)\n};\nvar withdrawScript = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\"0x5040C0105D44C0064C40001124000000\"),\n  encodeScriptData: () => new Uint8Array(0)\n};\n\n// src/providers/transaction-request/script-transaction-request.ts\nvar ScriptTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script;\n  /** Gas limit for transaction */\n  gasLimit;\n  /** Script to execute */\n  script;\n  /** Script input data (parameters) */\n  scriptData;\n  abis;\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest } = {}) {\n    super(rest);\n    this.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasLimit);\n    this.script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(script ?? returnZeroScript.bytes);\n    this.scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   */\n  async estimateAndFund(account, { signatureCallback, quantities = [] } = {}) {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n    await account.fund(this, txCost);\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction() {\n    const script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.script ?? \"0x\");\n    const scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.scriptData ?? \"0x\");\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(script.length),\n      scriptDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptData.length),\n      receiptsRoot: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      script: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(script),\n      scriptData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(scriptData)\n    };\n  }\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs() {\n    return this.inputs.filter(\n      (input) => input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract\n    );\n  }\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract\n    );\n  }\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs() {\n    return this.outputs.filter(\n      (output) => output.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable\n    );\n  }\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript(script, data) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables = 1) {\n    let outputsNumber = numberOfVariables;\n    while (outputsNumber) {\n      this.pushOutput({\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable\n      });\n      outputsNumber -= 1;\n    }\n    return this.outputs.length - 1;\n  }\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  calculateMaxGas(chainInfo, minGas) {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx }\n    } = consensusParameters;\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx\n    });\n  }\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract) {\n    const contractAddress = (0,_fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.addressify)(contract);\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n    const inputIndex = super.pushInput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: \"0x00000000000000000000000000000000\"\n    });\n    this.pushOutput({\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n      inputIndex\n    });\n    return this;\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi, args) {\n    const abiInterface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize()\n    });\n  }\n};\n\n// src/providers/transaction-request/upgrade-transaction-request.ts\n\n\n\n\n\nvar UpgradeTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** The type of transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade;\n  /** The upgrade purpose */\n  upgradePurpose;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex;\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  } = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: \"0x\"\n    };\n  }\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)(consensus)\n    };\n    return this;\n  }\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot) {\n    this.upgradePurpose = {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition,\n      data: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytecodeRoot)\n    };\n    return this;\n  }\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type, data) {\n    if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n    if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n    return this;\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    let upgradePurpose;\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum\n        }\n      };\n    } else if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.upgradePurpose.data)\n        }\n      };\n    } else {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n    }\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose\n    };\n  }\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  metadataGas(gasCosts) {\n    const txBytesSize = this.byteSize();\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize\n      });\n    }\n    if (this.upgradePurpose.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize\n      });\n    }\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Invalid upgrade purpose\");\n  }\n};\n\n// src/providers/transaction-request/upload-transaction-request.ts\n\n\n\n\nvar UploadTransactionRequest = class extends BaseTransactionRequest {\n  static from(obj) {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this((0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(obj));\n  }\n  /** Type of the transaction */\n  type = _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex;\n  /** The subsection data. */\n  subsection;\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest } = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0\n    };\n  }\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId) {\n    return hashTransaction(this, chainId);\n  }\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction() {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(root),\n      proofSet: proofSet.map(_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length\n    };\n  }\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  metadataGas(gasCosts) {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber\n    });\n  }\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  calculateMinGas(chainInfo) {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode).length\n    });\n  }\n};\n\n// src/providers/transaction-request/types.ts\nvar AbstractScriptRequest = class {\n};\n\n// src/providers/transaction-request/utils.ts\n\n\nvar transactionRequestify = (obj) => {\n  if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest || obj instanceof BlobTransactionRequest || obj instanceof UpgradeTransactionRequest || obj instanceof UploadTransactionRequest) {\n    return obj;\n  }\n  const { type } = obj;\n  switch (obj.type) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\nvar isTransactionTypeScript = (request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script;\nvar isTransactionTypeCreate = (request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create;\nvar isTransactionTypeBlob = (request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob;\nvar isTransactionTypeUpgrade = (request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade;\nvar isTransactionTypeUpload = (request2) => request2.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload;\n\n// src/providers/transaction-response/transaction-response.ts\n\n\n\n\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\n\n\n\n\n// src/providers/transaction-summary/calculate-tx-fee-for-summary.ts\n\n\n\nvar calculateTXFeeForSummary = (params) => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx }\n  } = params;\n  const gasPerByte = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPerByte);\n  const gasPriceFactor = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPriceFactor);\n  const transactionBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload);\n  const [transaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(transactionBytes, 0);\n  const { type, witnesses, inputs, policies } = transaction;\n  let metadataGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  let gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  if (type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create && type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script) {\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  }\n  if (type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction;\n    const contractBytesSize = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(witnesses[bytecodeWitnessIndex].data).length);\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length\n    });\n  }\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length\n  });\n  const witnessLimit = policies.find((policy) => policy.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.WitnessLimit)?.data;\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx\n  });\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip\n  });\n  return maxFee;\n};\n\n// src/providers/transaction-summary/operations.ts\n\n\n\n\n\n// src/providers/transaction-summary/call.ts\n\nvar getFunctionCall = ({ abi, receipt }) => {\n  const abiInterface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n  const callFunctionSelector = receipt.param1.toHex(8);\n  const functionFragment = abiInterface.getFunction(callFunctionSelector);\n  const inputs = functionFragment.jsonFn.inputs;\n  const encodedArgs = receipt.param2.toHex();\n  let argumentsProvided;\n  const data = functionFragment.decodeArguments(encodedArgs);\n  if (data) {\n    argumentsProvided = inputs.reduce((prev, input, index) => {\n      const value = data[index];\n      const name = input.name;\n      if (name) {\n        return {\n          ...prev,\n          // reparse to remove bn\n          [name]: JSON.parse(JSON.stringify(value))\n        };\n      }\n      return prev;\n    }, {});\n  }\n  const call = {\n    functionSignature: functionFragment.signature,\n    functionName: functionFragment.name,\n    argumentsProvided,\n    ...receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }\n  };\n  return call;\n};\n\n// src/providers/transaction-summary/input.ts\n\n\n\nfunction getInputsByTypes(inputs, types) {\n  return inputs.filter((i) => types.includes(i.type));\n}\nfunction getInputsByType(inputs, type) {\n  return inputs.filter((i) => i.type === type);\n}\nfunction getInputsCoin(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin);\n}\nfunction getInputsMessage(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message);\n}\nfunction getInputsCoinAndMessage(inputs) {\n  return getInputsByTypes(inputs, [_fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message]);\n}\nfunction isInputCoin(input) {\n  return input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin;\n}\nfunction getInputsContract(inputs) {\n  return getInputsByType(inputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract);\n}\nfunction findCoinInput(inputs, assetId) {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\nfunction aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId) {\n  const aggregated = /* @__PURE__ */ new Map();\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = /* @__PURE__ */ new Map();\n      aggregated.set(assetId, ownersMap);\n    }\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new _fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n  return aggregated;\n}\nfunction findMessageInput(inputs) {\n  return getInputsMessage(inputs)?.[0];\n}\nfunction getInputFromAssetId(inputs, assetId, isBaseAsset = false) {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n  return void 0;\n}\nfunction getInputContractFromIndex(inputs, inputIndex) {\n  if (inputIndex == null) {\n    return void 0;\n  }\n  const contractInput = inputs?.[inputIndex];\n  if (!contractInput) {\n    return void 0;\n  }\n  if (contractInput.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Contract) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n  return contractInput;\n}\nfunction getInputAccountAddress(input) {\n  if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin) {\n    return input.owner.toString();\n  }\n  if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message) {\n    return input.recipient.toString();\n  }\n  return \"\";\n}\n\n// src/providers/transaction-summary/output.ts\n\nfunction getOutputsByType(outputs, type) {\n  return outputs.filter((o) => o.type === type);\n}\nfunction getOutputsContractCreated(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated);\n}\nfunction getOutputsCoin(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin);\n}\nfunction getOutputsChange(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change);\n}\nfunction getOutputsContract(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract);\n}\nfunction getOutputsVariable(outputs) {\n  return getOutputsByType(outputs, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable);\n}\n\n// src/providers/transaction-summary/types.ts\nvar TransactionTypeName = /* @__PURE__ */ ((TransactionTypeName2) => {\n  TransactionTypeName2[\"Create\"] = \"Create\";\n  TransactionTypeName2[\"Mint\"] = \"Mint\";\n  TransactionTypeName2[\"Script\"] = \"Script\";\n  TransactionTypeName2[\"Upgrade\"] = \"Upgrade\";\n  TransactionTypeName2[\"Upload\"] = \"Upload\";\n  TransactionTypeName2[\"Blob\"] = \"Blob\";\n  return TransactionTypeName2;\n})(TransactionTypeName || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"submitted\"] = \"submitted\";\n  TransactionStatus2[\"success\"] = \"success\";\n  TransactionStatus2[\"squeezedout\"] = \"squeezedout\";\n  TransactionStatus2[\"failure\"] = \"failure\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar OperationName = /* @__PURE__ */ ((OperationName2) => {\n  OperationName2[\"payBlockProducer\"] = \"Pay network fee to block producer\";\n  OperationName2[\"contractCreated\"] = \"Contract created\";\n  OperationName2[\"transfer\"] = \"Transfer asset\";\n  OperationName2[\"contractCall\"] = \"Contract call\";\n  OperationName2[\"receive\"] = \"Receive asset\";\n  OperationName2[\"withdrawFromFuel\"] = \"Withdraw from Fuel\";\n  return OperationName2;\n})(OperationName || {});\nvar AddressType = /* @__PURE__ */ ((AddressType2) => {\n  AddressType2[AddressType2[\"contract\"] = 0] = \"contract\";\n  AddressType2[AddressType2[\"account\"] = 1] = \"account\";\n  return AddressType2;\n})(AddressType || {});\nvar ChainName = /* @__PURE__ */ ((ChainName2) => {\n  ChainName2[\"ethereum\"] = \"ethereum\";\n  ChainName2[\"fuel\"] = \"fuel\";\n  return ChainName2;\n})(ChainName || {});\n\n// src/providers/transaction-summary/operations.ts\nfunction getReceiptsByType(receipts, type) {\n  return (receipts ?? []).filter((r) => r.type === type);\n}\nfunction getTransactionTypeName(transactionType) {\n  switch (transactionType) {\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Mint:\n      return \"Mint\" /* Mint */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Create:\n      return \"Create\" /* Create */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Script:\n      return \"Script\" /* Script */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Blob:\n      return \"Blob\" /* Blob */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upgrade:\n      return \"Upgrade\" /* Upgrade */;\n    case _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Upload:\n      return \"Upload\" /* Upload */;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\nfunction isType(transactionType, type) {\n  const txType = getTransactionTypeName(transactionType);\n  return txType === type;\n}\nfunction isTypeMint(transactionType) {\n  return isType(transactionType, \"Mint\" /* Mint */);\n}\nfunction isTypeCreate(transactionType) {\n  return isType(transactionType, \"Create\" /* Create */);\n}\nfunction isTypeScript(transactionType) {\n  return isType(transactionType, \"Script\" /* Script */);\n}\nfunction isTypeUpgrade(transactionType) {\n  return isType(transactionType, \"Upgrade\" /* Upgrade */);\n}\nfunction isTypeUpload(transactionType) {\n  return isType(transactionType, \"Upload\" /* Upload */);\n}\nfunction isTypeBlob(transactionType) {\n  return isType(transactionType, \"Blob\" /* Blob */);\n}\nfunction hasSameAssetId(a) {\n  return (b) => a.assetId === b.assetId;\n}\nfunction getReceiptsCall(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Call);\n}\nfunction getReceiptsMessageOut(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.MessageOut);\n}\nfunction mergeAssets(op1, op2) {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n  const assetMap = /* @__PURE__ */ new Map();\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n  return Array.from(assetMap.values());\n}\nfunction isSameOperation(a, b) {\n  return a.name === b.name && a.from?.address === b.from?.address && a.to?.address === b.to?.address && a.from?.type === b.from?.type && a.to?.type === b.to?.type;\n}\nfunction mergeAssetsSent(existing, toAdd) {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\nfunction mergeCalls(existing, toAdd) {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n  return [...existing.calls || [], ...toAdd.calls];\n}\nfunction mergeOperations(existing, toAdd) {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd)\n  };\n}\nfunction addOperation(operations, toAdd) {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n  return operations.map((op, index) => index === existingIndex ? mergeOperations(op, toAdd) : op);\n}\nfunction getReceiptsTransferOut(receipts) {\n  return getReceiptsByType(receipts, _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut);\n}\nfunction getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId\n}) {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: \"Withdraw from Fuel\" /* withdrawFromFuel */,\n          from: {\n            type: 1 /* account */,\n            address: inputAddress\n          },\n          to: {\n            type: 1 /* account */,\n            address: receipt.recipient.toString(),\n            chain: \"ethereum\" /* ethereum */\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId\n            }\n          ]\n        });\n        return newWithdrawFromFuelOps;\n      }\n      return prevWithdrawFromFuelOps;\n    },\n    []\n  );\n  return withdrawFromFuelOperations;\n}\nfunction getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs) {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n  return [\n    getFunctionCall({\n      abi,\n      receipt,\n      rawPayload,\n      maxInputs\n    })\n  ];\n}\nfunction getAssetsSent(receipt) {\n  return receipt.amount?.isZero() ? void 0 : [\n    {\n      amount: receipt.amount,\n      assetId: receipt.assetId\n    }\n  ];\n}\nfunction processCallReceipt(receipt, contractInput, inputs, abiMap, rawPayload, maxInputs, baseAssetId) {\n  const assetId = receipt.assetId === _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n  return [\n    {\n      name: \"Contract call\" /* contractCall */,\n      from: {\n        type: 1 /* account */,\n        address: inputAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: receipt.to\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls\n    }\n  ];\n}\nfunction getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n    return contractCallReceipts.filter((receipt) => receipt.to === contractInput.contractID).flatMap(\n      (receipt) => processCallReceipt(\n        receipt,\n        contractInput,\n        inputs,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      )\n    );\n  });\n}\nfunction extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n  const toType = contractInputs.some((input) => input.contractID === toAddress) ? 0 /* contract */ : 1 /* account */;\n  if (_fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_11__.ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n    fromAddress = change?.to || fromAddress;\n  }\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress) ? 0 /* contract */ : 1 /* account */;\n  return {\n    name: \"Transfer asset\" /* transfer */,\n    from: {\n      type: fromType,\n      address: fromAddress\n    },\n    to: {\n      type: toType,\n      address: toAddress\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount\n      }\n    ]\n  };\n}\nfunction getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId\n}) {\n  let operations = [];\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || /* @__PURE__ */ new Map();\n    let selectedPayer;\n    let fallbackPayer;\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address;\n      }\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break;\n      }\n    }\n    selectedPayer = selectedPayer || fallbackPayer;\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: \"Transfer asset\" /* transfer */,\n        from: {\n          type: 1 /* account */,\n          address: selectedPayer\n        },\n        to: {\n          type: 1 /* account */,\n          address: to\n        },\n        assetsSent: [{ assetId, amount }]\n      });\n    }\n  });\n  const transferReceipts = getReceiptsByType(\n    receipts,\n    _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Transfer\n  );\n  const transferOutReceipts = getReceiptsByType(\n    receipts,\n    _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.TransferOut\n  );\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n    operations = addOperation(operations, operation);\n  });\n  return operations;\n}\nfunction getPayProducerOperations(outputs) {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: \"Pay network fee to block producer\" /* payBlockProducer */,\n      from: {\n        type: 1 /* account */,\n        address: \"Network\"\n      },\n      to: {\n        type: 1 /* account */,\n        address: output.to.toString()\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount\n        }\n      ]\n    });\n    return operations;\n  }, []);\n  return payProducerOperations;\n}\nfunction getContractCreatedOperations({ inputs, outputs }) {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: \"Contract created\" /* contractCreated */,\n      from: {\n        type: 1 /* account */,\n        address: fromAddress\n      },\n      to: {\n        type: 0 /* contract */,\n        address: contractCreatedOutput?.contractId || \"\"\n      }\n    });\n    return operations;\n  }, []);\n  return contractCreatedOperations;\n}\nfunction getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId\n}) {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId })\n    ];\n  }\n  return [...getPayProducerOperations(outputs)];\n}\n\n// src/providers/transaction-summary/receipt.ts\n\nvar processGqlReceipt = (gqlReceipt) => assembleReceiptByType(gqlReceipt);\nvar extractMintedAssetsFromReceipts = (receipts) => {\n  const mintedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return mintedAssets;\n};\nvar extractBurnedAssetsFromReceipts = (receipts) => {\n  const burnedAssets = [];\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val\n      });\n    }\n  });\n  return burnedAssets;\n};\n\n// src/providers/transaction-summary/status.ts\n\n\nvar getTransactionStatusName = (gqlStatus) => {\n  switch (gqlStatus) {\n    case \"FailureStatus\":\n      return \"failure\" /* failure */;\n    case \"SuccessStatus\":\n      return \"success\" /* success */;\n    case \"SubmittedStatus\":\n      return \"submitted\" /* submitted */;\n    case \"SqueezedOutStatus\":\n      return \"squeezedout\" /* squeezedout */;\n    default:\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\nvar processGraphqlStatus = (gqlTransactionStatus) => {\n  let time;\n  let blockId;\n  let status;\n  let totalFee;\n  let totalGas;\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n    switch (gqlTransactionStatus.type) {\n      case \"SuccessStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        break;\n      case \"FailureStatus\":\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalFee);\n        totalGas = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gqlTransactionStatus.totalGas);\n        break;\n      case \"SubmittedStatus\":\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n  const processedGraphqlStatus = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending\n  };\n  return processedGraphqlStatus;\n};\nvar getTotalFeeFromStatus = (status) => status && \"totalFee\" in status ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(status.totalFee) : void 0;\n\n// src/providers/transaction-summary/assemble-transaction-summary.ts\nfunction assembleTransactionSummary(params) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  } = params;\n  const gasUsed = getGasUsedFromReceipts(receipts);\n  const rawPayload = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionBytes);\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId\n  });\n  const typeName = getTransactionTypeName(transaction.type);\n  const tip = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(transaction.policies?.find((policy) => policy.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.PolicyType.Tip)?.data);\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } = processGraphqlStatus(gqlTransactionStatus);\n  const fee = totalFee ?? calculateTXFeeForSummary({\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: {\n      gasCosts,\n      maxGasPerTx,\n      feeParams: {\n        gasPerByte,\n        gasPriceFactor\n      }\n    }\n  });\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n  let date;\n  if (time) {\n    date = _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.DateTime.fromTai64(time);\n  }\n  const transactionSummary = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction\n  };\n  return transactionSummary;\n}\n\n// src/providers/transaction-response/getDecodedLogs.ts\n\n\nfunction getDecodedLogs(receipts, mainAbi, externalAbis = {}) {\n  return receipts.reduce((logs, receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.LogData || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log) {\n      const interfaceToUse = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(externalAbis[receipt.id] || mainAbi);\n      const data = receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.ReceiptType.Log ? new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(receipt.ra) : receipt.data;\n      const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n      logs.push(decodedLog);\n    }\n    return logs;\n  }, []);\n}\n\n// src/providers/transaction-response/transaction-response.ts\nfunction mapGqlOutputsToTxOutputs(outputs) {\n  return outputs.map((o) => {\n    const obj = \"amount\" in o ? { ...o, amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(o.amount) } : o;\n    switch (obj.type) {\n      case \"CoinOutput\":\n        return { ...obj, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Coin };\n      case \"ContractOutput\":\n        return {\n          ...obj,\n          type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Contract,\n          inputIndex: parseInt(obj.inputIndex, 10)\n        };\n      case \"ChangeOutput\":\n        return {\n          ...obj,\n          type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Change\n        };\n      case \"VariableOutput\":\n        return { ...obj, type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.Variable };\n      case \"ContractCreated\":\n        return {\n          ...obj,\n          type: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.OutputType.ContractCreated,\n          contractId: obj.contract\n        };\n      default:\n        return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.assertUnreachable)(obj);\n    }\n  });\n}\nvar TransactionResponse = class {\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(tx, provider, chainId, abis, submitTxSubscription) {\n    this.submitTxSubscription = submitTxSubscription;\n    this.id = typeof tx === \"string\" ? tx : tx.getTransactionId(chainId);\n    this.provider = provider;\n    this.abis = abis;\n    this.request = typeof tx === \"string\" ? void 0 : tx;\n    this.waitForResult = this.waitForResult.bind(this);\n  }\n  /** Transaction ID */\n  id;\n  /** Current provider */\n  provider;\n  /** Gas used on the transaction */\n  gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  /** The graphql Transaction with receipts object. */\n  gqlTransaction;\n  request;\n  status;\n  abis;\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(id, provider, abis) {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n  applyMalleableSubscriptionFields(transaction) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n    const tx = transaction;\n    if (status.type === \"SuccessStatus\" || status.type === \"FailureStatus\") {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if (\"txPointer\" in input) {\n          const correspondingInput = status.transaction.inputs?.[idx];\n          return {\n            ...input,\n            txPointer: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer)\n          };\n        }\n        return input;\n      });\n      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);\n      if (\"receiptsRoot\" in status.transaction) {\n        tx.receiptsRoot = status.transaction.receiptsRoot;\n      }\n    }\n  }\n  async getTransaction() {\n    if (this.request) {\n      const tx = this.request.toTransaction();\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes()\n      };\n    }\n    const gqlTransaction = this.gqlTransaction ?? await this.fetch();\n    return {\n      tx: this.decodeTransaction(gqlTransaction),\n      bytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(gqlTransaction.rawPayload)\n    };\n  }\n  getReceipts() {\n    const status = this.status ?? this.gqlTransaction?.status;\n    switch (status?.type) {\n      case \"SuccessStatus\":\n      case \"FailureStatus\":\n        return status.receipts.map(processGqlReceipt);\n      default:\n        return [];\n    }\n  }\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch() {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id\n    });\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id\n      });\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n      return this.fetch();\n    }\n    this.gqlTransaction = response.transaction;\n    return response.transaction;\n  }\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction(transactionWithReceipts) {\n    return new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(transactionWithReceipts.rawPayload),\n      0\n    )?.[0];\n  }\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary(contractsAbiMap) {\n    const { tx: transaction, bytes: transactionBytes } = await this.getTransaction();\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await this.provider.getGasConfig();\n    const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);\n    const gasPrice = totalFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0) : await this.provider.getLatestGasPrice();\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const transactionSummary = assembleTransactionSummary({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    return transactionSummary;\n  }\n  async waitForStatusChange() {\n    const status = this.gqlTransaction?.status?.type;\n    if (status && status !== \"SubmittedStatus\") {\n      return;\n    }\n    const subscription = this.submitTxSubscription ?? await this.provider.operations.statusChange({\n      transactionId: this.id\n    });\n    for await (const sub2 of subscription) {\n      const statusChange = \"statusChange\" in sub2 ? sub2.statusChange : sub2.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === \"SqueezedOutStatus\") {\n        this.unsetResourceCache();\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type !== \"SubmittedStatus\") {\n        break;\n      }\n    }\n  }\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult(contractsAbiMap) {\n    const transactionSummary = await this.getTransactionSummary(contractsAbiMap);\n    const transactionResult = {\n      ...transactionSummary\n    };\n    let logs = [];\n    if (this.abis) {\n      logs = getDecodedLogs(\n        transactionSummary.receipts,\n        this.abis.main,\n        this.abis.otherContractsAbis\n      );\n      transactionResult.logs = logs;\n    }\n    const { receipts } = transactionResult;\n    const status = this.status ?? this.gqlTransaction?.status;\n    if (status?.type === \"FailureStatus\") {\n      this.unsetResourceCache();\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs\n      });\n    }\n    return transactionResult;\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult(contractsAbiMap) {\n    await this.waitForStatusChange();\n    return this.assembleResult(contractsAbiMap);\n  }\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait(contractsAbiMap) {\n    return this.waitForResult(contractsAbiMap);\n  }\n  unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n};\n\n// src/providers/utils/auto-retry-fetch.ts\n\nfunction getWaitDelay(options, retryAttemptNum) {\n  const duration = options.baseDelay ?? 150;\n  switch (options.backoff) {\n    case \"linear\":\n      return duration * retryAttemptNum;\n    case \"fixed\":\n      return duration;\n    case \"exponential\":\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\nfunction autoRetryFetch(fetchFn, options, retryAttemptNum = 0) {\n  if (options === void 0) {\n    return fetchFn;\n  }\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error) {\n      const error = _error;\n      if (error.cause?.code !== \"ECONNREFUSED\") {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n      const delay = getWaitDelay(options, retryNum);\n      await (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.sleep)(delay);\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n\n// src/providers/utils/validate-pagination-args.ts\n\nvar validatePaginationArgs = (params) => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n  if (after && before) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n  if (first && before) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n  if (last && after) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n  return inputArgs;\n};\n\n// src/providers/provider.ts\nvar MAX_RETRIES = 10;\nvar RESOURCES_PAGE_SIZE_LIMIT = 512;\nvar TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nvar BLOCKS_PAGE_SIZE_LIMIT = 5;\nvar DEFAULT_RESOURCE_CACHE_TTL = 2e4;\nvar GAS_USED_MODIFIER = 1.2;\nvar processGqlChain = (chain) => {\n  const { name, daHeight, consensusParameters } = chain;\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version\n  } = consensusParameters;\n  return {\n    name,\n    baseChainHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(daHeight),\n    consensusParameters: {\n      version,\n      chainId: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPerByte),\n        gasPriceFactor: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(feeParams.gasPriceFactor)\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractParams.contractMaxSize),\n        maxStorageSlots: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractParams.maxStorageSlots)\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxInputs),\n        maxOutputs: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxOutputs),\n        maxWitnesses: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxWitnesses),\n        maxGasPerTx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxGasPerTx),\n        maxSize: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxSize),\n        maxBytecodeSubsections: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(txParams.maxBytecodeSubsections)\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(predicateParams.maxMessageDataLength)\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptParams.maxScriptLength),\n        maxScriptDataLength: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(scriptParams.maxScriptDataLength)\n      },\n      gasCosts\n    }\n  };\n};\nvar _cacheInputs, cacheInputs_fn;\nvar _Provider = class {\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url, options = {}) {\n    /**\n     * @hidden\n     */\n    __privateAdd(this, _cacheInputs);\n    __publicField(this, \"operations\");\n    __publicField(this, \"cache\");\n    /** @hidden */\n    __publicField(this, \"url\");\n    /** @hidden */\n    __publicField(this, \"urlWithoutAuth\");\n    /** @hidden */\n    __publicField(this, \"consensusParametersTimestamp\");\n    __publicField(this, \"options\", {\n      timeout: void 0,\n      resourceCacheTTL: void 0,\n      fetch: void 0,\n      retryOptions: void 0,\n      headers: void 0\n    });\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n    const { FUELS } = _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__.versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n    this.options = {\n      ...this.options,\n      ...options,\n      headers\n    };\n    this.operations = this.createOperations();\n    const { resourceCacheTTL } = this.options;\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = void 0;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n  /** @hidden */\n  static clearChainAndNodeCaches() {\n    _Provider.nodeInfoCache = {};\n    _Provider.chainInfoCache = {};\n  }\n  /**\n   * @hidden\n   */\n  static getFetchFn(options) {\n    const { retryOptions, timeout, headers } = options;\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request2 = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : void 0;\n      let fullRequest = {\n        ...request2,\n        signal,\n        headers: { ...request2?.headers, ...headers }\n      };\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);\n    }, retryOptions);\n  }\n  static extractBasicAuth(url) {\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.INVALID_URL, \"Invalid URL provided.\", { url }, error);\n    }\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: void 0 };\n    }\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` }\n    };\n  }\n  /**\n   * Initialize Provider async stuff\n   */\n  async init() {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain() {\n    await this.init();\n    return _Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode() {\n    await this.init();\n    return _Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts\n    } = (await this.getChain()).consensusParameters;\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts\n    };\n  }\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url, options) {\n    const { url: rawUrl, urlWithoutAuth, headers } = _Provider.extractBasicAuth(url);\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n    this.operations = this.createOperations();\n    await this.init();\n  }\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(ignoreCache = false) {\n    let nodeInfo;\n    let chain;\n    try {\n      nodeInfo = _Provider.nodeInfoCache[this.urlWithoutAuth];\n      chain = _Provider.chainInfoCache[this.urlWithoutAuth];\n      const noCache = !nodeInfo || !chain;\n      if (ignoreCache || noCache) {\n        throw new Error(`Jumps to the catch block and re-fetch`);\n      }\n    } catch (_err) {\n      const data = await this.operations.getChainAndNodeInfo();\n      nodeInfo = {\n        maxDepth: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(data.nodeInfo.maxDepth),\n        maxTx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(data.nodeInfo.maxTx),\n        nodeVersion: data.nodeInfo.nodeVersion,\n        utxoValidation: data.nodeInfo.utxoValidation,\n        vmBacktrace: data.nodeInfo.vmBacktrace\n      };\n      _Provider.setIncompatibleNodeVersionMessage(nodeInfo);\n      chain = processGqlChain(data.chain);\n      _Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      _Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n      this.consensusParametersTimestamp = Date.now();\n    }\n    return {\n      chain,\n      nodeInfo\n    };\n  }\n  /**\n   * @hidden\n   */\n  static setIncompatibleNodeVersionMessage(nodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } = (0,_fuel_ts_versions__WEBPACK_IMPORTED_MODULE_7__.checkFuelCoreVersionCompatibility)(nodeInfo.nodeVersion);\n    if (!isMajorSupported || !isMinorSupported) {\n      _Provider.incompatibleNodeVersionMessage = [\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion}.`,\n        `The TS SDK currently supports fuel-core version ${supportedVersion}.`,\n        `Things may not work as expected.`\n      ].join(\"\\n\");\n      FuelGraphqlSubscriber.incompatibleNodeVersionMessage = _Provider.incompatibleNodeVersionMessage;\n    }\n  }\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  createOperations() {\n    const fetchFn = _Provider.getFetchFn(this.options);\n    const gqlClient = new graphql_request__WEBPACK_IMPORTED_MODULE_8__.GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input, requestInit) => fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response) => {\n        if (\"response\" in response) {\n          const graphQlResponse = response.response;\n          assertGqlResponseHasNoErrors(\n            graphQlResponse.errors,\n            _Provider.incompatibleNodeVersionMessage\n          );\n        }\n      }\n    });\n    const executeQuery = (query, vars) => {\n      const opDefinition = query.definitions.find((x) => x.kind === \"OperationDefinition\");\n      const isSubscription = opDefinition?.operation === \"subscription\";\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url, requestInit, this.options),\n          variables: vars\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n    const customOperations = (requester) => ({\n      getBlobs(variables) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(\", \");\n        const blobParams = variables.blobIds.map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`).join(\"\\n\");\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {}\n        );\n        const document2 = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_9__[\"default\"])`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n        return requester(document2, updatedVariables);\n      }\n    });\n    return { ...getSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion() {\n    const {\n      nodeInfo: { nodeVersion }\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber() {\n    const {\n      chain: {\n        latestBlock: { height }\n      }\n    } = await this.operations.getLatestBlockHeight();\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(height);\n  }\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode() {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n    const processedNodeInfo = {\n      maxDepth: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(nodeInfo.maxDepth),\n      maxTx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(nodeInfo.maxTx),\n      nodeVersion: nodeInfo.nodeVersion,\n      utxoValidation: nodeInfo.utxoValidation,\n      vmBacktrace: nodeInfo.vmBacktrace\n    };\n    _Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n    return processedNodeInfo;\n  }\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain() {\n    const { chain } = await this.operations.getChain();\n    const processedChain = processGqlChain(chain);\n    _Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n    return processedChain;\n  }\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId }\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId }\n    } = all;\n    return baseAssetId;\n  }\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs }\n      }\n    } = await this.getChain();\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tx.inputs.length).gt(maxInputs)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(tx.outputs.length).gt(maxOutputs)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, enableAssetBurn } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n    await this.validateTransaction(transactionRequest);\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    let abis;\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });\n    __privateMethod(this, _cacheInputs, cacheInputs_fn).call(this, transactionRequest.inputs, transactionRequest.getTransactionId(await this.getChainId()));\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(transactionRequestLike, { utxoValidation, estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(processGqlReceipt);\n    return { receipts, dryRunStatus };\n  }\n  /**\n   * Verifies whether enough gas is available to complete transaction.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimated transaction request object.\n   */\n  async estimatePredicates(transactionRequest) {\n    const shouldEstimatePredicates = Boolean(\n      transactionRequest.inputs.find(\n        (input) => \"predicate\" in input && input.predicate && !(0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_15__.equalBytes)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(input.predicate), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\"0x\")) && new _fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.BN(input.predicateGasUsed).isZero()\n      )\n    );\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n    const encodedTransaction = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction\n    });\n    const {\n      estimatePredicates: { inputs }\n    } = response;\n    if (inputs) {\n      inputs.forEach((input, index) => {\n        if (\"predicateGasUsed\" in input && (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(input.predicateGasUsed).gt(0)) {\n          transactionRequest.inputs[index].predicateGasUsed = input.predicateGasUsed;\n        }\n      });\n    }\n    return transactionRequest;\n  }\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @param gasPrice - The gas price to use for the transaction, if not provided it will be fetched.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(transactionRequest, { gasPrice: gasPriceParam } = {}) {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: []\n      };\n    }\n    let receipts = [];\n    const missingContractIds = [];\n    let outputVariables = 0;\n    let dryRunStatus;\n    await this.validateTransaction(transactionRequest);\n    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: rawReceipts, status }]\n      } = await this.operations.dryRun({\n        encodedTransactions: [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: gasPrice.toString()\n      });\n      receipts = rawReceipts.map(processGqlReceipt);\n      dryRunStatus = status;\n      const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(receipts);\n      const hasMissingOutputs = missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId));\n          missingContractIds.push(contractId);\n        });\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice\n        });\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n    return {\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus\n    };\n  }\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(transactionRequests) {\n    const results = transactionRequests.map(() => ({\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: void 0\n    }));\n    const allRequests = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequests);\n    const serializedTransactionsMap = /* @__PURE__ */ new Map();\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(req.toTransactionBytes()));\n      }\n    });\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map(\n        (index) => serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false\n      });\n      const nextRoundTransactions = [];\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(processGqlReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs = missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request2 = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request2)) {\n          result.outputVariables += missingOutputVariables.length;\n          request2.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request2.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request2\n          });\n          request2.maxFee = maxFee;\n          serializedTransactionsMap.set(requestIdx, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(request2.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n    return results;\n  }\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(transactionRequests, { utxoValidation, estimateTxDependencies = true } = {}) {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false\n    });\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(processGqlReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n    return results;\n  }\n  async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n    if (diff < 6e4) {\n      return;\n    }\n    if (!_Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n    const chainInfo = _Provider.chainInfoCache[this.urlWithoutAuth];\n    const {\n      consensusParameters: { version: previous }\n    } = chainInfo;\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current }\n        }\n      }\n    } = await this.operations.getConsensusParametersVersion();\n    if (previous !== current) {\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param params - The parameters for estimating the transaction gas and fee.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params) {\n    const { transactionRequest, gasPrice: gasPriceParam } = params;\n    let gasPrice = gasPriceParam;\n    await this.autoRefetchConfigs();\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n    const minFee = calculateGasFee({\n      gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    let gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    if (isTransactionTypeScript(transactionRequest)) {\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip\n    }).add(1);\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit\n    };\n  }\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transactionRequest.toTransactionBytes())];\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true\n    });\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n      const processedReceipts = receipts.map(processGqlReceipt);\n      return { id, receipts: processedReceipts, status };\n    });\n    return { receipts: callResult[0].receipts };\n  }\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, gasPrice: gasPriceParam } = {}) {\n    const txRequestClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    }\n    const signedRequest = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n    await this.estimatePredicates(signedRequest);\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n    const gasPrice = gasPriceParam ?? await this.estimateGasPrice(10);\n    let { maxFee, maxGas, minFee, minGas, gasLimit } = await this.estimateTxGasAndFee({\n      // Fetches and returns a gas price\n      transactionRequest: signedRequest,\n      gasPrice\n    });\n    let receipts = [];\n    let dryRunStatus;\n    let missingContractIds = [];\n    let outputVariables = 0;\n    let gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n      ({ receipts, missingContractIds, outputVariables, dryRunStatus } = await this.estimateTxDependencies(txRequestClone, { gasPrice }));\n      if (dryRunStatus && \"reason\" in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);\n      }\n      const { maxGasPerTx } = await this.getGasConfig();\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n      ({ maxFee, maxGas, minFee, minGas } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice\n      }));\n    }\n    return {\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee\n    };\n  }\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(owner, assetId, paginationArgs) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner);\n    const {\n      coins: { edges, pageInfo }\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId) }\n    });\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n      owner: ownerAddress,\n      blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.blockCreated),\n      txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.txCreatedIdx)\n    }));\n    return {\n      coins,\n      pageInfo\n    };\n  }\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(owner, quantities, excludedIds) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner);\n    const excludeInput = {\n      messages: excludedIds?.messages?.map((nonce) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(nonce)) || [],\n      utxos: excludedIds?.utxos?.map((id) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(id)) || []\n    };\n    if (this.cache) {\n      const cached = this.cache.getActiveData();\n      excludeInput.messages.push(...cached.messages);\n      excludeInput.utxos.push(...cached.utxos);\n    }\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities.map(coinQuantityfy).map(({ assetId, amount, max: maxPerAsset }) => ({\n        assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId),\n        amount: amount.toString(10),\n        max: maxPerAsset ? maxPerAsset.toString(10) : void 0\n      })),\n      excludedIds: excludeInput\n    };\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n    const coins = result.coinsToSpend.flat().map((coin) => {\n      switch (coin.type) {\n        case \"MessageCoin\":\n          return {\n            amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.amount),\n            assetId: coin.assetId,\n            daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.daHeight),\n            sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(coin.sender),\n            recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(coin.recipient),\n            nonce: coin.nonce\n          };\n        case \"Coin\":\n          return {\n            id: coin.utxoId,\n            amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.amount),\n            assetId: coin.assetId,\n            owner: ownerAddress,\n            blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.blockCreated),\n            txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(coin.txCreatedIdx)\n          };\n        default:\n          return null;\n      }\n    }).filter((v) => !!v);\n    return coins;\n  }\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds) {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs = [];\n    Object.keys(res).forEach((key) => {\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n    return blobs.filter((v) => v);\n  }\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight) {\n    let block;\n    if (idOrHeight === \"latest\") {\n      const {\n        chain: { latestBlock }\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === \"string\" && idOrHeight.length === 66;\n      const variables = isblockId ? { blockId: idOrHeight } : { height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n    if (!block) {\n      return null;\n    }\n    const { header, height, id, transactions } = block;\n    return {\n      id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot\n      },\n      transactionIds: transactions.map((tx) => tx.id)\n    };\n  }\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params) {\n    const {\n      blocks: { edges, pageInfo }\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params\n      })\n    });\n    const blocks = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id)\n    }));\n    return { blocks, pageInfo };\n  }\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(idOrHeight) {\n    let variables;\n    if (typeof idOrHeight === \"number\") {\n      variables = { blockHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(idOrHeight).toString(10) };\n    } else if (idOrHeight === \"latest\") {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else {\n      variables = { blockId: idOrHeight };\n    }\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n    if (!block) {\n      return null;\n    }\n    return {\n      id: block.id,\n      height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(tx.rawPayload), 0)?.[0]\n      )\n    };\n  }\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction(transactionId) {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n    if (!transaction) {\n      return null;\n    }\n    try {\n      return new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(\n        (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(transaction.rawPayload),\n        0\n      )?.[0];\n    } catch (error) {\n      if (error instanceof _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError && error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        console.warn(\"Unsupported transaction type encountered\");\n        return null;\n      }\n      throw error;\n    }\n  }\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs) {\n    const {\n      transactions: { edges, pageInfo }\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n      })\n    });\n    const coder = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder();\n    const transactions = edges.map(({ node: { rawPayload } }) => {\n      try {\n        return coder.decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload), 0)[0];\n      } catch (error) {\n        if (error instanceof _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError && error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n          console.warn(\"Unsupported transaction type encountered\");\n          return null;\n        }\n        throw error;\n      }\n    }).filter((tx) => tx !== null);\n    return { transactions, pageInfo };\n  }\n  /**\n   * Fetches a compressed block at the specified height.\n   *\n   * @param height - The height of the block to fetch.\n   * @returns The compressed block if available, otherwise `null`.\n   */\n  async daCompressedBlock(height) {\n    const { daCompressedBlock } = await this.operations.daCompressedBlock({\n      height\n    });\n    if (!daCompressedBlock) {\n      return null;\n    }\n    return daCompressedBlock;\n  }\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId) {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(contractId, assetId) {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId).toB256(),\n      asset: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(contractBalance.amount, 10);\n  }\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(owner, assetId) {\n    const { balance } = await this.operations.getBalance({\n      owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner).toB256(),\n      assetId: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(assetId)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(balance.amount, 10);\n  }\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(owner) {\n    const {\n      balances: { edges }\n    } = await this.operations.getBalances({\n      /**\n       * The query parameters for this method were designed to support pagination,\n       * but the current Fuel-Core implementation does not support pagination yet.\n       */\n      first: 1e4,\n      filter: { owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(owner).toB256() }\n    });\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount)\n    }));\n    return { balances };\n  }\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(address, paginationArgs) {\n    const {\n      messages: { edges, pageInfo }\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT\n      }),\n      owner: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address).toB256()\n    });\n    const messages = edges.map(({ node }) => ({\n      messageId: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n        data: node.data\n      }),\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(node.sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(node.recipient),\n      nonce: node.nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.amount),\n      data: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.decodeData(node.data),\n      daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(node.daHeight)\n    }));\n    return {\n      messages,\n      pageInfo\n    };\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(transactionId, nonce, commitBlockId, commitBlockHeight) {\n    let inputObject = {\n      transactionId,\n      nonce\n    };\n    if (commitBlockId && commitBlockHeight) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_INPUT_PARAMETERS,\n        \"commitBlockId and commitBlockHeight cannot be used together\"\n      );\n    }\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId\n      };\n    }\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Conver BN into a number string required on the query\n        // This should problably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString()\n      };\n    }\n    const result = await this.operations.getMessageProof(inputObject);\n    if (!result.messageProof) {\n      return null;\n    }\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data\n    } = result.messageProof;\n    return {\n      messageProof: {\n        proofIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageProof.proofIndex),\n        proofSet: messageProof.proofSet\n      },\n      blockProof: {\n        proofIndex: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(blockProof.proofIndex),\n        proofSet: blockProof.proofSet\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion)\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion)\n      },\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(recipient),\n      nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount),\n      data\n    };\n  }\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice() {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(latestGasPrice.gasPrice);\n  }\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon) {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon)\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(estimateGasPrice.gasPrice);\n  }\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(nonce) {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount, startTime) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).toString(10),\n      startTimestamp: startTime ? _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.DateTime.fromUnixMilliseconds(startTime).toTai64() : void 0\n    });\n    return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(latestBlockHeight);\n  }\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id) {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id\n    });\n    if (contract || blob || transaction) {\n      return false;\n    }\n    return true;\n  }\n  async getAddressType(id) {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id\n    });\n    if (contract) {\n      return \"Contract\";\n    }\n    if (blob) {\n      return \"Blob\";\n    }\n    if (transaction) {\n      return \"Transaction\";\n    }\n    return \"Account\";\n  }\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async getTransactionResponse(transactionId) {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce) {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n    if (!rawMessage) {\n      return null;\n    }\n    const message = {\n      messageId: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.amount),\n        data: rawMessage.data\n      }),\n      sender: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(rawMessage.sender),\n      recipient: new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(rawMessage.recipient),\n      nonce,\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.amount),\n      data: _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(rawMessage.daHeight)\n    };\n    return message;\n  }\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(relayedTransactionId) {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId\n    });\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n    return relayedTransactionStatus;\n  }\n  /**\n   * @hidden\n   */\n  extractDryRunError(transactionRequest, receipts, dryRunStatus) {\n    const status = dryRunStatus;\n    let logs = [];\n    if (transactionRequest.abis) {\n      logs = getDecodedLogs(\n        receipts,\n        transactionRequest.abis.main,\n        transactionRequest.abis.otherContractsAbis\n      );\n    }\n    return extractTxError({\n      logs,\n      receipts,\n      statusReason: status.reason\n    });\n  }\n};\nvar Provider = _Provider;\n_cacheInputs = new WeakSet();\ncacheInputs_fn = function(inputs, transactionId) {\n  if (!this.cache) {\n    return;\n  }\n  const inputsToCache = inputs.reduce(\n    (acc, input) => {\n      if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin) {\n        acc.utxos.push(input.id);\n      } else if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Message) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    { utxos: [], messages: [] }\n  );\n  this.cache.set(transactionId, inputsToCache);\n};\n/** @hidden */\n__publicField(Provider, \"chainInfoCache\", {});\n/** @hidden */\n__publicField(Provider, \"nodeInfoCache\", {});\n/** @hidden */\n__publicField(Provider, \"incompatibleNodeVersionMessage\", \"\");\n\n// src/providers/transaction-summary/get-transaction-summary.ts\n\n\n\n\nasync function getTransactionSummary(params) {\n  const { id, provider, abiMap } = params;\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id\n  });\n  if (!gqlTransaction) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n  const [decodedTransaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(gqlTransaction.rawPayload),\n    0\n  );\n  let txReceipts = [];\n  if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n  const receipts = txReceipts.map(processGqlReceipt);\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0) : await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionInfo = assembleTransactionSummary({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPerByte),\n    gasPriceFactor: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return {\n    ...transactionInfo\n  };\n}\nasync function getTransactionSummaryFromRequest(params) {\n  const { provider, transactionRequest, abiMap } = params;\n  const { receipts } = await provider.dryRun(transactionRequest);\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactionSummary = assembleTransactionSummary({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId\n  });\n  return transactionSummary;\n}\nasync function getTransactionsSummaries(params) {\n  const { filters, provider, abiMap } = params;\n  const { owner, ...inputArgs } = filters;\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT\n  });\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner\n  });\n  const { edges, pageInfo } = transactionsByOwner;\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts\n    }\n  } = await provider.getChain();\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n    const { id, rawPayload, status } = gqlTransaction;\n    const [decodedTransaction] = new _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.TransactionCoder().decode((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload), 0);\n    let txReceipts = [];\n    if (gqlTransaction?.status && \"receipts\" in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n    const receipts = txReceipts.map(processGqlReceipt);\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId\n    });\n    const output = {\n      ...transactionSummary\n    };\n    return output;\n  });\n  return {\n    transactions,\n    pageInfo\n  };\n}\n\n// src/providers/utils/merge-quantities.ts\nvar mergeQuantities = (...coinQuantities) => {\n  const resultMap = {};\n  function addToMap({ amount, assetId }) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n\n// src/types.ts\nvar AbstractAccount = class {\n};\n\n// src/utils/formatTransferToContractScriptData.ts\n\n\n\n\nvar formatTransferToContractScriptData = (transferParams) => {\n  const numberCoder = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\");\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(contractId).toBytes(), encoded, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(assetId)]);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([acc, scriptData]);\n  }, new Uint8Array());\n};\nvar assembleTransferToContractScript = async (transferParams) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n  await _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.initWasm();\n  let script = new Uint8Array();\n  transferParams.forEach((_, i) => {\n    const offset = (_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ASSET_ID_LEN) * i;\n    script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\n      script,\n      // Load ScriptData into register 0x10.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.gtf(16, 0, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(17, 16, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(18, 17, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.lw(19, 18, 0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(20, 18, _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.tr(17, 19, 20).to_bytes()\n    ]);\n  });\n  script = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([script, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.ret(1).to_bytes()]);\n  return { script, scriptData };\n};\n\n// src/account.ts\nvar MAX_FUNDING_ATTEMPTS = 5;\nvar Account = class extends AbstractAccount {\n  /**\n   * The address associated with the account.\n   */\n  address;\n  /**\n   * The provider used to interact with the network.\n   */\n  _provider;\n  /**\n   * The connector for use with external wallets\n   */\n  _connector;\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address, provider, connector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n  }\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider() {\n    if (!this._provider) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_PROVIDER, \"Provider not set\");\n    }\n    return this._provider;\n  }\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider) {\n    this._provider = provider;\n  }\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider) {\n    this._provider = provider;\n    return this.provider;\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param excludedIds - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, excludedIds) {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(assetId, paginationArgs) {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs) {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId) {\n    const assetIdToFetch = assetId ?? await this.provider.getBaseAssetId();\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances() {\n    return this.provider.getBalances(this.address);\n  }\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   */\n  async fund(request2, params) {\n    const { addedSignatures, estimatedPredicates, requiredQuantities, updateMaxFee, gasPrice } = params;\n    const fee = request2.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset = requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities\n    });\n    const quantitiesDict = {};\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0)\n      };\n    });\n    request2.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin2 = isRequestInputCoin(input);\n      const assetId = isCoin2 ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n    let missingQuantities = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned)\n        });\n      }\n    });\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request2.inputs, this.address)\n      );\n      request2.addResources(resources);\n      request2.updatePredicateGasUsed(estimatedPredicates);\n      const requestToReestimate2 = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(request2);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(\n          () => requestToReestimate2.addEmptyWitness()\n        );\n      }\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate2,\n        gasPrice\n      });\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request2.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId\n          }\n        ];\n      }\n      fundingAttempts += 1;\n    }\n    if (needsToBeFunded) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n    await this.provider.validateTransaction(request2);\n    request2.updatePredicateGasUsed(estimatedPredicates);\n    const requestToReestimate = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(request2);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n    if (!updateMaxFee) {\n      return request2;\n    }\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice\n    });\n    request2.maxFee = maxFee;\n    return request2;\n  }\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(destination, amount, assetId, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addTransfer(request2, {\n      destination,\n      amount,\n      assetId: assetId || await this.provider.getBaseAssetId()\n    });\n    request2 = await this.estimateAndFundTransaction(request2, txParams);\n    return request2;\n  }\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(destination, amount, assetId, txParams = {}) {\n    const request2 = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(transferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest(txParams);\n    request2 = this.addBatchTransfer(request2, transferParams);\n    request2 = await this.estimateAndFundTransaction(request2, txParams);\n    return this.sendTransaction(request2, { estimateTxDependencies: false });\n  }\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request2, transferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request2.addCoinOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(destination), amount, assetId);\n    return request2;\n  }\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request2, transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request2, {\n        destination,\n        amount,\n        assetId\n      });\n    });\n    return request2;\n  }\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(contractId, amount, assetId, txParams = {}) {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n  async batchTransferToContracts(contractTransferParams, txParams = {}) {\n    let request2 = new ScriptTransactionRequest({\n      ...txParams\n    });\n    const quantities = [];\n    const defaultAssetId = await this.provider.getBaseAssetId();\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(transferParam.amount);\n      const contractAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(transferParam.contractId);\n      const assetId = transferParam.assetId ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(transferParam.assetId) : defaultAssetId;\n      if (amount.lte(0)) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSFER_AMOUNT,\n          \"Transfer amount must be a positive number.\"\n        );\n      }\n      request2.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId\n      };\n    });\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n    request2.script = script;\n    request2.scriptData = scriptData;\n    request2 = await this.estimateAndFundTransaction(request2, txParams, { quantities });\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(recipient, amount, txParams = {}) {\n    const recipientAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(recipient);\n    const recipientDataArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\n      \"0x\".concat(recipientAddress.toHexString().substring(2).padStart(64, \"0\"))\n    );\n    const amountDataArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(\n      \"0x\".concat((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).toHex().substring(2).padStart(16, \"0\"))\n    );\n    const script = new Uint8Array([\n      ...(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray\n    ]);\n    const params = { script, ...txParams };\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request2 = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount), assetId: baseAssetId }];\n    const txCost = await this.getTransactionCost(request2, { quantities });\n    request2 = this.validateGasLimitAndMaxFee({\n      transactionRequest: request2,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams\n    });\n    await this.fund(request2, txCost);\n    return this.sendTransaction(request2);\n  }\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(transactionRequestLike, { signatureCallback, quantities = [], gasPrice } = {}) {\n    const txRequestClone = (0,ramda__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(\"100000000000000000\") }];\n    const findAssetInput = (assetId) => txRequestClone.inputs.find((input) => {\n      if (input.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_5__.InputType.Coin) {\n        return input.assetId === assetId;\n      }\n      if (isRequestInputMessageWithoutData(input)) {\n        return baseAssetId === assetId;\n      }\n      return false;\n    });\n    const updateAssetInput = (assetId, quantity) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n      if (assetInput && \"amount\" in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId\n            }\n          ])\n        );\n      }\n    };\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(\n      ({ amount, assetId }) => updateAssetInput(assetId, amount)\n    );\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n      gasPrice\n    });\n    return {\n      ...txCost,\n      requiredQuantities\n    };\n  }\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message) {\n    if (!this._connector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR, \"A connector is required to sign messages.\");\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike) {\n    if (!this._connector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR,\n        \"A connector is required to sign transactions.\"\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, onBeforeSend, skipCustomFee = false } = {}) {\n    if (this._connector) {\n      return this.provider.getTransactionResponse(\n        await this._connector.sendTransaction(this.address.toString(), transactionRequestLike, {\n          onBeforeSend,\n          skipCustomFee\n        })\n      );\n    }\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return coins.map((coin) => ({\n      id: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n      txCreatedIdx: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(1),\n      ...coin\n    }));\n  }\n  /** @hidden * */\n  validateTransferAmount(amount) {\n    if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(amount).lte(0)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_TRANSFER_AMOUNT,\n        \"Transfer amount must be a positive number.\"\n      );\n    }\n  }\n  /** @hidden * */\n  async estimateAndFundTransaction(transactionRequest, txParams, costParams) {\n    let request2 = transactionRequest;\n    const txCost = await this.getTransactionCost(request2, costParams);\n    request2 = this.validateGasLimitAndMaxFee({\n      transactionRequest: request2,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams\n    });\n    request2 = await this.fund(request2, txCost);\n    return request2;\n  }\n  /** @hidden * */\n  validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee }\n  }) {\n    const request2 = transactionRequestify(transactionRequest);\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setGasLimit)) {\n      request2.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.isDefined)(setMaxFee)) {\n      request2.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n    return request2;\n  }\n};\n\n// src/wallet/base-wallet-unlocked.ts\n\n\n\n// src/signer/signer.ts\n\n\n\n\n\n\nvar Signer = class {\n  address;\n  publicKey;\n  compressedPublicKey;\n  privateKey;\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey) {\n    if (typeof privateKey === \"string\") {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    const privateKeyBytes = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(privateKey, 32);\n    this.privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(privateKeyBytes);\n    this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(this.publicKey);\n  }\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data) {\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.sign((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(data), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.privateKey));\n    const r = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(`0x${signature.r.toString(16)}`, 32);\n    const s = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(`0x${signature.s.toString(16)}`, 32);\n    s[0] |= (signature.recovery || 0) << 7;\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([r, s]));\n  }\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point) {\n    const p0 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.compressedPublicKey));\n    const p1 = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data, signature) {\n    const signedMessageBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 128) >> 7;\n    s[0] &= 127;\n    const sig = new _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.Signature(BigInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(r)), BigInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(s))).addRecoveryBit(\n      recoveryParam\n    );\n    const publicKey = sig.recoverPublicKey((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(data)).toRawBytes(false).slice(1);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(publicKey);\n  }\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data, signature) {\n    return new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(Signer.recoverPublicKey(data, signature));\n  }\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy) {\n    return entropy ? (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([(0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(entropy)])) : (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32);\n  }\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_17__.secp256k1.ProjectivePoint.fromHex((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(publicKey));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(point.toRawBytes(false).slice(1));\n  }\n};\n\n// src/wallet/keystore-wallet.ts\n\n\n\n\nvar DEFAULT_KDF_PARAMS_LOG_N = 13;\nvar DEFAULT_KDF_PARAMS_R = 8;\nvar DEFAULT_KDF_PARAMS_P = 1;\nvar DEFAULT_KEY_SIZE = 32;\nvar DEFAULT_IV_SIZE = 16;\nvar removeHexPrefix = (hexString) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n  return hexString;\n};\nasync function encryptKeystoreWallet(privateKey, address, password) {\n  const privateKeyBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(removeHexPrefix(privateKey), \"hex\");\n  const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n  const salt = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(DEFAULT_KEY_SIZE);\n  const key = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.scrypt)({\n    password: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P\n  });\n  const iv = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(DEFAULT_IV_SIZE);\n  const ciphertext = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.encryptJsonWalletData)(privateKeyBuffer, key, iv);\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n  const macHashUint8Array = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.keccak256)(data);\n  const mac = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(macHashUint8Array, \"hex\");\n  const keystore = {\n    id: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: \"aes-128-ctr\",\n      mac,\n      cipherparams: { iv: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(iv, \"hex\") },\n      ciphertext: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(ciphertext, \"hex\"),\n      kdf: \"scrypt\",\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(salt, \"hex\")\n      }\n    }\n  };\n  return JSON.stringify(keystore);\n}\nasync function decryptKeystoreWallet(jsonWallet, password) {\n  const keystoreWallet = JSON.parse(jsonWallet);\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt }\n    }\n  } = keystoreWallet;\n  const ciphertextBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(ciphertext, \"hex\");\n  const ivBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(iv, \"hex\");\n  const saltBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(salt, \"hex\");\n  const passwordBuffer = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.bufferFromString)(password);\n  const key = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.scrypt)({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen\n  });\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n  const macHashUint8Array = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.keccak256)(data);\n  const macHash = (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.stringFromBuffer)(macHashUint8Array, \"hex\");\n  if (mac !== macHash) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PASSWORD,\n      \"Failed to decrypt the keystore wallet, the provided password is incorrect.\"\n    );\n  }\n  const buffer = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.decryptJsonWalletData)(ciphertextBuffer, key, ivBuffer);\n  const privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(buffer);\n  return privateKey;\n}\n\n// src/wallet/base-wallet-unlocked.ts\nvar BaseWalletUnlocked = class extends Account {\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer;\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey, provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey() {\n    return this.signer().privateKey;\n  }\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey() {\n    return this.signer().publicKey;\n  }\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signMessage(message) {\n    const signedMessage = await this.signer().sign((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hashMessage)(message));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signedMessage);\n  }\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signature);\n  }\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n    return transactionRequest;\n  }\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  async sendTransaction(transactionRequestLike, { estimateTxDependencies = false, enableAssetBurn } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false\n      }\n    );\n  }\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password) {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n};\n/**\n * Default HDWallet path.\n */\n__publicField(BaseWalletUnlocked, \"defaultPath\", \"m/44'/1179993420'/0'/0/0\");\n\n// src/hdwallet/hdwallet.ts\n\n\n\n\n\n\n// src/mnemonic/mnemonic.ts\n\n\n\n\n\n// src/wordlists/words/english.ts\nvar english = [\n  \"abandon\",\n  \"ability\",\n  \"able\",\n  \"about\",\n  \"above\",\n  \"absent\",\n  \"absorb\",\n  \"abstract\",\n  \"absurd\",\n  \"abuse\",\n  \"access\",\n  \"accident\",\n  \"account\",\n  \"accuse\",\n  \"achieve\",\n  \"acid\",\n  \"acoustic\",\n  \"acquire\",\n  \"across\",\n  \"act\",\n  \"action\",\n  \"actor\",\n  \"actress\",\n  \"actual\",\n  \"adapt\",\n  \"add\",\n  \"addict\",\n  \"address\",\n  \"adjust\",\n  \"admit\",\n  \"adult\",\n  \"advance\",\n  \"advice\",\n  \"aerobic\",\n  \"affair\",\n  \"afford\",\n  \"afraid\",\n  \"again\",\n  \"age\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"aim\",\n  \"air\",\n  \"airport\",\n  \"aisle\",\n  \"alarm\",\n  \"album\",\n  \"alcohol\",\n  \"alert\",\n  \"alien\",\n  \"all\",\n  \"alley\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"alpha\",\n  \"already\",\n  \"also\",\n  \"alter\",\n  \"always\",\n  \"amateur\",\n  \"amazing\",\n  \"among\",\n  \"amount\",\n  \"amused\",\n  \"analyst\",\n  \"anchor\",\n  \"ancient\",\n  \"anger\",\n  \"angle\",\n  \"angry\",\n  \"animal\",\n  \"ankle\",\n  \"announce\",\n  \"annual\",\n  \"another\",\n  \"answer\",\n  \"antenna\",\n  \"antique\",\n  \"anxiety\",\n  \"any\",\n  \"apart\",\n  \"apology\",\n  \"appear\",\n  \"apple\",\n  \"approve\",\n  \"april\",\n  \"arch\",\n  \"arctic\",\n  \"area\",\n  \"arena\",\n  \"argue\",\n  \"arm\",\n  \"armed\",\n  \"armor\",\n  \"army\",\n  \"around\",\n  \"arrange\",\n  \"arrest\",\n  \"arrive\",\n  \"arrow\",\n  \"art\",\n  \"artefact\",\n  \"artist\",\n  \"artwork\",\n  \"ask\",\n  \"aspect\",\n  \"assault\",\n  \"asset\",\n  \"assist\",\n  \"assume\",\n  \"asthma\",\n  \"athlete\",\n  \"atom\",\n  \"attack\",\n  \"attend\",\n  \"attitude\",\n  \"attract\",\n  \"auction\",\n  \"audit\",\n  \"august\",\n  \"aunt\",\n  \"author\",\n  \"auto\",\n  \"autumn\",\n  \"average\",\n  \"avocado\",\n  \"avoid\",\n  \"awake\",\n  \"aware\",\n  \"away\",\n  \"awesome\",\n  \"awful\",\n  \"awkward\",\n  \"axis\",\n  \"baby\",\n  \"bachelor\",\n  \"bacon\",\n  \"badge\",\n  \"bag\",\n  \"balance\",\n  \"balcony\",\n  \"ball\",\n  \"bamboo\",\n  \"banana\",\n  \"banner\",\n  \"bar\",\n  \"barely\",\n  \"bargain\",\n  \"barrel\",\n  \"base\",\n  \"basic\",\n  \"basket\",\n  \"battle\",\n  \"beach\",\n  \"bean\",\n  \"beauty\",\n  \"because\",\n  \"become\",\n  \"beef\",\n  \"before\",\n  \"begin\",\n  \"behave\",\n  \"behind\",\n  \"believe\",\n  \"below\",\n  \"belt\",\n  \"bench\",\n  \"benefit\",\n  \"best\",\n  \"betray\",\n  \"better\",\n  \"between\",\n  \"beyond\",\n  \"bicycle\",\n  \"bid\",\n  \"bike\",\n  \"bind\",\n  \"biology\",\n  \"bird\",\n  \"birth\",\n  \"bitter\",\n  \"black\",\n  \"blade\",\n  \"blame\",\n  \"blanket\",\n  \"blast\",\n  \"bleak\",\n  \"bless\",\n  \"blind\",\n  \"blood\",\n  \"blossom\",\n  \"blouse\",\n  \"blue\",\n  \"blur\",\n  \"blush\",\n  \"board\",\n  \"boat\",\n  \"body\",\n  \"boil\",\n  \"bomb\",\n  \"bone\",\n  \"bonus\",\n  \"book\",\n  \"boost\",\n  \"border\",\n  \"boring\",\n  \"borrow\",\n  \"boss\",\n  \"bottom\",\n  \"bounce\",\n  \"box\",\n  \"boy\",\n  \"bracket\",\n  \"brain\",\n  \"brand\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"breeze\",\n  \"brick\",\n  \"bridge\",\n  \"brief\",\n  \"bright\",\n  \"bring\",\n  \"brisk\",\n  \"broccoli\",\n  \"broken\",\n  \"bronze\",\n  \"broom\",\n  \"brother\",\n  \"brown\",\n  \"brush\",\n  \"bubble\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"build\",\n  \"bulb\",\n  \"bulk\",\n  \"bullet\",\n  \"bundle\",\n  \"bunker\",\n  \"burden\",\n  \"burger\",\n  \"burst\",\n  \"bus\",\n  \"business\",\n  \"busy\",\n  \"butter\",\n  \"buyer\",\n  \"buzz\",\n  \"cabbage\",\n  \"cabin\",\n  \"cable\",\n  \"cactus\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"calm\",\n  \"camera\",\n  \"camp\",\n  \"can\",\n  \"canal\",\n  \"cancel\",\n  \"candy\",\n  \"cannon\",\n  \"canoe\",\n  \"canvas\",\n  \"canyon\",\n  \"capable\",\n  \"capital\",\n  \"captain\",\n  \"car\",\n  \"carbon\",\n  \"card\",\n  \"cargo\",\n  \"carpet\",\n  \"carry\",\n  \"cart\",\n  \"case\",\n  \"cash\",\n  \"casino\",\n  \"castle\",\n  \"casual\",\n  \"cat\",\n  \"catalog\",\n  \"catch\",\n  \"category\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"caution\",\n  \"cave\",\n  \"ceiling\",\n  \"celery\",\n  \"cement\",\n  \"census\",\n  \"century\",\n  \"cereal\",\n  \"certain\",\n  \"chair\",\n  \"chalk\",\n  \"champion\",\n  \"change\",\n  \"chaos\",\n  \"chapter\",\n  \"charge\",\n  \"chase\",\n  \"chat\",\n  \"cheap\",\n  \"check\",\n  \"cheese\",\n  \"chef\",\n  \"cherry\",\n  \"chest\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"chimney\",\n  \"choice\",\n  \"choose\",\n  \"chronic\",\n  \"chuckle\",\n  \"chunk\",\n  \"churn\",\n  \"cigar\",\n  \"cinnamon\",\n  \"circle\",\n  \"citizen\",\n  \"city\",\n  \"civil\",\n  \"claim\",\n  \"clap\",\n  \"clarify\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clerk\",\n  \"clever\",\n  \"click\",\n  \"client\",\n  \"cliff\",\n  \"climb\",\n  \"clinic\",\n  \"clip\",\n  \"clock\",\n  \"clog\",\n  \"close\",\n  \"cloth\",\n  \"cloud\",\n  \"clown\",\n  \"club\",\n  \"clump\",\n  \"cluster\",\n  \"clutch\",\n  \"coach\",\n  \"coast\",\n  \"coconut\",\n  \"code\",\n  \"coffee\",\n  \"coil\",\n  \"coin\",\n  \"collect\",\n  \"color\",\n  \"column\",\n  \"combine\",\n  \"come\",\n  \"comfort\",\n  \"comic\",\n  \"common\",\n  \"company\",\n  \"concert\",\n  \"conduct\",\n  \"confirm\",\n  \"congress\",\n  \"connect\",\n  \"consider\",\n  \"control\",\n  \"convince\",\n  \"cook\",\n  \"cool\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"core\",\n  \"corn\",\n  \"correct\",\n  \"cost\",\n  \"cotton\",\n  \"couch\",\n  \"country\",\n  \"couple\",\n  \"course\",\n  \"cousin\",\n  \"cover\",\n  \"coyote\",\n  \"crack\",\n  \"cradle\",\n  \"craft\",\n  \"cram\",\n  \"crane\",\n  \"crash\",\n  \"crater\",\n  \"crawl\",\n  \"crazy\",\n  \"cream\",\n  \"credit\",\n  \"creek\",\n  \"crew\",\n  \"cricket\",\n  \"crime\",\n  \"crisp\",\n  \"critic\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crowd\",\n  \"crucial\",\n  \"cruel\",\n  \"cruise\",\n  \"crumble\",\n  \"crunch\",\n  \"crush\",\n  \"cry\",\n  \"crystal\",\n  \"cube\",\n  \"culture\",\n  \"cup\",\n  \"cupboard\",\n  \"curious\",\n  \"current\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custom\",\n  \"cute\",\n  \"cycle\",\n  \"dad\",\n  \"damage\",\n  \"damp\",\n  \"dance\",\n  \"danger\",\n  \"daring\",\n  \"dash\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"deal\",\n  \"debate\",\n  \"debris\",\n  \"decade\",\n  \"december\",\n  \"decide\",\n  \"decline\",\n  \"decorate\",\n  \"decrease\",\n  \"deer\",\n  \"defense\",\n  \"define\",\n  \"defy\",\n  \"degree\",\n  \"delay\",\n  \"deliver\",\n  \"demand\",\n  \"demise\",\n  \"denial\",\n  \"dentist\",\n  \"deny\",\n  \"depart\",\n  \"depend\",\n  \"deposit\",\n  \"depth\",\n  \"deputy\",\n  \"derive\",\n  \"describe\",\n  \"desert\",\n  \"design\",\n  \"desk\",\n  \"despair\",\n  \"destroy\",\n  \"detail\",\n  \"detect\",\n  \"develop\",\n  \"device\",\n  \"devote\",\n  \"diagram\",\n  \"dial\",\n  \"diamond\",\n  \"diary\",\n  \"dice\",\n  \"diesel\",\n  \"diet\",\n  \"differ\",\n  \"digital\",\n  \"dignity\",\n  \"dilemma\",\n  \"dinner\",\n  \"dinosaur\",\n  \"direct\",\n  \"dirt\",\n  \"disagree\",\n  \"discover\",\n  \"disease\",\n  \"dish\",\n  \"dismiss\",\n  \"disorder\",\n  \"display\",\n  \"distance\",\n  \"divert\",\n  \"divide\",\n  \"divorce\",\n  \"dizzy\",\n  \"doctor\",\n  \"document\",\n  \"dog\",\n  \"doll\",\n  \"dolphin\",\n  \"domain\",\n  \"donate\",\n  \"donkey\",\n  \"donor\",\n  \"door\",\n  \"dose\",\n  \"double\",\n  \"dove\",\n  \"draft\",\n  \"dragon\",\n  \"drama\",\n  \"drastic\",\n  \"draw\",\n  \"dream\",\n  \"dress\",\n  \"drift\",\n  \"drill\",\n  \"drink\",\n  \"drip\",\n  \"drive\",\n  \"drop\",\n  \"drum\",\n  \"dry\",\n  \"duck\",\n  \"dumb\",\n  \"dune\",\n  \"during\",\n  \"dust\",\n  \"dutch\",\n  \"duty\",\n  \"dwarf\",\n  \"dynamic\",\n  \"eager\",\n  \"eagle\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easily\",\n  \"east\",\n  \"easy\",\n  \"echo\",\n  \"ecology\",\n  \"economy\",\n  \"edge\",\n  \"edit\",\n  \"educate\",\n  \"effort\",\n  \"egg\",\n  \"eight\",\n  \"either\",\n  \"elbow\",\n  \"elder\",\n  \"electric\",\n  \"elegant\",\n  \"element\",\n  \"elephant\",\n  \"elevator\",\n  \"elite\",\n  \"else\",\n  \"embark\",\n  \"embody\",\n  \"embrace\",\n  \"emerge\",\n  \"emotion\",\n  \"employ\",\n  \"empower\",\n  \"empty\",\n  \"enable\",\n  \"enact\",\n  \"end\",\n  \"endless\",\n  \"endorse\",\n  \"enemy\",\n  \"energy\",\n  \"enforce\",\n  \"engage\",\n  \"engine\",\n  \"enhance\",\n  \"enjoy\",\n  \"enlist\",\n  \"enough\",\n  \"enrich\",\n  \"enroll\",\n  \"ensure\",\n  \"enter\",\n  \"entire\",\n  \"entry\",\n  \"envelope\",\n  \"episode\",\n  \"equal\",\n  \"equip\",\n  \"era\",\n  \"erase\",\n  \"erode\",\n  \"erosion\",\n  \"error\",\n  \"erupt\",\n  \"escape\",\n  \"essay\",\n  \"essence\",\n  \"estate\",\n  \"eternal\",\n  \"ethics\",\n  \"evidence\",\n  \"evil\",\n  \"evoke\",\n  \"evolve\",\n  \"exact\",\n  \"example\",\n  \"excess\",\n  \"exchange\",\n  \"excite\",\n  \"exclude\",\n  \"excuse\",\n  \"execute\",\n  \"exercise\",\n  \"exhaust\",\n  \"exhibit\",\n  \"exile\",\n  \"exist\",\n  \"exit\",\n  \"exotic\",\n  \"expand\",\n  \"expect\",\n  \"expire\",\n  \"explain\",\n  \"expose\",\n  \"express\",\n  \"extend\",\n  \"extra\",\n  \"eye\",\n  \"eyebrow\",\n  \"fabric\",\n  \"face\",\n  \"faculty\",\n  \"fade\",\n  \"faint\",\n  \"faith\",\n  \"fall\",\n  \"false\",\n  \"fame\",\n  \"family\",\n  \"famous\",\n  \"fan\",\n  \"fancy\",\n  \"fantasy\",\n  \"farm\",\n  \"fashion\",\n  \"fat\",\n  \"fatal\",\n  \"father\",\n  \"fatigue\",\n  \"fault\",\n  \"favorite\",\n  \"feature\",\n  \"february\",\n  \"federal\",\n  \"fee\",\n  \"feed\",\n  \"feel\",\n  \"female\",\n  \"fence\",\n  \"festival\",\n  \"fetch\",\n  \"fever\",\n  \"few\",\n  \"fiber\",\n  \"fiction\",\n  \"field\",\n  \"figure\",\n  \"file\",\n  \"film\",\n  \"filter\",\n  \"final\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"firm\",\n  \"first\",\n  \"fiscal\",\n  \"fish\",\n  \"fit\",\n  \"fitness\",\n  \"fix\",\n  \"flag\",\n  \"flame\",\n  \"flash\",\n  \"flat\",\n  \"flavor\",\n  \"flee\",\n  \"flight\",\n  \"flip\",\n  \"float\",\n  \"flock\",\n  \"floor\",\n  \"flower\",\n  \"fluid\",\n  \"flush\",\n  \"fly\",\n  \"foam\",\n  \"focus\",\n  \"fog\",\n  \"foil\",\n  \"fold\",\n  \"follow\",\n  \"food\",\n  \"foot\",\n  \"force\",\n  \"forest\",\n  \"forget\",\n  \"fork\",\n  \"fortune\",\n  \"forum\",\n  \"forward\",\n  \"fossil\",\n  \"foster\",\n  \"found\",\n  \"fox\",\n  \"fragile\",\n  \"frame\",\n  \"frequent\",\n  \"fresh\",\n  \"friend\",\n  \"fringe\",\n  \"frog\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"frozen\",\n  \"fruit\",\n  \"fuel\",\n  \"fun\",\n  \"funny\",\n  \"furnace\",\n  \"fury\",\n  \"future\",\n  \"gadget\",\n  \"gain\",\n  \"galaxy\",\n  \"gallery\",\n  \"game\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"garlic\",\n  \"garment\",\n  \"gas\",\n  \"gasp\",\n  \"gate\",\n  \"gather\",\n  \"gauge\",\n  \"gaze\",\n  \"general\",\n  \"genius\",\n  \"genre\",\n  \"gentle\",\n  \"genuine\",\n  \"gesture\",\n  \"ghost\",\n  \"giant\",\n  \"gift\",\n  \"giggle\",\n  \"ginger\",\n  \"giraffe\",\n  \"girl\",\n  \"give\",\n  \"glad\",\n  \"glance\",\n  \"glare\",\n  \"glass\",\n  \"glide\",\n  \"glimpse\",\n  \"globe\",\n  \"gloom\",\n  \"glory\",\n  \"glove\",\n  \"glow\",\n  \"glue\",\n  \"goat\",\n  \"goddess\",\n  \"gold\",\n  \"good\",\n  \"goose\",\n  \"gorilla\",\n  \"gospel\",\n  \"gossip\",\n  \"govern\",\n  \"gown\",\n  \"grab\",\n  \"grace\",\n  \"grain\",\n  \"grant\",\n  \"grape\",\n  \"grass\",\n  \"gravity\",\n  \"great\",\n  \"green\",\n  \"grid\",\n  \"grief\",\n  \"grit\",\n  \"grocery\",\n  \"group\",\n  \"grow\",\n  \"grunt\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"guilt\",\n  \"guitar\",\n  \"gun\",\n  \"gym\",\n  \"habit\",\n  \"hair\",\n  \"half\",\n  \"hammer\",\n  \"hamster\",\n  \"hand\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"harsh\",\n  \"harvest\",\n  \"hat\",\n  \"have\",\n  \"hawk\",\n  \"hazard\",\n  \"head\",\n  \"health\",\n  \"heart\",\n  \"heavy\",\n  \"hedgehog\",\n  \"height\",\n  \"hello\",\n  \"helmet\",\n  \"help\",\n  \"hen\",\n  \"hero\",\n  \"hidden\",\n  \"high\",\n  \"hill\",\n  \"hint\",\n  \"hip\",\n  \"hire\",\n  \"history\",\n  \"hobby\",\n  \"hockey\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"hollow\",\n  \"home\",\n  \"honey\",\n  \"hood\",\n  \"hope\",\n  \"horn\",\n  \"horror\",\n  \"horse\",\n  \"hospital\",\n  \"host\",\n  \"hotel\",\n  \"hour\",\n  \"hover\",\n  \"hub\",\n  \"huge\",\n  \"human\",\n  \"humble\",\n  \"humor\",\n  \"hundred\",\n  \"hungry\",\n  \"hunt\",\n  \"hurdle\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hybrid\",\n  \"ice\",\n  \"icon\",\n  \"idea\",\n  \"identify\",\n  \"idle\",\n  \"ignore\",\n  \"ill\",\n  \"illegal\",\n  \"illness\",\n  \"image\",\n  \"imitate\",\n  \"immense\",\n  \"immune\",\n  \"impact\",\n  \"impose\",\n  \"improve\",\n  \"impulse\",\n  \"inch\",\n  \"include\",\n  \"income\",\n  \"increase\",\n  \"index\",\n  \"indicate\",\n  \"indoor\",\n  \"industry\",\n  \"infant\",\n  \"inflict\",\n  \"inform\",\n  \"inhale\",\n  \"inherit\",\n  \"initial\",\n  \"inject\",\n  \"injury\",\n  \"inmate\",\n  \"inner\",\n  \"innocent\",\n  \"input\",\n  \"inquiry\",\n  \"insane\",\n  \"insect\",\n  \"inside\",\n  \"inspire\",\n  \"install\",\n  \"intact\",\n  \"interest\",\n  \"into\",\n  \"invest\",\n  \"invite\",\n  \"involve\",\n  \"iron\",\n  \"island\",\n  \"isolate\",\n  \"issue\",\n  \"item\",\n  \"ivory\",\n  \"jacket\",\n  \"jaguar\",\n  \"jar\",\n  \"jazz\",\n  \"jealous\",\n  \"jeans\",\n  \"jelly\",\n  \"jewel\",\n  \"job\",\n  \"join\",\n  \"joke\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"juice\",\n  \"jump\",\n  \"jungle\",\n  \"junior\",\n  \"junk\",\n  \"just\",\n  \"kangaroo\",\n  \"keen\",\n  \"keep\",\n  \"ketchup\",\n  \"key\",\n  \"kick\",\n  \"kid\",\n  \"kidney\",\n  \"kind\",\n  \"kingdom\",\n  \"kiss\",\n  \"kit\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kiwi\",\n  \"knee\",\n  \"knife\",\n  \"knock\",\n  \"know\",\n  \"lab\",\n  \"label\",\n  \"labor\",\n  \"ladder\",\n  \"lady\",\n  \"lake\",\n  \"lamp\",\n  \"language\",\n  \"laptop\",\n  \"large\",\n  \"later\",\n  \"latin\",\n  \"laugh\",\n  \"laundry\",\n  \"lava\",\n  \"law\",\n  \"lawn\",\n  \"lawsuit\",\n  \"layer\",\n  \"lazy\",\n  \"leader\",\n  \"leaf\",\n  \"learn\",\n  \"leave\",\n  \"lecture\",\n  \"left\",\n  \"leg\",\n  \"legal\",\n  \"legend\",\n  \"leisure\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"leopard\",\n  \"lesson\",\n  \"letter\",\n  \"level\",\n  \"liar\",\n  \"liberty\",\n  \"library\",\n  \"license\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"limb\",\n  \"limit\",\n  \"link\",\n  \"lion\",\n  \"liquid\",\n  \"list\",\n  \"little\",\n  \"live\",\n  \"lizard\",\n  \"load\",\n  \"loan\",\n  \"lobster\",\n  \"local\",\n  \"lock\",\n  \"logic\",\n  \"lonely\",\n  \"long\",\n  \"loop\",\n  \"lottery\",\n  \"loud\",\n  \"lounge\",\n  \"love\",\n  \"loyal\",\n  \"lucky\",\n  \"luggage\",\n  \"lumber\",\n  \"lunar\",\n  \"lunch\",\n  \"luxury\",\n  \"lyrics\",\n  \"machine\",\n  \"mad\",\n  \"magic\",\n  \"magnet\",\n  \"maid\",\n  \"mail\",\n  \"main\",\n  \"major\",\n  \"make\",\n  \"mammal\",\n  \"man\",\n  \"manage\",\n  \"mandate\",\n  \"mango\",\n  \"mansion\",\n  \"manual\",\n  \"maple\",\n  \"marble\",\n  \"march\",\n  \"margin\",\n  \"marine\",\n  \"market\",\n  \"marriage\",\n  \"mask\",\n  \"mass\",\n  \"master\",\n  \"match\",\n  \"material\",\n  \"math\",\n  \"matrix\",\n  \"matter\",\n  \"maximum\",\n  \"maze\",\n  \"meadow\",\n  \"mean\",\n  \"measure\",\n  \"meat\",\n  \"mechanic\",\n  \"medal\",\n  \"media\",\n  \"melody\",\n  \"melt\",\n  \"member\",\n  \"memory\",\n  \"mention\",\n  \"menu\",\n  \"mercy\",\n  \"merge\",\n  \"merit\",\n  \"merry\",\n  \"mesh\",\n  \"message\",\n  \"metal\",\n  \"method\",\n  \"middle\",\n  \"midnight\",\n  \"milk\",\n  \"million\",\n  \"mimic\",\n  \"mind\",\n  \"minimum\",\n  \"minor\",\n  \"minute\",\n  \"miracle\",\n  \"mirror\",\n  \"misery\",\n  \"miss\",\n  \"mistake\",\n  \"mix\",\n  \"mixed\",\n  \"mixture\",\n  \"mobile\",\n  \"model\",\n  \"modify\",\n  \"mom\",\n  \"moment\",\n  \"monitor\",\n  \"monkey\",\n  \"monster\",\n  \"month\",\n  \"moon\",\n  \"moral\",\n  \"more\",\n  \"morning\",\n  \"mosquito\",\n  \"mother\",\n  \"motion\",\n  \"motor\",\n  \"mountain\",\n  \"mouse\",\n  \"move\",\n  \"movie\",\n  \"much\",\n  \"muffin\",\n  \"mule\",\n  \"multiply\",\n  \"muscle\",\n  \"museum\",\n  \"mushroom\",\n  \"music\",\n  \"must\",\n  \"mutual\",\n  \"myself\",\n  \"mystery\",\n  \"myth\",\n  \"naive\",\n  \"name\",\n  \"napkin\",\n  \"narrow\",\n  \"nasty\",\n  \"nation\",\n  \"nature\",\n  \"near\",\n  \"neck\",\n  \"need\",\n  \"negative\",\n  \"neglect\",\n  \"neither\",\n  \"nephew\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"network\",\n  \"neutral\",\n  \"never\",\n  \"news\",\n  \"next\",\n  \"nice\",\n  \"night\",\n  \"noble\",\n  \"noise\",\n  \"nominee\",\n  \"noodle\",\n  \"normal\",\n  \"north\",\n  \"nose\",\n  \"notable\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"novel\",\n  \"now\",\n  \"nuclear\",\n  \"number\",\n  \"nurse\",\n  \"nut\",\n  \"oak\",\n  \"obey\",\n  \"object\",\n  \"oblige\",\n  \"obscure\",\n  \"observe\",\n  \"obtain\",\n  \"obvious\",\n  \"occur\",\n  \"ocean\",\n  \"october\",\n  \"odor\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"often\",\n  \"oil\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympic\",\n  \"omit\",\n  \"once\",\n  \"one\",\n  \"onion\",\n  \"online\",\n  \"only\",\n  \"open\",\n  \"opera\",\n  \"opinion\",\n  \"oppose\",\n  \"option\",\n  \"orange\",\n  \"orbit\",\n  \"orchard\",\n  \"order\",\n  \"ordinary\",\n  \"organ\",\n  \"orient\",\n  \"original\",\n  \"orphan\",\n  \"ostrich\",\n  \"other\",\n  \"outdoor\",\n  \"outer\",\n  \"output\",\n  \"outside\",\n  \"oval\",\n  \"oven\",\n  \"over\",\n  \"own\",\n  \"owner\",\n  \"oxygen\",\n  \"oyster\",\n  \"ozone\",\n  \"pact\",\n  \"paddle\",\n  \"page\",\n  \"pair\",\n  \"palace\",\n  \"palm\",\n  \"panda\",\n  \"panel\",\n  \"panic\",\n  \"panther\",\n  \"paper\",\n  \"parade\",\n  \"parent\",\n  \"park\",\n  \"parrot\",\n  \"party\",\n  \"pass\",\n  \"patch\",\n  \"path\",\n  \"patient\",\n  \"patrol\",\n  \"pattern\",\n  \"pause\",\n  \"pave\",\n  \"payment\",\n  \"peace\",\n  \"peanut\",\n  \"pear\",\n  \"peasant\",\n  \"pelican\",\n  \"pen\",\n  \"penalty\",\n  \"pencil\",\n  \"people\",\n  \"pepper\",\n  \"perfect\",\n  \"permit\",\n  \"person\",\n  \"pet\",\n  \"phone\",\n  \"photo\",\n  \"phrase\",\n  \"physical\",\n  \"piano\",\n  \"picnic\",\n  \"picture\",\n  \"piece\",\n  \"pig\",\n  \"pigeon\",\n  \"pill\",\n  \"pilot\",\n  \"pink\",\n  \"pioneer\",\n  \"pipe\",\n  \"pistol\",\n  \"pitch\",\n  \"pizza\",\n  \"place\",\n  \"planet\",\n  \"plastic\",\n  \"plate\",\n  \"play\",\n  \"please\",\n  \"pledge\",\n  \"pluck\",\n  \"plug\",\n  \"plunge\",\n  \"poem\",\n  \"poet\",\n  \"point\",\n  \"polar\",\n  \"pole\",\n  \"police\",\n  \"pond\",\n  \"pony\",\n  \"pool\",\n  \"popular\",\n  \"portion\",\n  \"position\",\n  \"possible\",\n  \"post\",\n  \"potato\",\n  \"pottery\",\n  \"poverty\",\n  \"powder\",\n  \"power\",\n  \"practice\",\n  \"praise\",\n  \"predict\",\n  \"prefer\",\n  \"prepare\",\n  \"present\",\n  \"pretty\",\n  \"prevent\",\n  \"price\",\n  \"pride\",\n  \"primary\",\n  \"print\",\n  \"priority\",\n  \"prison\",\n  \"private\",\n  \"prize\",\n  \"problem\",\n  \"process\",\n  \"produce\",\n  \"profit\",\n  \"program\",\n  \"project\",\n  \"promote\",\n  \"proof\",\n  \"property\",\n  \"prosper\",\n  \"protect\",\n  \"proud\",\n  \"provide\",\n  \"public\",\n  \"pudding\",\n  \"pull\",\n  \"pulp\",\n  \"pulse\",\n  \"pumpkin\",\n  \"punch\",\n  \"pupil\",\n  \"puppy\",\n  \"purchase\",\n  \"purity\",\n  \"purpose\",\n  \"purse\",\n  \"push\",\n  \"put\",\n  \"puzzle\",\n  \"pyramid\",\n  \"quality\",\n  \"quantum\",\n  \"quarter\",\n  \"question\",\n  \"quick\",\n  \"quit\",\n  \"quiz\",\n  \"quote\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"rack\",\n  \"radar\",\n  \"radio\",\n  \"rail\",\n  \"rain\",\n  \"raise\",\n  \"rally\",\n  \"ramp\",\n  \"ranch\",\n  \"random\",\n  \"range\",\n  \"rapid\",\n  \"rare\",\n  \"rate\",\n  \"rather\",\n  \"raven\",\n  \"raw\",\n  \"razor\",\n  \"ready\",\n  \"real\",\n  \"reason\",\n  \"rebel\",\n  \"rebuild\",\n  \"recall\",\n  \"receive\",\n  \"recipe\",\n  \"record\",\n  \"recycle\",\n  \"reduce\",\n  \"reflect\",\n  \"reform\",\n  \"refuse\",\n  \"region\",\n  \"regret\",\n  \"regular\",\n  \"reject\",\n  \"relax\",\n  \"release\",\n  \"relief\",\n  \"rely\",\n  \"remain\",\n  \"remember\",\n  \"remind\",\n  \"remove\",\n  \"render\",\n  \"renew\",\n  \"rent\",\n  \"reopen\",\n  \"repair\",\n  \"repeat\",\n  \"replace\",\n  \"report\",\n  \"require\",\n  \"rescue\",\n  \"resemble\",\n  \"resist\",\n  \"resource\",\n  \"response\",\n  \"result\",\n  \"retire\",\n  \"retreat\",\n  \"return\",\n  \"reunion\",\n  \"reveal\",\n  \"review\",\n  \"reward\",\n  \"rhythm\",\n  \"rib\",\n  \"ribbon\",\n  \"rice\",\n  \"rich\",\n  \"ride\",\n  \"ridge\",\n  \"rifle\",\n  \"right\",\n  \"rigid\",\n  \"ring\",\n  \"riot\",\n  \"ripple\",\n  \"risk\",\n  \"ritual\",\n  \"rival\",\n  \"river\",\n  \"road\",\n  \"roast\",\n  \"robot\",\n  \"robust\",\n  \"rocket\",\n  \"romance\",\n  \"roof\",\n  \"rookie\",\n  \"room\",\n  \"rose\",\n  \"rotate\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rubber\",\n  \"rude\",\n  \"rug\",\n  \"rule\",\n  \"run\",\n  \"runway\",\n  \"rural\",\n  \"sad\",\n  \"saddle\",\n  \"sadness\",\n  \"safe\",\n  \"sail\",\n  \"salad\",\n  \"salmon\",\n  \"salon\",\n  \"salt\",\n  \"salute\",\n  \"same\",\n  \"sample\",\n  \"sand\",\n  \"satisfy\",\n  \"satoshi\",\n  \"sauce\",\n  \"sausage\",\n  \"save\",\n  \"say\",\n  \"scale\",\n  \"scan\",\n  \"scare\",\n  \"scatter\",\n  \"scene\",\n  \"scheme\",\n  \"school\",\n  \"science\",\n  \"scissors\",\n  \"scorpion\",\n  \"scout\",\n  \"scrap\",\n  \"screen\",\n  \"script\",\n  \"scrub\",\n  \"sea\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"section\",\n  \"security\",\n  \"seed\",\n  \"seek\",\n  \"segment\",\n  \"select\",\n  \"sell\",\n  \"seminar\",\n  \"senior\",\n  \"sense\",\n  \"sentence\",\n  \"series\",\n  \"service\",\n  \"session\",\n  \"settle\",\n  \"setup\",\n  \"seven\",\n  \"shadow\",\n  \"shaft\",\n  \"shallow\",\n  \"share\",\n  \"shed\",\n  \"shell\",\n  \"sheriff\",\n  \"shield\",\n  \"shift\",\n  \"shine\",\n  \"ship\",\n  \"shiver\",\n  \"shock\",\n  \"shoe\",\n  \"shoot\",\n  \"shop\",\n  \"short\",\n  \"shoulder\",\n  \"shove\",\n  \"shrimp\",\n  \"shrug\",\n  \"shuffle\",\n  \"shy\",\n  \"sibling\",\n  \"sick\",\n  \"side\",\n  \"siege\",\n  \"sight\",\n  \"sign\",\n  \"silent\",\n  \"silk\",\n  \"silly\",\n  \"silver\",\n  \"similar\",\n  \"simple\",\n  \"since\",\n  \"sing\",\n  \"siren\",\n  \"sister\",\n  \"situate\",\n  \"six\",\n  \"size\",\n  \"skate\",\n  \"sketch\",\n  \"ski\",\n  \"skill\",\n  \"skin\",\n  \"skirt\",\n  \"skull\",\n  \"slab\",\n  \"slam\",\n  \"sleep\",\n  \"slender\",\n  \"slice\",\n  \"slide\",\n  \"slight\",\n  \"slim\",\n  \"slogan\",\n  \"slot\",\n  \"slow\",\n  \"slush\",\n  \"small\",\n  \"smart\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snack\",\n  \"snake\",\n  \"snap\",\n  \"sniff\",\n  \"snow\",\n  \"soap\",\n  \"soccer\",\n  \"social\",\n  \"sock\",\n  \"soda\",\n  \"soft\",\n  \"solar\",\n  \"soldier\",\n  \"solid\",\n  \"solution\",\n  \"solve\",\n  \"someone\",\n  \"song\",\n  \"soon\",\n  \"sorry\",\n  \"sort\",\n  \"soul\",\n  \"sound\",\n  \"soup\",\n  \"source\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"spatial\",\n  \"spawn\",\n  \"speak\",\n  \"special\",\n  \"speed\",\n  \"spell\",\n  \"spend\",\n  \"sphere\",\n  \"spice\",\n  \"spider\",\n  \"spike\",\n  \"spin\",\n  \"spirit\",\n  \"split\",\n  \"spoil\",\n  \"sponsor\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spray\",\n  \"spread\",\n  \"spring\",\n  \"spy\",\n  \"square\",\n  \"squeeze\",\n  \"squirrel\",\n  \"stable\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"stairs\",\n  \"stamp\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"stay\",\n  \"steak\",\n  \"steel\",\n  \"stem\",\n  \"step\",\n  \"stereo\",\n  \"stick\",\n  \"still\",\n  \"sting\",\n  \"stock\",\n  \"stomach\",\n  \"stone\",\n  \"stool\",\n  \"story\",\n  \"stove\",\n  \"strategy\",\n  \"street\",\n  \"strike\",\n  \"strong\",\n  \"struggle\",\n  \"student\",\n  \"stuff\",\n  \"stumble\",\n  \"style\",\n  \"subject\",\n  \"submit\",\n  \"subway\",\n  \"success\",\n  \"such\",\n  \"sudden\",\n  \"suffer\",\n  \"sugar\",\n  \"suggest\",\n  \"suit\",\n  \"summer\",\n  \"sun\",\n  \"sunny\",\n  \"sunset\",\n  \"super\",\n  \"supply\",\n  \"supreme\",\n  \"sure\",\n  \"surface\",\n  \"surge\",\n  \"surprise\",\n  \"surround\",\n  \"survey\",\n  \"suspect\",\n  \"sustain\",\n  \"swallow\",\n  \"swamp\",\n  \"swap\",\n  \"swarm\",\n  \"swear\",\n  \"sweet\",\n  \"swift\",\n  \"swim\",\n  \"swing\",\n  \"switch\",\n  \"sword\",\n  \"symbol\",\n  \"symptom\",\n  \"syrup\",\n  \"system\",\n  \"table\",\n  \"tackle\",\n  \"tag\",\n  \"tail\",\n  \"talent\",\n  \"talk\",\n  \"tank\",\n  \"tape\",\n  \"target\",\n  \"task\",\n  \"taste\",\n  \"tattoo\",\n  \"taxi\",\n  \"teach\",\n  \"team\",\n  \"tell\",\n  \"ten\",\n  \"tenant\",\n  \"tennis\",\n  \"tent\",\n  \"term\",\n  \"test\",\n  \"text\",\n  \"thank\",\n  \"that\",\n  \"theme\",\n  \"then\",\n  \"theory\",\n  \"there\",\n  \"they\",\n  \"thing\",\n  \"this\",\n  \"thought\",\n  \"three\",\n  \"thrive\",\n  \"throw\",\n  \"thumb\",\n  \"thunder\",\n  \"ticket\",\n  \"tide\",\n  \"tiger\",\n  \"tilt\",\n  \"timber\",\n  \"time\",\n  \"tiny\",\n  \"tip\",\n  \"tired\",\n  \"tissue\",\n  \"title\",\n  \"toast\",\n  \"tobacco\",\n  \"today\",\n  \"toddler\",\n  \"toe\",\n  \"together\",\n  \"toilet\",\n  \"token\",\n  \"tomato\",\n  \"tomorrow\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"tool\",\n  \"tooth\",\n  \"top\",\n  \"topic\",\n  \"topple\",\n  \"torch\",\n  \"tornado\",\n  \"tortoise\",\n  \"toss\",\n  \"total\",\n  \"tourist\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"track\",\n  \"trade\",\n  \"traffic\",\n  \"tragic\",\n  \"train\",\n  \"transfer\",\n  \"trap\",\n  \"trash\",\n  \"travel\",\n  \"tray\",\n  \"treat\",\n  \"tree\",\n  \"trend\",\n  \"trial\",\n  \"tribe\",\n  \"trick\",\n  \"trigger\",\n  \"trim\",\n  \"trip\",\n  \"trophy\",\n  \"trouble\",\n  \"truck\",\n  \"true\",\n  \"truly\",\n  \"trumpet\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"tube\",\n  \"tuition\",\n  \"tumble\",\n  \"tuna\",\n  \"tunnel\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"twin\",\n  \"twist\",\n  \"two\",\n  \"type\",\n  \"typical\",\n  \"ugly\",\n  \"umbrella\",\n  \"unable\",\n  \"unaware\",\n  \"uncle\",\n  \"uncover\",\n  \"under\",\n  \"undo\",\n  \"unfair\",\n  \"unfold\",\n  \"unhappy\",\n  \"uniform\",\n  \"unique\",\n  \"unit\",\n  \"universe\",\n  \"unknown\",\n  \"unlock\",\n  \"until\",\n  \"unusual\",\n  \"unveil\",\n  \"update\",\n  \"upgrade\",\n  \"uphold\",\n  \"upon\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"urge\",\n  \"usage\",\n  \"use\",\n  \"used\",\n  \"useful\",\n  \"useless\",\n  \"usual\",\n  \"utility\",\n  \"vacant\",\n  \"vacuum\",\n  \"vague\",\n  \"valid\",\n  \"valley\",\n  \"valve\",\n  \"van\",\n  \"vanish\",\n  \"vapor\",\n  \"various\",\n  \"vast\",\n  \"vault\",\n  \"vehicle\",\n  \"velvet\",\n  \"vendor\",\n  \"venture\",\n  \"venue\",\n  \"verb\",\n  \"verify\",\n  \"version\",\n  \"very\",\n  \"vessel\",\n  \"veteran\",\n  \"viable\",\n  \"vibrant\",\n  \"vicious\",\n  \"victory\",\n  \"video\",\n  \"view\",\n  \"village\",\n  \"vintage\",\n  \"violin\",\n  \"virtual\",\n  \"virus\",\n  \"visa\",\n  \"visit\",\n  \"visual\",\n  \"vital\",\n  \"vivid\",\n  \"vocal\",\n  \"voice\",\n  \"void\",\n  \"volcano\",\n  \"volume\",\n  \"vote\",\n  \"voyage\",\n  \"wage\",\n  \"wagon\",\n  \"wait\",\n  \"walk\",\n  \"wall\",\n  \"walnut\",\n  \"want\",\n  \"warfare\",\n  \"warm\",\n  \"warrior\",\n  \"wash\",\n  \"wasp\",\n  \"waste\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weasel\",\n  \"weather\",\n  \"web\",\n  \"wedding\",\n  \"weekend\",\n  \"weird\",\n  \"welcome\",\n  \"west\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"where\",\n  \"whip\",\n  \"whisper\",\n  \"wide\",\n  \"width\",\n  \"wife\",\n  \"wild\",\n  \"will\",\n  \"win\",\n  \"window\",\n  \"wine\",\n  \"wing\",\n  \"wink\",\n  \"winner\",\n  \"winter\",\n  \"wire\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"witness\",\n  \"wolf\",\n  \"woman\",\n  \"wonder\",\n  \"wood\",\n  \"wool\",\n  \"word\",\n  \"work\",\n  \"world\",\n  \"worry\",\n  \"worth\",\n  \"wrap\",\n  \"wreck\",\n  \"wrestle\",\n  \"wrist\",\n  \"write\",\n  \"wrong\",\n  \"yard\",\n  \"year\",\n  \"yellow\",\n  \"you\",\n  \"young\",\n  \"youth\",\n  \"zebra\",\n  \"zero\",\n  \"zone\",\n  \"zoo\"\n];\n\n// src/wordlists/index.ts\nvar Language = /* @__PURE__ */ ((Language2) => {\n  Language2[\"english\"] = \"english\";\n  return Language2;\n})(Language || {});\n\n// src/mnemonic/utils.ts\n\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\nfunction getWords(mnemonic) {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\nfunction getPhrase(mnemonic) {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(\" \");\n  }\n  return mnemonic;\n}\nfunction entropyToMnemonicIndices(entropy) {\n  const indices = [0];\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  const checksumBits = entropy.length / 4;\n  const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(entropy))[0] & getUpperMask(checksumBits);\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return indices;\n}\nfunction mnemonicWordsToEntropy(words, wordlist) {\n  const size = Math.ceil(11 * words.length / 8);\n  const entropy = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(new Uint8Array(size));\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CHECKSUM,\n      \"Checksum validation failed for the provided mnemonic.\"\n    );\n  }\n  return entropy.slice(0, entropyBits / 8);\n}\n\n// src/mnemonic/mnemonic.ts\nvar MasterSecret = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(\"Bitcoin seed\");\nvar MainnetPRV = \"0x0488ade4\";\nvar TestnetPRV = \"0x04358394\";\nvar MNEMONIC_SIZES = [12, 15, 18, 21, 24];\nfunction assertWordList(wordlist) {\n  if (wordlist.length !== 2048) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\nfunction assertEntropy(entropy) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\nfunction assertMnemonic(words) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      \", \"\n    )}] words, but got ${words.length}.`;\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\nvar Mnemonic = class {\n  wordlist;\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist = english) {\n    this.wordlist = wordlist;\n    assertWordList(this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase, wordlist = english) {\n    const words = getWords(phrase);\n    assertMnemonic(words);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(mnemonicWordsToEntropy(words, wordlist));\n  }\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy, wordlist = english) {\n    const entropyBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(entropy);\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n    return entropyToMnemonicIndices(entropyBytes).map((i) => wordlist[i]).join(\" \");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase, passphrase = \"\") {\n    assertMnemonic(getWords(phrase));\n    const phraseBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(getPhrase(phrase));\n    const salt = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(`mnemonic${passphrase}`);\n    return (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2)(phraseBytes, salt, 2048, 64, \"sha512\");\n  }\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase, passphrase = \"\") {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase) {\n    const words = getWords(phrase);\n    let i = 0;\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n    return true;\n  }\n  static binarySearch(target) {\n    const words = english;\n    let left = 0;\n    let right = words.length - 1;\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return false;\n  }\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed) {\n    const seedArray = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(seed);\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.computeHmac)(\"sha512\", MasterSecret, seedArray));\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed, testnet = false) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(testnet ? TestnetPRV : MainnetPRV);\n    const depth = \"0x00\";\n    const fingerprint = \"0x00000000\";\n    const index = \"0x00000000\";\n    const chainCode = masterKey.slice(32);\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x00\", privateKey])\n    ]);\n    const checksum = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(extendedKey)), 0, 4);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.encodeBase58)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([extendedKey, checksum]));\n  }\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size = 32, extraEntropy = \"\") {\n    const entropy = extraEntropy ? (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([(0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(size), (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(extraEntropy)])) : (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n};\nvar mnemonic_default = Mnemonic;\n\n// src/hdwallet/hdwallet.ts\nvar HARDENED_INDEX = 2147483648;\nvar MainnetPRV2 = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x0488ade4\");\nvar MainnetPUB = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x0488b21e\");\nvar TestnetPRV2 = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x04358394\");\nvar TestnetPUB = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x043587cf\");\nfunction base58check(data) {\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.encodeBase58)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([data, (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(data)), 0, 4)]));\n}\nfunction getExtendedKeyPrefix(isPublic = false, testnet = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV2 : MainnetPRV2;\n}\nfunction isPublicExtendedKey(extendedKey) {\n  return [MainnetPUB, TestnetPUB].includes((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(extendedKey.slice(0, 4)));\n}\nfunction isValidExtendedKey(extendedKey) {\n  return [MainnetPRV2, TestnetPRV2, MainnetPUB, TestnetPUB].includes(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(extendedKey.slice(0, 4))\n  );\n}\nfunction parsePath(path, depth = 0) {\n  const components = path.split(\"/\");\n  if (components.length === 0 || components[0] === \"m\" && depth !== 0) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n  if (components[0] === \"m\") {\n    components.shift();\n  }\n  return components.map(\n    (p) => ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\nvar HDWallet = class {\n  depth = 0;\n  index = 0;\n  fingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x00000000\");\n  parentFingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(\"0x00000000\");\n  privateKey;\n  publicKey;\n  chainCode;\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config) {\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(signer.compressedPublicKey);\n      this.privateKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n          \"Both public and private Key cannot be missing. At least one should be provided.\"\n        );\n      }\n      this.publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(config.publicKey);\n    }\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.dataSlice)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.ripemd160)((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index) {\n    const privateKey = this.privateKey && (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.privateKey);\n    const publicKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.publicKey);\n    const chainCode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.chainCode);\n    const data = new Uint8Array(37);\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n          \"Cannot derive a hardened index without a private Key.\"\n        );\n      }\n      data.set(privateKey, 1);\n    } else {\n      data.set((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(this.publicKey));\n    }\n    data.set((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)(index, 4), 33);\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.computeHmac)(\"sha512\", chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n    if (privateKey) {\n      const N = \"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\";\n      const ki = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(IL).add(privateKey).mod(N).toBytes(32);\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint\n      });\n    }\n    const signer = new Signer((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(IL));\n    const Ki = signer.addPoint(publicKey);\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint\n    });\n  }\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path) {\n    const paths = parsePath(path, this.depth);\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), this);\n  }\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic = false, testnet = false) {\n    if (this.depth >= 256) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toHex)(this.index, 4);\n    const chainCode = this.chainCode;\n    const key = this.privateKey != null && !isPublic ? (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x00\", this.privateKey]) : this.publicKey;\n    const extendedKey = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([prefix, depth, parentFingerprint, index, chainCode, key]));\n    return base58check(extendedKey);\n  }\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed) {\n    const masterKey = mnemonic_default.masterKeysFromSeed(seed);\n    return new HDWallet({\n      chainCode: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(masterKey.slice(32)),\n      privateKey: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(masterKey.slice(0, 32))\n    });\n  }\n  static fromExtendedKey(extendedKey) {\n    const decoded = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.toBytes)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.decodeBase58)(extendedKey)));\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Provided key is not a valid extended key.\");\n    }\n    if (!validChecksum) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Provided key has an invalid checksum.\");\n    }\n    const depth = bytes[4];\n    const parentFingerprint = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(5, 9));\n    const index = parseInt((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n    if (depth === 0 && parentFingerprint !== \"0x00000000\" || depth === 0 && index !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR,\n        \"Inconsistency detected: Depth is zero but fingerprint/index is non-zero.\"\n      );\n    }\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Invalid public extended key.\");\n      }\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint\n      });\n    }\n    if (key[0] !== 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.HD_WALLET_ERROR, \"Invalid private extended key.\");\n    }\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint\n    });\n  }\n};\nvar hdwallet_default = HDWallet;\n\n// src/wallet/wallets.ts\nvar WalletLocked = class extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey) {\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n};\nvar WalletUnlocked = class extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock() {\n    this.signer = () => new Signer(\"0x00\");\n    return new WalletLocked(this.address, this._provider);\n  }\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions) {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed, path, provider) {\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n    return new WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(mnemonic, path, passphrase, provider) {\n    const seed = mnemonic_default.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = hdwallet_default.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n    return new WalletUnlocked(childWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey, provider) {\n    const hdWallet = hdwallet_default.fromExtendedKey(extendedKey);\n    return new WalletUnlocked(hdWallet.privateKey, provider);\n  }\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(jsonWallet, password, provider) {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n    return new WalletUnlocked(privateKey, provider);\n  }\n};\n\n// src/wallet/wallet.ts\nvar Wallet = class {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address, provider) {\n    return new WalletLocked(address, provider);\n  }\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey, provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n};\n/**\n * Generate a new Wallet Unlocked with a random key pair.\n *\n * @param generateOptions - Options to customize the generation process (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"generate\", WalletUnlocked.generate);\n/**\n * Create a Wallet Unlocked from a seed.\n *\n * @param seed - The seed phrase.\n * @param provider - A Provider instance (optional).\n * @param path - The derivation path (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromSeed\", WalletUnlocked.fromSeed);\n/**\n * Create a Wallet Unlocked from a mnemonic phrase.\n *\n * @param mnemonic - The mnemonic phrase.\n * @param provider - A Provider instance (optional).\n * @param path - The derivation path (optional).\n * @param passphrase - The passphrase for the mnemonic (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromMnemonic\", WalletUnlocked.fromMnemonic);\n/**\n * Create a Wallet Unlocked from an extended key.\n *\n * @param extendedKey - The extended key.\n * @param provider - A Provider instance (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromExtendedKey\", WalletUnlocked.fromExtendedKey);\n/**\n * Create a Wallet Unlocked from an encrypted JSON.\n *\n * @param jsonWallet - The encrypted JSON keystore.\n * @param password - The password to decrypt the JSON.\n * @param provider - A Provider instance (optional).\n * @returns An unlocked wallet instance.\n */\n__publicField(Wallet, \"fromEncryptedJson\", WalletUnlocked.fromEncryptedJson);\n\n// src/wallet-manager/wallet-manager.ts\n\n\n\n\n\n// src/wallet-manager/storages/memory-storage.ts\nvar MemoryStorage = class {\n  storage = /* @__PURE__ */ new Map();\n  async getItem(key) {\n    const item = await this.storage.get(key);\n    return item;\n  }\n  async setItem(key, value) {\n    await this.storage.set(key, value);\n  }\n  async removeItem(key) {\n    await this.storage.delete(key);\n  }\n  async clear() {\n    await this.storage.clear();\n  }\n};\n\n// src/wallet-manager/vaults/mnemonic-vault.ts\n\n\nvar _secret;\nvar MnemonicVault = class {\n  constructor(options) {\n    __privateAdd(this, _secret, void 0);\n    __publicField(this, \"pathKey\", \"{}\");\n    __publicField(this, \"rootPath\", `m/44'/1179993420'/${this.pathKey}'/0/0`);\n    __publicField(this, \"numberOfAccounts\", 0);\n    __privateSet(this, _secret, options.secret || mnemonic_default.generate());\n    this.rootPath = options.rootPath || this.rootPath;\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n  getDerivePath(index) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n  serialize() {\n    return {\n      secret: __privateGet(this, _secret),\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts\n    };\n  }\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n    do {\n      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    return accounts;\n  }\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(this.numberOfAccounts - 1));\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address\n    };\n  }\n  exportAccount(address) {\n    let numberOfAccounts = 0;\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    do {\n      const wallet = Wallet.fromMnemonic(__privateGet(this, _secret), this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n_secret = new WeakMap();\n__publicField(MnemonicVault, \"type\", \"mnemonic\");\n\n// src/wallet-manager/vaults/privatekey-vault.ts\n\n\nvar _privateKeys;\nvar PrivateKeyVault = class {\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options = {}) {\n    __privateAdd(this, _privateKeys, []);\n    if (options.secret) {\n      __privateSet(this, _privateKeys, [options.secret]);\n    } else {\n      __privateSet(this, _privateKeys, options.accounts || [Wallet.generate().privateKey]);\n    }\n  }\n  serialize() {\n    return {\n      accounts: __privateGet(this, _privateKeys)\n    };\n  }\n  getPublicAccount(privateKey) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey\n    };\n  }\n  getAccounts() {\n    return __privateGet(this, _privateKeys).map((pk) => this.getPublicAccount(pk));\n  }\n  addAccount() {\n    const wallet = Wallet.generate();\n    __privateGet(this, _privateKeys).push(wallet.privateKey);\n    return this.getPublicAccount(wallet.privateKey);\n  }\n  exportAccount(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const privateKey = __privateGet(this, _privateKeys).find(\n      (pk) => Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n    if (!privateKey) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n    return privateKey;\n  }\n  getWallet(address) {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n};\n_privateKeys = new WeakMap();\n__publicField(PrivateKeyVault, \"type\", \"privateKey\");\n\n// src/wallet-manager/wallet-manager.ts\nvar ERROR_MESSAGES = {\n  invalid_vault_type: \"The provided Vault type is invalid.\",\n  address_not_found: \"No private key found for address the specified wallet address.\",\n  vault_not_found: \"The specified vault was not found.\",\n  wallet_not_unlocked: \"The wallet is currently locked.\",\n  passphrase_not_match: \"The provided passphrase did not match the expected value.\"\n};\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.WALLET_MANAGER_ERROR, message);\n  }\n}\nvar _vaults, _passphrase, _isLocked, _serializeVaults, serializeVaults_fn, _deserializeVaults, deserializeVaults_fn;\nvar _WalletManager = class extends events__WEBPACK_IMPORTED_MODULE_18__.EventEmitter {\n  constructor(options) {\n    super();\n    /**\n     * Serialize all vaults to store\n     *\n     * `This is only accessible from inside the class`\n     */\n    __privateAdd(this, _serializeVaults);\n    /**\n     * Deserialize all vaults to state\n     *\n     * `This is only accessible from inside the class`\n     */\n    __privateAdd(this, _deserializeVaults);\n    /**\n     * Storage\n     *\n     * Persistent encrypted data. `The default storage works only on memory`.\n     */\n    __publicField(this, \"storage\", new MemoryStorage());\n    /* Key name passed to the storage */\n    __publicField(this, \"STORAGE_KEY\", \"WalletManager\");\n    // `This variables are only accessible from inside the class`\n    __privateAdd(this, _vaults, []);\n    __privateAdd(this, _passphrase, \"\");\n    __privateAdd(this, _isLocked, true);\n    this.storage = options?.storage || this.storage;\n  }\n  get isLocked() {\n    return __privateGet(this, _isLocked);\n  }\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault(vaultId) {\n    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = __privateGet(this, _vaults).find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize();\n  }\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults() {\n    return __privateGet(this, _vaults).map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx\n    }));\n  }\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts() {\n    return __privateGet(this, _vaults).flatMap(\n      (vaultState, vaultId) => vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    const vaultState = __privateGet(this, _vaults).find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address) {\n    const ownerAddress = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(address);\n    assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = __privateGet(this, _vaults).find(\n      (vs) => vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options) {\n    await this.loadState();\n    const vaultState = __privateGet(this, _vaults)[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    const account = vaultState.vault.addAccount();\n    await this.saveState();\n    return account;\n  }\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index) {\n    __privateGet(this, _vaults).splice(index, 1);\n    await this.saveState();\n  }\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig) {\n    await this.loadState();\n    const Vault2 = this.getVaultClass(vaultConfig.type);\n    const vault = new Vault2(vaultConfig);\n    __privateSet(this, _vaults, __privateGet(this, _vaults).concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault\n    }));\n    await this.saveState();\n  }\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    __privateSet(this, _isLocked, true);\n    __privateSet(this, _vaults, []);\n    __privateSet(this, _passphrase, \"\");\n    this.emit(\"lock\");\n  }\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase) {\n    __privateSet(this, _passphrase, passphrase);\n    __privateSet(this, _isLocked, false);\n    try {\n      await this.loadState();\n      this.emit(\"unlock\");\n    } catch (err) {\n      await this.lock();\n      throw err;\n    }\n  }\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass, newpass) {\n    const isLocked = __privateGet(this, _isLocked);\n    await this.unlock(oldpass);\n    __privateSet(this, _passphrase, newpass);\n    await this.saveState();\n    await this.loadState();\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.decrypt)(__privateGet(this, _passphrase), JSON.parse(data));\n      __privateSet(this, _vaults, __privateMethod(this, _deserializeVaults, deserializeVaults_fn).call(this, state.vaults));\n    }\n  }\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  async saveState() {\n    await assert(!__privateGet(this, _isLocked), ERROR_MESSAGES.wallet_not_unlocked);\n    const encryptedData = await (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.encrypt)(__privateGet(this, _passphrase), {\n      vaults: __privateMethod(this, _serializeVaults, serializeVaults_fn).call(this, __privateGet(this, _vaults))\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit(\"update\");\n  }\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  getVaultClass(type) {\n    const VaultClass = _WalletManager.Vaults.find((v) => v.type === type);\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n    return VaultClass;\n  }\n};\nvar WalletManager = _WalletManager;\n_vaults = new WeakMap();\n_passphrase = new WeakMap();\n_isLocked = new WeakMap();\n_serializeVaults = new WeakSet();\nserializeVaults_fn = function(vaults) {\n  return vaults.map(({ title, type, vault }) => ({\n    title,\n    type,\n    data: vault.serialize()\n  }));\n};\n_deserializeVaults = new WeakSet();\ndeserializeVaults_fn = function(vaults) {\n  return vaults.map(({ title, type, data: vaultConfig }) => {\n    const VaultClass = this.getVaultClass(type);\n    return {\n      title,\n      type,\n      vault: new VaultClass(vaultConfig)\n    };\n  });\n};\n/**\n * Vaults\n *\n * Vaults are responsible to store secret keys and return an `Wallet` instance,\n * to interact with the network.\n *\n * Each vault has access to its own state\n *\n */\n__publicField(WalletManager, \"Vaults\", [MnemonicVault, PrivateKeyVault]);\n\n// src/wallet-manager/types.ts\n\nvar Vault = class {\n  constructor(_options) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  serialize() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getAccounts() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  addAccount() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  exportAccount(_address) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n  getWallet(_address) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.NOT_IMPLEMENTED, \"Not implemented.\");\n  }\n};\n__publicField(Vault, \"type\");\nvar StorageAbstract = class {\n};\n\n// src/predicate/predicate.ts\n\n\n\n\n\n// src/utils/deployScriptOrPredicate.ts\n\n\n\n\n// src/utils/predicate-script-loader-instructions.ts\n\n\n\n\nvar BLOB_ID_SIZE = 32;\nvar REG_ADDRESS_OF_DATA_AFTER_CODE = 16;\nvar REG_START_OF_LOADED_CODE = 17;\nvar REG_GENERAL_USE = 18;\nvar WORD_SIZE2 = 8;\nvar DATA_OFFSET_INDEX = 8;\nvar CONFIGURABLE_OFFSET_INDEX = 16;\nfunction getBytecodeDataOffset(bytecode) {\n  const [offset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(bytecode, DATA_OFFSET_INDEX);\n  return offset.toNumber();\n}\nfunction getBytecodeConfigurableOffset(bytecode) {\n  const [offset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(bytecode, CONFIGURABLE_OFFSET_INDEX);\n  return offset.toNumber();\n}\nfunction getBytecodeId(bytecode) {\n  const configurableOffset = getBytecodeConfigurableOffset(bytecode);\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(byteCodeWithoutConfigurableSection);\n}\nfunction getLegacyBlobId(bytecode) {\n  const dataOffset = getBytecodeDataOffset(bytecode);\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataOffset);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.sha256)(byteCodeWithoutDataSection);\n}\nfunction getPredicateScriptLoaderInstructions(originalBinary, blobId) {\n  const { RegId, Instruction } = /*#__PURE__*/ (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16___namespace_cache || (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16___namespace_cache = __webpack_require__.t(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__, 2)));\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n  const getInstructions = (numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE2),\n    // load the data section of the executable\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.jmp(REG_START_OF_LOADED_CODE)\n  ];\n  const getInstructionsNoDataSection = (numOfInstructions2) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions2 * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_16__.jmp(REG_START_OF_LOADED_CODE)\n  ];\n  const offset = getBytecodeConfigurableOffset(originalBinary);\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n  const configurableSection = originalBinary.slice(offset);\n  if (configurableSection.length > 0) {\n    const numOfInstructions2 = getInstructions(0).length;\n    if (numOfInstructions2 > 65535) {\n      throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n    }\n    const instructionBytes2 = new Uint8Array(\n      getInstructions(numOfInstructions2).flatMap(\n        (instruction) => Array.from(instruction.to_bytes())\n      )\n    );\n    const blobBytes2 = new Uint8Array(blobId);\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(configurableSection.length), false);\n    const loaderBytecode2 = new Uint8Array([\n      ...instructionBytes2,\n      ...blobBytes2,\n      ...dataSectionLenBytes\n    ]);\n    return {\n      loaderBytecode: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([loaderBytecode2, configurableSection]),\n      blobOffset: loaderBytecode2.length\n    };\n  }\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error(\"Too many instructions, exceeding u16::MAX.\");\n  }\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap(\n      (instruction) => Array.from(instruction.to_bytes())\n    )\n  );\n  const blobBytes = new Uint8Array(blobId);\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n  return { loaderBytecode };\n}\n\n// src/utils/deployScriptOrPredicate.ts\nasync function fundBlobTx(deployer, blobTxRequest) {\n  let totalCost = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_4__.bn)(0);\n  const chainInfo = await deployer.provider.getChain();\n  const gasPrice = await deployer.provider.estimateGasPrice(10);\n  const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n  const minGas = blobTxRequest.calculateMinGas(chainInfo);\n  const minFee = calculateGasFee({\n    gasPrice,\n    gas: minGas,\n    priceFactor,\n    tip: blobTxRequest.tip\n  }).add(1);\n  totalCost = totalCost.add(minFee);\n  if (totalCost.gt(await deployer.getBalance())) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.FUNDS_TOO_LOW, \"Insufficient balance to deploy predicate.\");\n  }\n  const txCost = await deployer.getTransactionCost(blobTxRequest);\n  blobTxRequest.maxFee = txCost.maxFee;\n  return deployer.fund(blobTxRequest, txCost);\n}\nfunction adjustConfigurableOffsets(jsonAbi, configurableOffsetDiff) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables = [];\n  readOnlyConfigurables.forEach((config) => {\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables };\n}\nasync function deployScriptOrPredicate({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback\n}) {\n  const blobId = getBytecodeId((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode));\n  const configurableOffset = getBytecodeConfigurableOffset((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode));\n  const byteCodeWithoutConfigurableSection = bytecode.slice(0, configurableOffset);\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutConfigurableSection]\n  });\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode),\n    (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(blobId)\n  );\n  const newConfigurableOffsetDiff = byteCodeWithoutConfigurableSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, newConfigurableOffsetDiff);\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: () => Promise.resolve(loaderInstance),\n      blobId\n    };\n  }\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n  const waitForResult = async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n      if (result.status !== \"success\" /* success */) {\n        throw new Error();\n      }\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy predicate chunk\");\n    }\n    return loaderInstance;\n  };\n  return {\n    waitForResult,\n    blobId\n  };\n}\n\n// src/predicate/utils/getPredicateRoot.ts\n\n\n\nvar getPredicateRoot = (bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode);\n  const chunks = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.chunkAndPadBytes)(bytes, chunkSize);\n  const codeRoot = (0,_fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_19__.calcRoot)(chunks.map((c) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(c)));\n  const predicateRoot = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_14__.hash)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.concat)([\"0x4655454C\", codeRoot]));\n  return predicateRoot;\n};\n\n// src/predicate/predicate.ts\nvar Predicate = class extends Account {\n  bytes;\n  predicateData = [];\n  interface;\n  initialBytecode;\n  configurableConstants;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants\n  }) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_1__.Address(getPredicateRoot(predicateBytes));\n    super(address, provider);\n    this.initialBytecode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== void 0 && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData(transactionRequestLike) {\n    const request2 = transactionRequestify(transactionRequestLike);\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request2);\n    if (placeholderIndex !== -1) {\n      request2.removeWitness(placeholderIndex);\n    }\n    request2.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        input.predicate = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes);\n        input.predicateData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData());\n        input.witnessIndex = 0;\n      }\n    });\n    return request2;\n  }\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  sendTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  simulateTransaction(transactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n  getPredicateData() {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(overrides = {}) {\n    return new Predicate({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants\n    });\n  }\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  static processPredicateData(bytes, jsonAbi, configurableConstants) {\n    let predicateBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.arrayify)(bytes);\n    const abiInterface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(jsonAbi);\n    if (abiInterface.functions.main === void 0) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface\n    };\n  }\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(quantities, excludedIds) {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      excludedIds\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes),\n      predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData())\n    }));\n  }\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins) {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.bytes),\n      predicateData: (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_6__.hexlify)(this.getPredicateData())\n    }));\n  }\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  static setConfigurableConstants(bytes, configurableConstants, abiInterface) {\n    const mutatedBytes = bytes;\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n          \"Predicate has no configurable constants to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n        const { offset } = abiInterface.configurables[key];\n        const encoded = abiInterface.encodeConfigurable(key, value);\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${err.message}.`\n      );\n    }\n    return mutatedBytes;\n  }\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  getIndexFromPlaceholderWitness(request2) {\n    const predicateInputs = request2.inputs.filter(isRequestInputResource).filter((input) => isRequestInputResourceFromOwner(input, this.address));\n    let index = -1;\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n      if (!allInputsAreEmpty) {\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n    return index;\n  }\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy(account) {\n    return deployScriptOrPredicate({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) => new Predicate({\n        bytecode: loaderBytecode,\n        abi: newAbi,\n        provider: this.provider,\n        data: this.predicateData\n      })\n    });\n  }\n};\n\n// src/connectors/fuel.ts\n\n\n// src/connectors/fuel-connector.ts\n\n\n\n// src/connectors/types/connector-types.ts\nvar FuelConnectorMethods = /* @__PURE__ */ ((FuelConnectorMethods2) => {\n  FuelConnectorMethods2[\"ping\"] = \"ping\";\n  FuelConnectorMethods2[\"version\"] = \"version\";\n  FuelConnectorMethods2[\"connect\"] = \"connect\";\n  FuelConnectorMethods2[\"disconnect\"] = \"disconnect\";\n  FuelConnectorMethods2[\"isConnected\"] = \"isConnected\";\n  FuelConnectorMethods2[\"accounts\"] = \"accounts\";\n  FuelConnectorMethods2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorMethods2[\"signMessage\"] = \"signMessage\";\n  FuelConnectorMethods2[\"sendTransaction\"] = \"sendTransaction\";\n  FuelConnectorMethods2[\"assets\"] = \"assets\";\n  FuelConnectorMethods2[\"addAsset\"] = \"addAsset\";\n  FuelConnectorMethods2[\"addAssets\"] = \"addAssets\";\n  FuelConnectorMethods2[\"networks\"] = \"networks\";\n  FuelConnectorMethods2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorMethods2[\"addNetwork\"] = \"addNetwork\";\n  FuelConnectorMethods2[\"selectNetwork\"] = \"selectNetwork\";\n  FuelConnectorMethods2[\"addABI\"] = \"addABI\";\n  FuelConnectorMethods2[\"getABI\"] = \"getABI\";\n  FuelConnectorMethods2[\"hasABI\"] = \"hasABI\";\n  return FuelConnectorMethods2;\n})(FuelConnectorMethods || {});\nvar FuelConnectorEventTypes = /* @__PURE__ */ ((FuelConnectorEventTypes2) => {\n  FuelConnectorEventTypes2[\"connectors\"] = \"connectors\";\n  FuelConnectorEventTypes2[\"currentConnector\"] = \"currentConnector\";\n  FuelConnectorEventTypes2[\"connection\"] = \"connection\";\n  FuelConnectorEventTypes2[\"accounts\"] = \"accounts\";\n  FuelConnectorEventTypes2[\"currentAccount\"] = \"currentAccount\";\n  FuelConnectorEventTypes2[\"networks\"] = \"networks\";\n  FuelConnectorEventTypes2[\"currentNetwork\"] = \"currentNetwork\";\n  FuelConnectorEventTypes2[\"assets\"] = \"assets\";\n  FuelConnectorEventTypes2[\"abis\"] = \"abis\";\n  return FuelConnectorEventTypes2;\n})(FuelConnectorEventTypes || {});\nvar FuelConnectorEventType = \"FuelConnector\";\n\n// src/connectors/types/local-storage.ts\nvar LocalStorage = class {\n  storage;\n  constructor(localStorage) {\n    this.storage = localStorage;\n  }\n  async setItem(key, value) {\n    this.storage.setItem(key, value);\n  }\n  async getItem(key) {\n    return this.storage.getItem(key);\n  }\n  async removeItem(key) {\n    this.storage.removeItem(key);\n  }\n  async clear() {\n    this.storage.clear();\n  }\n};\n\n// src/connectors/fuel-connector.ts\nvar FuelConnector = class extends events__WEBPACK_IMPORTED_MODULE_18__.EventEmitter {\n  name = \"\";\n  metadata = {};\n  connected = false;\n  installed = false;\n  external = true;\n  events = FuelConnectorEventTypes;\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address, _message) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address, _transaction) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id\n   */\n  async sendTransaction(_address, _transaction, _params) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork() {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId, _abi) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.NOT_IMPLEMENTED, \"Method not implemented.\");\n  }\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  on(eventName, listener) {\n    super.on(eventName, listener);\n    return this;\n  }\n};\n\n// src/connectors/utils/cache.ts\nfunction cacheFor(fn, { cache: cache2, cacheTime, key }) {\n  return async (...args) => {\n    if (cache2[key] && cache2[key]?.value) {\n      return cache2[key]?.value;\n    }\n    clearTimeout(cache2[key]?.timeout);\n    const result = await fn(...args);\n    cache2[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache2[key] = null;\n        }, cacheTime)\n      ),\n      value: result\n    };\n    return result;\n  };\n}\n\n// src/connectors/utils/dispatch-fuel-connector-event.ts\nfunction dispatchFuelConnectorEvent(connector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector\n    })\n  );\n}\n\n// src/connectors/utils/promises.ts\n\nfunction deferPromise() {\n  const defer = {};\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n  return defer;\n}\nasync function withTimeout(promise, timeout = 1050) {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError.CODES.TIMEOUT_EXCEEDED, \"Promise timed out\"));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]);\n}\n\n// src/connectors/fuel.ts\nvar HAS_CONNECTOR_TIMEOUT = 2e3;\nvar PING_CACHE_TIME = 5e3;\nvar { warn } = console;\nvar _Fuel = class extends FuelConnector {\n  _storage = null;\n  _connectors = [];\n  _targetObject = null;\n  _unsubscribes = [];\n  _targetUnsubscribe = () => {\n  };\n  _pingCache = {};\n  _currentConnector;\n  _initializationPromise = null;\n  constructor(config = _Fuel.defaultConfig) {\n    super();\n    this.setMaxListeners(1e3);\n    this._connectors = config.connectors ?? [];\n    this._targetObject = this.getTargetObject(config.targetObject);\n    this._storage = config.storage === void 0 ? this.getStorage() : config.storage;\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n  async initialize() {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Error initializing Fuel Connector\");\n    }\n  }\n  async init() {\n    await this._initializationPromise;\n    return this;\n  }\n  /**\n   * Return the target object to listen for global events.\n   */\n  getTargetObject(targetObject) {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n    if (typeof document !== \"undefined\") {\n      return document;\n    }\n    return null;\n  }\n  /**\n   * Return the storage used.\n   */\n  getStorage() {\n    if (typeof window !== \"undefined\") {\n      return new LocalStorage(window.localStorage);\n    }\n    return void 0;\n  }\n  /**\n   * Setup the default connector from the storage.\n   */\n  async setDefaultConnector() {\n    const connectorName = await this._storage?.getItem(_Fuel.STORAGE_KEY) || this._connectors[0]?.name;\n    if (connectorName) {\n      return this.selectConnector(connectorName, {\n        emitEvents: false\n      });\n    }\n    return void 0;\n  }\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  setupConnectorEvents(events) {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = (...args) => this.emit(event, ...args);\n      currentConnector.on(event, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n  /**\n   * Call method from the current connector.\n   */\n  async callMethod(method, ...args) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method] === \"function\") {\n      return this._currentConnector[method](...args);\n    }\n    return void 0;\n  }\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  setupMethods() {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args) => this.callMethod(method, ...args);\n    });\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  async fetchConnectorStatus(connector) {\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector))\n    ]);\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      connector._latestUpdate = Date.now();\n      connector.installed = ping.status === \"fulfilled\" && ping.value;\n      connector.connected = isConnected.status === \"fulfilled\" && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected\n    };\n  }\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  async fetchConnectorsStatus() {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  async pingConnector(connector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME\n      })();\n    } catch {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Current connector is not available.\");\n    }\n  }\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  setupConnectorListener = () => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = (e) => {\n        this.addConnector(e.detail);\n      };\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {\n    };\n  };\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  addConnector = async (connector) => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    await this.fetchConnectorStatus(connector);\n    this.emit(this.events.connectors, this._connectors);\n    if (!this._currentConnector) {\n      await this.selectConnector(connector.name, {\n        emitEvents: false\n      });\n    }\n  };\n  triggerConnectorEvents = async () => {\n    const [isConnected, networks2, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork()\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks2);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount()\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  };\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = (connector) => this._connectors.find((c) => {\n    const connectorName = typeof connector === \"string\" ? connector : connector.name;\n    return c.name === connectorName || c === connector;\n  }) || null;\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors() {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(connectorName, options = {\n    emitEvents: true\n  }) {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(_Fuel.STORAGE_KEY, connector.name);\n      if (options.emitEvents) {\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector() {\n    return this._currentConnector;\n  }\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector() {\n    if (this._currentConnector) {\n      return true;\n    }\n    const defer = deferPromise();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT).then(() => true).catch(() => false);\n  }\n  async hasWallet() {\n    return this.hasConnector();\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork) {\n    warn(\n      \"getProvider is deprecated and is going to be removed in the future, use getWallet instead.\"\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  async _getProvider(providerOrNetwork) {\n    let provider;\n    if (providerOrNetwork && \"getTransactionResponse\" in providerOrNetwork) {\n      provider = providerOrNetwork;\n    } else if (providerOrNetwork && \"chainId\" in providerOrNetwork && \"url\" in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n    } else {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_PROVIDER, \"Provider is not valid.\");\n    }\n    return provider;\n  }\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(address, providerOrNetwork) {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe() {\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    this.removeAllListeners();\n  }\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean() {\n    await this._storage?.removeItem(_Fuel.STORAGE_KEY);\n  }\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy() {\n    this.unsubscribe();\n    await this.clean();\n  }\n};\nvar Fuel = _Fuel;\n__publicField(Fuel, \"STORAGE_KEY\", \"fuel-current-connector\");\n__publicField(Fuel, \"defaultConfig\", {});\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/account/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/address/dist/configs.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@fuel-ts/address/dist/configs.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmptyRoot: () => (/* binding */ EmptyRoot),\n/* harmony export */   ZeroBytes32: () => (/* binding */ ZeroBytes32)\n/* harmony export */ });\n// src/configs.ts\nvar ZeroBytes32 = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar EmptyRoot = \"0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n\n//# sourceMappingURL=configs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvYWRkcmVzcy9kaXN0L2NvbmZpZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvanVib2lpL0Z1ZWwvQXJjYW5lL25vZGVfbW9kdWxlcy9AZnVlbC10cy9hZGRyZXNzL2Rpc3QvY29uZmlncy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbmZpZ3MudHNcbnZhciBaZXJvQnl0ZXMzMiA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG52YXIgRW1wdHlSb290ID0gXCIweGUzYjBjNDQyOThmYzFjMTQ5YWZiZjRjODk5NmZiOTI0MjdhZTQxZTQ2NDliOTM0Y2E0OTU5OTFiNzg1MmI4NTVcIjtcbmV4cG9ydCB7XG4gIEVtcHR5Um9vdCxcbiAgWmVyb0J5dGVzMzJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWdzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/address/dist/configs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/address/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@fuel-ts/address/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   addressify: () => (/* binding */ addressify),\n/* harmony export */   fromDynamicInputToB256: () => (/* binding */ fromDynamicInputToB256),\n/* harmony export */   fromEvmAddressToB256: () => (/* binding */ fromEvmAddressToB256),\n/* harmony export */   fromPublicKeyToB256: () => (/* binding */ fromPublicKeyToB256),\n/* harmony export */   getRandomB256: () => (/* binding */ getRandomB256),\n/* harmony export */   isAddress: () => (/* binding */ isAddress),\n/* harmony export */   isB256: () => (/* binding */ isB256),\n/* harmony export */   isEvmAddress: () => (/* binding */ isEvmAddress),\n/* harmony export */   isPublicKey: () => (/* binding */ isPublicKey),\n/* harmony export */   normalizeB256: () => (/* binding */ normalizeB256),\n/* harmony export */   padFirst12BytesOfEvmAddress: () => (/* binding */ padFirst12BytesOfEvmAddress),\n/* harmony export */   toB256AddressEvm: () => (/* binding */ toB256AddressEvm)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\");\n// src/address.ts\n\n\n\n\n// src/utils.ts\n\n\n\n\nfunction isB256(address) {\n  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\nfunction isPublicKey(address) {\n  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);\n}\nfunction isEvmAddress(address) {\n  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);\n}\nfunction normalizeB256(address) {\n  return address.toLowerCase();\n}\nfunction isAddress(address) {\n  return \"b256Address\" in address;\n}\nvar addressify = (addressLike) => {\n  if (isAddress(addressLike)) {\n    return addressLike;\n  }\n  if (\"address\" in addressLike && isAddress(addressLike.address)) {\n    return addressLike.address;\n  }\n  if (\"id\" in addressLike && isAddress(addressLike.id)) {\n    return addressLike.id;\n  }\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_ADDRESS, \"Invalid address\");\n};\nvar getRandomB256 = () => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32));\nvar toB256AddressEvm = (b256) => {\n  try {\n    if (!isB256(b256)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);\n    }\n    const evmBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(b256).slice(12);\n    const paddedBytes = new Uint8Array(12).fill(0);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.concat)([paddedBytes, evmBytes]));\n  } catch (error) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.PARSE_FAILED,\n      `Cannot generate EVM Address B256 from: ${b256}.`\n    );\n  }\n};\nvar padFirst12BytesOfEvmAddress = (address) => {\n  if (!isEvmAddress(address)) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_EVM_ADDRESS, \"Invalid EVM address format.\");\n  }\n  return address.replace(\"0x\", \"0x000000000000000000000000\");\n};\nvar fromEvmAddressToB256 = (address) => padFirst12BytesOfEvmAddress(address);\nvar fromPublicKeyToB256 = (publicKey) => {\n  if (!isPublicKey(publicKey)) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);\n  }\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_3__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(publicKey)));\n};\nvar fromDynamicInputToB256 = (address) => {\n  if (typeof address !== \"string\" && \"toB256\" in address) {\n    return address.toB256();\n  }\n  if (isB256(address)) {\n    return address;\n  }\n  if (isPublicKey(address)) {\n    return fromPublicKeyToB256(address);\n  }\n  if (isEvmAddress(address)) {\n    return fromEvmAddressToB256(address);\n  }\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n    _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.PARSE_FAILED,\n    `Unknown address format: only 'B256', 'Public Key (512)', or 'EVM Address' are supported.`\n  );\n};\n\n// src/address.ts\nvar Address = class {\n  // #region address-2\n  b256Address;\n  // #endregion address-2\n  /**\n   * @param address - A B256 address, public key, EVM address, or Address instance\n   */\n  constructor(address) {\n    const b256Address = fromDynamicInputToB256(address);\n    this.b256Address = normalizeB256(b256Address);\n  }\n  /**\n   * Takes an B256 Address and returns back an checksum address.\n   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.\n   *\n   * @returns A new `ChecksumAddress` instance\n   */\n  toChecksum() {\n    return Address.toChecksum(this.b256Address);\n  }\n  /**\n   * Returns the `b256Address` property\n   */\n  toAddress() {\n    return this.b256Address;\n  }\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toB256() {\n    return this.b256Address;\n  }\n  /**\n   * Returns the B256 hash address as a Uint8Array\n   *\n   * @returns The B256 address as a Uint8Array\n   */\n  toBytes() {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(this.b256Address);\n  }\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toHexString() {\n    return this.toB256();\n  }\n  /**\n   * returns the address `checksum` as a string\n   *\n   * @returns The `b256Address` property as a string\n   */\n  toString() {\n    return this.toChecksum();\n  }\n  /**\n   * Converts and returns the `b256Address` property as a string\n   * @returns The `b256Address` property as a JSON string\n   */\n  toJSON() {\n    return this.b256Address;\n  }\n  /**\n   * Converts to an EVM address\n   *\n   * @returns an {@link EvmAddress | `EvmAddress`} representation of the address\n   */\n  toEvmAddress() {\n    return {\n      bits: toB256AddressEvm(this.b256Address)\n    };\n  }\n  /**\n   * Wraps the B256 property and returns as an `AssetId`.\n   * @returns The B256 property as an {@link AssetId | `AssetId`}\n   */\n  toAssetId() {\n    return {\n      bits: this.b256Address\n    };\n  }\n  /**\n   * Wraps the B256 address `checksum` and returns it as a string\n   * @returns The B256 address `checksum` as a string\n   */\n  valueOf() {\n    return this.toChecksum();\n  }\n  /**\n   * Compares this the `b256Address` property to another for direct equality\n   * @param other - Another address to compare against\n   * @returns The equality of the comparison\n   */\n  equals(other) {\n    return this.toChecksum() === other.toChecksum();\n  }\n  /**\n   * Takes a Public Key, hashes it, and creates an `Address`\n   *\n   * @param publicKey - A wallets public key\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromPublicKey(publicKey) {\n    const b256Address = fromPublicKeyToB256(publicKey);\n    return new Address(b256Address);\n  }\n  /**\n   * Takes a B256 Address and creates an `Address`\n   *\n   * @param b256Address - A b256 hash\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromB256(b256Address) {\n    if (!isB256(b256Address)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${b256Address}.`\n      );\n    }\n    return new Address(b256Address);\n  }\n  /**\n   * Creates an `Address` with a randomized `b256Address` property\n   *\n   * @returns A new `Address` instance\n   */\n  static fromRandom() {\n    return new Address(getRandomB256());\n  }\n  /**\n   * Takes an ambiguous string and attempts to create an `Address`\n   *\n   * @param address - An ambiguous string\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromString(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes an ambiguous string or address and creates an `Address`\n   *\n   * @returns a new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromAddressOrString(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes a dynamic string or `Address` and creates an `Address`\n   *\n   * @param addressId - A string containing B256, or Public Key\n   * @throws Error - Unknown address if the format is not recognised\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromDynamicInput(address) {\n    return new Address(address);\n  }\n  /**\n   * Takes an Evm Address and returns back an `Address`\n   *\n   * @returns A new `Address` instance\n   *\n   * @deprecated Use `new Address` instead\n   */\n  static fromEvmAddress(evmAddress) {\n    if (!isEvmAddress(evmAddress)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_EVM_ADDRESS,\n        `Invalid Evm Address: ${evmAddress}.`\n      );\n    }\n    return new Address(evmAddress);\n  }\n  /**\n   * Takes an ChecksumAddress and validates if it is a valid checksum address.\n   *\n   * @returns A `boolean` instance indicating if the address is valid.\n   */\n  static isChecksumValid(address) {\n    let addressParsed = address;\n    if (!address.startsWith(\"0x\")) {\n      addressParsed = `0x${address}`;\n    }\n    if (addressParsed.trim().length !== 66) {\n      return false;\n    }\n    return Address.toChecksum((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)(addressParsed)) === addressParsed;\n  }\n  /** @hidden */\n  static toChecksum(address) {\n    if (!isB256(address)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${address}.`\n      );\n    }\n    const addressHex = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)(address).toLowerCase().slice(2);\n    const checksum = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_3__.sha256)(addressHex);\n    let ret = \"0x\";\n    for (let i = 0; i < 32; ++i) {\n      const byte = checksum[i];\n      const ha = addressHex.charAt(i * 2);\n      const hb = addressHex.charAt(i * 2 + 1);\n      ret += (byte & 240) >= 128 ? ha.toUpperCase() : ha;\n      ret += (byte & 15) >= 8 ? hb.toUpperCase() : hb;\n    }\n    return ret;\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/address/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/contract/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@fuel-ts/contract/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   getContractId: () => (/* binding */ getContractId),\n/* harmony export */   getContractRoot: () => (/* binding */ getContractRoot),\n/* harmony export */   getContractStorageRoot: () => (/* binding */ getContractStorageRoot),\n/* harmony export */   hexlifyWithPrefix: () => (/* binding */ hexlifyWithPrefix)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/account */ \"(ssr)/./node_modules/@fuel-ts/account/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuel-ts/program */ \"(ssr)/./node_modules/@fuel-ts/program/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @fuel-ts/merkle */ \"(ssr)/./node_modules/@fuel-ts/merkle/dist/index.mjs\");\n// src/contract-factory.ts\n\n\n\n\n\n\n\n\n\n// src/loader/loader-script.ts\n\n\n\n\nvar getLoaderInstructions = (blobIds) => {\n  const { RegId, Instruction } = /*#__PURE__*/ (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache || (_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8___namespace_cache = __webpack_require__.t(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__, 2)));\n  const numberOfInstructions = 12;\n  const numberOfBlobs = blobIds.length;\n  const blobIdSize = _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BYTES_32;\n  const blobIdBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)(blobIds.map((b) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(b)));\n  const instructionBytes = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.InstructionSet(\n    // 1. load the blob contents into memory\n    // find the start of the hardcoded blob ids, which are located after the code ends\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.move_(16, RegId.pc().to_u8()),\n    // 0x10 to hold the address of the current blob id\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.addi(16, 16, numberOfInstructions * Instruction.size()),\n    // The contract is going to be loaded from the current value of SP onwards, save\n    // the location into 0x16 so we can jump into it later on\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.move_(22, RegId.sp().to_u8()),\n    // loop counter\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.movi(19, numberOfBlobs),\n    // LOOP starts here\n    // 0x11 to hold the size of the current blob\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.bsiz(17, 16),\n    // push the blob contents onto the stack\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.ldc(16, 0, 17, 1),\n    // move on to the next blob\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.addi(16, 16, blobIdSize),\n    // decrement the loop counter\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.subi(19, 19, 1),\n    // Jump backwards (3+1) instructions if the counter has not reached 0\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.jnzb(19, RegId.zero().to_u8(), 3),\n    // Jump into the memory where the contract is loaded\n    // what follows is called _jmp_mem by the sway compiler\n    // subtract the address contained in IS because jmp will add it back\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.sub(22, 22, RegId.is().to_u8()),\n    // jmp will multiply by 4 so we need to divide to cancel that out\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.divi(22, 22, 4),\n    // jump to the start of the contract we loaded\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_8__.jmp(22)\n  ).toBytes();\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([instructionBytes, blobIdBytes]);\n};\n\n// src/loader/utils.ts\n\n\nvar getContractChunks = (bytecode, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0, index = 0; offset < bytecode.length; offset += chunkSize, index++) {\n    let chunk = bytecode.slice(offset, offset + chunkSize);\n    let length = chunk.length;\n    if (length % _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE !== 0) {\n      chunk = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([chunk, new Uint8Array(chunkSize - chunk.length)]);\n      length = chunk.length;\n    }\n    chunks.push({ id: index, size: length, bytecode: chunk });\n  }\n  return chunks;\n};\n\n// src/util.ts\n\n\n\nvar getContractRoot = (bytecode) => {\n  const chunkSize = 16 * 1024;\n  const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode);\n  const chunks = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.chunkAndPadBytes)(bytes, chunkSize);\n  return (0,_fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__.calcRoot)(chunks.map((c) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.hexlify)(c)));\n};\nvar getContractStorageRoot = (storageSlots) => {\n  const tree = new _fuel_ts_merkle__WEBPACK_IMPORTED_MODULE_9__.SparseMerkleTree();\n  storageSlots.forEach(({ key, value }) => tree.update((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)(key), value));\n  return tree.root;\n};\nvar getContractId = (bytecode, salt, stateRoot) => {\n  const root = getContractRoot((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode));\n  const contractId = (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.concat)([\"0x4655454C\", salt, root, stateRoot]));\n  return contractId;\n};\nvar hexlifyWithPrefix = (value) => (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.hexlify)(value.startsWith(\"0x\") ? value : `0x${value}`);\n\n// src/contract-factory.ts\nvar CHUNK_SIZE_MULTIPLIER = 0.95;\nvar ContractFactory = class {\n  bytecode;\n  interface;\n  provider;\n  account;\n  storageSlots;\n  /**\n   * Create a ContractFactory instance.\n   *\n   * @param bytecode - The bytecode of the contract.\n   * @param abi - The contract's ABI (Application Binary Interface).\n   * @param accountOrProvider - An account or provider to be associated with the factory.\n   */\n  constructor(bytecode, abi, accountOrProvider = null, storageSlots = []) {\n    this.bytecode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(bytecode);\n    if (abi instanceof _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n    }\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    this.storageSlots = storageSlots;\n  }\n  /**\n   * Connect the factory to a provider.\n   *\n   * @param provider - The provider to be associated with the factory.\n   * @returns A new ContractFactory instance.\n   */\n  connect(provider) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n  /**\n   * Create a transaction request to deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns The CreateTransactionRequest object for deploying the contract.\n   */\n  createTransactionRequest(deployOptions) {\n    const storageSlots = (deployOptions?.storageSlots ?? []).concat(this.storageSlots).map(({ key, value }) => ({\n      key: hexlifyWithPrefix(key),\n      value: hexlifyWithPrefix(value)\n    })).filter((el, index, self) => self.findIndex((s) => s.key === el.key) === index).sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n    const options = {\n      salt: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32),\n      ...deployOptions ?? {},\n      storageSlots\n    };\n    if (!this.provider) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MISSING_PROVIDER,\n        \"Cannot create transaction request without provider\"\n      );\n    }\n    const bytecode = deployOptions?.bytecode || this.bytecode;\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(bytecode, options.salt, stateRoot);\n    const transactionRequest = new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.CreateTransactionRequest({\n      bytecodeWitnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n    transactionRequest.addContractCreatedOutput(contractId, stateRoot);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Takes a transaction request, estimates it and funds it.\n   *\n   * @param request - the request to fund.\n   * @param options - options for funding the request.\n   * @returns a funded transaction request.\n   */\n  async fundTransactionRequest(request, options = {}) {\n    const account = this.getAccount();\n    const { maxFee: setMaxFee } = options;\n    const txCost = await account.getTransactionCost(request);\n    if ((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.isDefined)(setMaxFee)) {\n      if (txCost.maxFee.gt(setMaxFee)) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.MAX_FEE_TOO_LOW,\n          `Max fee '${options.maxFee}' is lower than the required: '${txCost.maxFee}'.`\n        );\n      }\n    } else {\n      request.maxFee = txCost.maxFee;\n    }\n    await account.fund(request, txCost);\n    return request;\n  }\n  /**\n   * Deploy a contract of any length with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deploy(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    return this.bytecode.length > maxContractSize ? this.deployAsBlobTx(deployOptions) : this.deployAsCreateTx(deployOptions);\n  }\n  /**\n   * Deploy a contract with the specified options.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsCreateTx(deployOptions = {}) {\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const maxContractSize = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    if (this.bytecode.length > maxContractSize) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONTRACT_SIZE_EXCEEDS_LIMIT,\n        \"Contract bytecode is too large. Please use `deployAsBlobTx` instead.\"\n      );\n    }\n    const { contractId, transactionRequest } = await this.prepareDeploy(deployOptions);\n    const transactionResponse = await account.sendTransaction(transactionRequest);\n    const waitForResult = async () => {\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    };\n    return {\n      contractId,\n      waitForTransactionId: () => Promise.resolve(transactionResponse.id),\n      waitForResult\n    };\n  }\n  /**\n   * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.\n   *\n   * @param deployOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployAsBlobTx(deployOptions = {\n    chunkSizeMultiplier: CHUNK_SIZE_MULTIPLIER\n  }) {\n    const account = this.getAccount();\n    const { configurableConstants, chunkSizeMultiplier } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const chunkSize = await this.getMaxChunkSize(deployOptions, chunkSizeMultiplier);\n    const chunks = getContractChunks((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(this.bytecode), chunkSize).map((c) => {\n      const transactionRequest = this.blobTransactionRequest({\n        ...deployOptions,\n        bytecode: c.bytecode\n      });\n      return {\n        ...c,\n        transactionRequest,\n        blobId: transactionRequest.blobId\n      };\n    });\n    const blobIds = chunks.map(({ blobId }) => blobId);\n    const loaderBytecode = getLoaderInstructions(blobIds);\n    const { contractId, transactionRequest: createRequest } = this.createTransactionRequest({\n      bytecode: loaderBytecode,\n      ...deployOptions\n    });\n    const uniqueBlobIds = [...new Set(blobIds)];\n    const uploadedBlobIds = await account.provider.getBlobs(uniqueBlobIds);\n    const blobIdsToUpload = uniqueBlobIds.filter((id) => !uploadedBlobIds.includes(id));\n    let totalCost = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__.bn)(0);\n    const chainInfo = await account.provider.getChain();\n    const gasPrice = await account.provider.estimateGasPrice(10);\n    const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n    for (const { transactionRequest, blobId } of chunks) {\n      if (blobIdsToUpload.includes(blobId)) {\n        const minGas = transactionRequest.calculateMinGas(chainInfo);\n        const minFee = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.calculateGasFee)({\n          gasPrice,\n          gas: minGas,\n          priceFactor,\n          tip: transactionRequest.tip\n        }).add(1);\n        totalCost = totalCost.add(minFee);\n      }\n      const createMinGas = createRequest.calculateMinGas(chainInfo);\n      const createMinFee = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.calculateGasFee)({\n        gasPrice,\n        gas: createMinGas,\n        priceFactor,\n        tip: createRequest.tip\n      }).add(1);\n      totalCost = totalCost.add(createMinFee);\n    }\n    if (totalCost.gt(await account.getBalance())) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.FUNDS_TOO_LOW, \"Insufficient balance to deploy contract.\");\n    }\n    let txIdResolver;\n    const txIdPromise = new Promise((resolve) => {\n      txIdResolver = resolve;\n    });\n    const waitForResult = async () => {\n      const uploadedBlobs = [];\n      for (const { blobId, transactionRequest } of chunks) {\n        if (!uploadedBlobs.includes(blobId) && blobIdsToUpload.includes(blobId)) {\n          const fundedBlobRequest = await this.fundTransactionRequest(\n            transactionRequest,\n            deployOptions\n          );\n          let result;\n          try {\n            const blobTx = await account.sendTransaction(fundedBlobRequest);\n            result = await blobTx.waitForResult();\n          } catch (err) {\n            if (err.message.indexOf(`BlobId is already taken ${blobId}`) > -1) {\n              uploadedBlobs.push(blobId);\n              continue;\n            }\n            throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          if (!result.status || result.status !== _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.TransactionStatus.success) {\n            throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.TRANSACTION_FAILED, \"Failed to deploy contract chunk\");\n          }\n          uploadedBlobs.push(blobId);\n        }\n      }\n      await this.fundTransactionRequest(createRequest, deployOptions);\n      txIdResolver(createRequest.getTransactionId(await account.provider.getChainId()));\n      const transactionResponse = await account.sendTransaction(createRequest);\n      const transactionResult = await transactionResponse.waitForResult();\n      const contract = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_6__.Contract(contractId, this.interface, account);\n      return { contract, transactionResult };\n    };\n    const waitForTransactionId = () => txIdPromise;\n    return { waitForResult, contractId, waitForTransactionId };\n  }\n  /**\n   * Set configurable constants of the contract with the specified values.\n   *\n   * @param configurableConstants - An object containing configurable names and their values.\n   */\n  setConfigurableConstants(configurableConstants) {\n    try {\n      const hasConfigurable = Object.keys(this.interface.configurables).length;\n      if (!hasConfigurable) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n          \"Contract does not have configurables to be set\"\n        );\n      }\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `Contract does not have a configurable named: '${key}'`\n          );\n        }\n        const { offset } = this.interface.configurables[key];\n        const encoded = this.interface.encodeConfigurable(key, value);\n        const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_7__.arrayify)(this.bytecode);\n        bytes.set(encoded, offset);\n        this.bytecode = bytes;\n      });\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants on contract: ${err.message}.`\n      );\n    }\n  }\n  getAccount() {\n    if (!this.account) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.ACCOUNT_REQUIRED, \"Account not assigned to contract.\");\n    }\n    return this.account;\n  }\n  async prepareDeploy(deployOptions) {\n    const { configurableConstants } = deployOptions;\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n    const { contractId, transactionRequest } = this.createTransactionRequest(deployOptions);\n    await this.fundTransactionRequest(transactionRequest, deployOptions);\n    return {\n      contractId,\n      transactionRequest\n    };\n  }\n  /**\n   * Create a blob transaction request, used for deploying contract chunks.\n   *\n   * @param options - options for creating a blob transaction request.\n   * @returns a populated BlobTransactionRequest.\n   */\n  blobTransactionRequest(options) {\n    const { bytecode } = options;\n    return new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.BlobTransactionRequest({\n      blobId: (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_4__.hash)(bytecode),\n      witnessIndex: 0,\n      witnesses: [bytecode],\n      ...options\n    });\n  }\n  /**\n   * Get the maximum chunk size for deploying a contract by chunks.\n   */\n  async getMaxChunkSize(deployOptions, chunkSizeMultiplier = CHUNK_SIZE_MULTIPLIER) {\n    if (chunkSizeMultiplier < 0 || chunkSizeMultiplier > 1) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorCode.INVALID_CHUNK_SIZE_MULTIPLIER,\n        \"Chunk size multiplier must be between 0 and 1\"\n      );\n    }\n    const account = this.getAccount();\n    const { consensusParameters } = await account.provider.getChain();\n    const contractSizeLimit = consensusParameters.contractParameters.contractMaxSize.toNumber();\n    const transactionSizeLimit = consensusParameters.txParameters.maxSize.toNumber();\n    const maxLimit = 64e3;\n    const chainLimit = transactionSizeLimit < contractSizeLimit ? transactionSizeLimit : contractSizeLimit;\n    const sizeLimit = chainLimit < maxLimit ? chainLimit : maxLimit;\n    const blobTx = this.blobTransactionRequest({\n      ...deployOptions,\n      bytecode: (0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(32)\n    }).addResources(\n      account.generateFakeResources([\n        { assetId: await account.provider.getBaseAssetId(), amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_5__.bn)(1) }\n      ])\n    );\n    const maxChunkSize = (sizeLimit - blobTx.byteLength() - _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE) * chunkSizeMultiplier;\n    return Math.round(maxChunkSize / _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE) * _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.WORD_SIZE;\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/contract/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/crypto/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferFromString: () => (/* binding */ bufferFromString2),\n/* harmony export */   computeHmac: () => (/* binding */ computeHmac2),\n/* harmony export */   decrypt: () => (/* binding */ decrypt2),\n/* harmony export */   decryptJsonWalletData: () => (/* binding */ decryptJsonWalletData2),\n/* harmony export */   encrypt: () => (/* binding */ encrypt2),\n/* harmony export */   encryptJsonWalletData: () => (/* binding */ encryptJsonWalletData2),\n/* harmony export */   keccak256: () => (/* binding */ keccak2562),\n/* harmony export */   keyFromPassword: () => (/* binding */ keyFromPassword2),\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf22),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes2),\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID2),\n/* harmony export */   ripemd160: () => (/* binding */ ripemd1602),\n/* harmony export */   scrypt: () => (/* binding */ scrypt2),\n/* harmony export */   stringFromBuffer: () => (/* binding */ stringFromBuffer2)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(ssr)/./node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(ssr)/./node_modules/@noble/hashes/esm/ripemd160.js\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! crypto */ \"crypto\");\n// src/shared/scrypt.ts\n\nvar scrypt = (params) => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_0__.scrypt)(password, salt, { N: n, r, p, dkLen: dklen });\n  return derivedKey;\n};\n\n// src/shared/keccak256.ts\n\nvar keccak256 = (data) => (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_1__.keccak_256)(data);\n\n// src/shared/ripemd160.ts\n\n\nfunction ripemd160(_data) {\n  const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_data, \"data\");\n  return (0,_noble_hashes_ripemd160__WEBPACK_IMPORTED_MODULE_3__.ripemd160)(data);\n}\n\n// src/node/aes-ctr.ts\n\n\n\n\n// src/node/bufferFromString.ts\nvar bufferFromString = (string, encoding = \"base64\") => Uint8Array.from(Buffer.from(string, encoding));\n\n// src/node/pbkdf2.ts\n\n\nfunction pbkdf2(_password, _salt, iterations, keylen, algo) {\n  const password = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_password, \"password\");\n  const salt = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_salt, \"salt\");\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,crypto__WEBPACK_IMPORTED_MODULE_5__.pbkdf2Sync)(password, salt, iterations, keylen, algo));\n}\n\n// src/node/randomBytes.ts\n\nvar randomBytes = (length) => {\n  const randomValues = Uint8Array.from(crypto__WEBPACK_IMPORTED_MODULE_5__.randomBytes(length));\n  return randomValues;\n};\n\n// src/node/stringFromBuffer.ts\nvar stringFromBuffer = (buffer, encoding = \"base64\") => Buffer.from(buffer).toString(encoding);\n\n// src/node/aes-ctr.ts\nvar ALGORITHM = \"aes-256-ctr\";\nvar keyFromPassword = (password, saltBuffer) => {\n  const passBuffer = bufferFromString(String(password).normalize(\"NFKC\"), \"utf-8\");\n  const key = pbkdf2(passBuffer, saltBuffer, 1e5, 32, \"sha256\");\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(key);\n};\nvar encrypt = async (password, data) => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataBuffer = Uint8Array.from(Buffer.from(JSON.stringify(data), \"utf-8\"));\n  const cipher = await crypto__WEBPACK_IMPORTED_MODULE_5__.createCipheriv(ALGORITHM, secret, iv);\n  let cipherData = cipher.update(dataBuffer);\n  cipherData = Buffer.concat([cipherData, cipher.final()]);\n  return {\n    data: stringFromBuffer(cipherData),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt)\n  };\n};\nvar decrypt = async (password, keystore) => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n  const decipher = await crypto__WEBPACK_IMPORTED_MODULE_5__.createDecipheriv(ALGORITHM, secret, iv);\n  const decrypted = decipher.update(encryptedText);\n  const deBuff = Buffer.concat([decrypted, decipher.final()]);\n  const decryptedData = Buffer.from(deBuff).toString(\"utf-8\");\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_4__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_4__.ErrorCode.INVALID_CREDENTIALS, \"Invalid credentials.\");\n  }\n};\n\n// src/node/encryptJsonWalletData.ts\n\nasync function encryptJsonWalletData(data, key, iv) {\n  const cipher = await crypto__WEBPACK_IMPORTED_MODULE_5__.createCipheriv(\"aes-128-ctr\", key.subarray(0, 16), iv);\n  const encrypted = Buffer.concat([cipher.update(data), cipher.final()]);\n  return new Uint8Array(encrypted);\n}\nasync function decryptJsonWalletData(data, key, iv) {\n  const decipher = crypto__WEBPACK_IMPORTED_MODULE_5__.createDecipheriv(\"aes-128-ctr\", key.subarray(0, 16), iv);\n  const decrypted = await Buffer.concat([decipher.update(data), decipher.final()]);\n  return new Uint8Array(decrypted);\n}\n\n// src/node/hmac.ts\n\n\nfunction computeHmac(algorithm, _key, _data) {\n  const key = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_key, \"key\");\n  const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_data, \"data\");\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,crypto__WEBPACK_IMPORTED_MODULE_5__.createHmac)(algorithm, key).update(data).digest());\n}\n\n// src/node/randomUUID.ts\n\nvar randomUUID = () => (0,crypto__WEBPACK_IMPORTED_MODULE_5__.randomUUID)();\n\n// src/node/index.ts\nvar api = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n  randomUUID\n};\nvar node_default = api;\n\n// src/index.ts\nvar {\n  bufferFromString: bufferFromString2,\n  decrypt: decrypt2,\n  encrypt: encrypt2,\n  keyFromPassword: keyFromPassword2,\n  randomBytes: randomBytes2,\n  stringFromBuffer: stringFromBuffer2,\n  scrypt: scrypt2,\n  keccak256: keccak2562,\n  decryptJsonWalletData: decryptJsonWalletData2,\n  encryptJsonWalletData: encryptJsonWalletData2,\n  computeHmac: computeHmac2,\n  pbkdf2: pbkdf22,\n  ripemd160: ripemd1602,\n  randomUUID: randomUUID2\n} = node_default;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/errors/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FuelError: () => (/* binding */ FuelError)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/versions */ \"(ssr)/./node_modules/@fuel-ts/versions/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/error-codes.ts\nvar ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {\n  ErrorCode2[\"NO_ABIS_FOUND\"] = \"no-abis-found\";\n  ErrorCode2[\"ABI_TYPES_AND_VALUES_MISMATCH\"] = \"abi-types-and-values-mismatch\";\n  ErrorCode2[\"ABI_MAIN_METHOD_MISSING\"] = \"abi-main-method-missing\";\n  ErrorCode2[\"INVALID_COMPONENT\"] = \"invalid-component\";\n  ErrorCode2[\"CONFIGURABLE_NOT_FOUND\"] = \"configurable-not-found\";\n  ErrorCode2[\"TYPE_NOT_FOUND\"] = \"type-not-found\";\n  ErrorCode2[\"LOG_TYPE_NOT_FOUND\"] = \"log-type-not-found\";\n  ErrorCode2[\"TYPE_NOT_SUPPORTED\"] = \"type-not-supported\";\n  ErrorCode2[\"INVALID_DECODE_VALUE\"] = \"invalid-decode-value\";\n  ErrorCode2[\"JSON_ABI_ERROR\"] = \"json-abi-error\";\n  ErrorCode2[\"TYPE_ID_NOT_FOUND\"] = \"type-id-not-found\";\n  ErrorCode2[\"BIN_FILE_NOT_FOUND\"] = \"bin-file-not-found\";\n  ErrorCode2[\"CODER_NOT_FOUND\"] = \"coder-not-found\";\n  ErrorCode2[\"INVALID_DATA\"] = \"invalid-data\";\n  ErrorCode2[\"FUNCTION_NOT_FOUND\"] = \"function-not-found\";\n  ErrorCode2[\"UNSUPPORTED_ENCODING_VERSION\"] = \"unsupported-encoding-version\";\n  ErrorCode2[\"TIMEOUT_EXCEEDED\"] = \"timeout-exceeded\";\n  ErrorCode2[\"CONFIG_FILE_NOT_FOUND\"] = \"config-file-not-found\";\n  ErrorCode2[\"CONFIG_FILE_ALREADY_EXISTS\"] = \"config-file-already-exists\";\n  ErrorCode2[\"WORKSPACE_NOT_DETECTED\"] = \"workspace-not-detected\";\n  ErrorCode2[\"INVALID_ADDRESS\"] = \"invalid-address\";\n  ErrorCode2[\"INVALID_EVM_ADDRESS\"] = \"invalid-evm-address\";\n  ErrorCode2[\"INVALID_B256_ADDRESS\"] = \"invalid-b256-address\";\n  ErrorCode2[\"CHAIN_INFO_CACHE_EMPTY\"] = \"chain-info-cache-empty\";\n  ErrorCode2[\"NODE_INFO_CACHE_EMPTY\"] = \"node-info-cache-empty\";\n  ErrorCode2[\"MISSING_PROVIDER\"] = \"missing-provider\";\n  ErrorCode2[\"INVALID_PROVIDER\"] = \"invalid-provider\";\n  ErrorCode2[\"CONNECTION_REFUSED\"] = \"connection-refused\";\n  ErrorCode2[\"INVALID_URL\"] = \"invalid-url\";\n  ErrorCode2[\"INVALID_PUBLIC_KEY\"] = \"invalid-public-key\";\n  ErrorCode2[\"WALLET_MANAGER_ERROR\"] = \"wallet-manager-error\";\n  ErrorCode2[\"HD_WALLET_ERROR\"] = \"hd-wallet-error\";\n  ErrorCode2[\"MISSING_CONNECTOR\"] = \"missing-connector\";\n  ErrorCode2[\"PARSE_FAILED\"] = \"parse-failed\";\n  ErrorCode2[\"ENCODE_ERROR\"] = \"encode-error\";\n  ErrorCode2[\"DECODE_ERROR\"] = \"decode-error\";\n  ErrorCode2[\"ENV_DEPENDENCY_MISSING\"] = \"env-dependency-missing\";\n  ErrorCode2[\"INVALID_TTL\"] = \"invalid-ttl\";\n  ErrorCode2[\"INVALID_INPUT_PARAMETERS\"] = \"invalid-input-parameters\";\n  ErrorCode2[\"NOT_IMPLEMENTED\"] = \"not-implemented\";\n  ErrorCode2[\"NOT_SUPPORTED\"] = \"not-supported\";\n  ErrorCode2[\"CONVERTING_FAILED\"] = \"converting-error\";\n  ErrorCode2[\"ELEMENT_NOT_FOUND\"] = \"element-not-found\";\n  ErrorCode2[\"MISSING_REQUIRED_PARAMETER\"] = \"missing-required-parameter\";\n  ErrorCode2[\"INVALID_REQUEST\"] = \"invalid-request\";\n  ErrorCode2[\"INVALID_TRANSFER_AMOUNT\"] = \"invalid-transfer-amount\";\n  ErrorCode2[\"NOT_ENOUGH_FUNDS\"] = \"not-enough-funds\";\n  ErrorCode2[\"INVALID_CREDENTIALS\"] = \"invalid-credentials\";\n  ErrorCode2[\"HASHER_LOCKED\"] = \"hasher-locked\";\n  ErrorCode2[\"GAS_PRICE_TOO_LOW\"] = \"gas-price-too-low\";\n  ErrorCode2[\"GAS_LIMIT_TOO_LOW\"] = \"gas-limit-too-low\";\n  ErrorCode2[\"MAX_FEE_TOO_LOW\"] = \"max-fee-too-low\";\n  ErrorCode2[\"TRANSACTION_NOT_FOUND\"] = \"transaction-not-found\";\n  ErrorCode2[\"TRANSACTION_FAILED\"] = \"transaction-failed\";\n  ErrorCode2[\"INVALID_CONFIGURABLE_CONSTANTS\"] = \"invalid-configurable-constants\";\n  ErrorCode2[\"INVALID_TRANSACTION_INPUT\"] = \"invalid-transaction-input\";\n  ErrorCode2[\"INVALID_TRANSACTION_OUTPUT\"] = \"invalid-transaction-output\";\n  ErrorCode2[\"INVALID_TRANSACTION_STATUS\"] = \"invalid-transaction-status\";\n  ErrorCode2[\"UNSUPPORTED_TRANSACTION_TYPE\"] = \"unsupported-transaction-type\";\n  ErrorCode2[\"TRANSACTION_ERROR\"] = \"transaction-error\";\n  ErrorCode2[\"INVALID_POLICY_TYPE\"] = \"invalid-policy-type\";\n  ErrorCode2[\"DUPLICATED_POLICY\"] = \"duplicated-policy\";\n  ErrorCode2[\"TRANSACTION_SQUEEZED_OUT\"] = \"transaction-squeezed-out\";\n  ErrorCode2[\"CONTRACT_SIZE_EXCEEDS_LIMIT\"] = \"contract-size-exceeds-limit\";\n  ErrorCode2[\"INVALID_CHUNK_SIZE_MULTIPLIER\"] = \"invalid-chunk-size-multiplier\";\n  ErrorCode2[\"MAX_INPUTS_EXCEEDED\"] = \"max-inputs-exceeded\";\n  ErrorCode2[\"FUNDS_TOO_LOW\"] = \"funds-too-low\";\n  ErrorCode2[\"MAX_OUTPUTS_EXCEEDED\"] = \"max-outputs-exceeded\";\n  ErrorCode2[\"MAX_COINS_REACHED\"] = \"max-coins-reached\";\n  ErrorCode2[\"ASSET_BURN_DETECTED\"] = \"asset-burn-detected\";\n  ErrorCode2[\"INVALID_RECEIPT_TYPE\"] = \"invalid-receipt-type\";\n  ErrorCode2[\"INVALID_WORD_LIST\"] = \"invalid-word-list\";\n  ErrorCode2[\"INVALID_MNEMONIC\"] = \"invalid-mnemonic\";\n  ErrorCode2[\"INVALID_ENTROPY\"] = \"invalid-entropy\";\n  ErrorCode2[\"INVALID_SEED\"] = \"invalid-seed\";\n  ErrorCode2[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  ErrorCode2[\"INVALID_PASSWORD\"] = \"invalid-password\";\n  ErrorCode2[\"ACCOUNT_REQUIRED\"] = \"account-required\";\n  ErrorCode2[\"UNLOCKED_WALLET_REQUIRED\"] = \"unlocked-wallet-required\";\n  ErrorCode2[\"NUMBER_TOO_BIG\"] = \"number-too-big\";\n  ErrorCode2[\"ERROR_BUILDING_BLOCK_EXPLORER_URL\"] = \"error-building-block-explorer-url\";\n  ErrorCode2[\"VITEPRESS_PLUGIN_ERROR\"] = \"vitepress-plugin-error\";\n  ErrorCode2[\"SCRIPT_REVERTED\"] = \"script-reverted\";\n  ErrorCode2[\"SCRIPT_RETURN_INVALID_TYPE\"] = \"script-return-invalid-type\";\n  ErrorCode2[\"STREAM_PARSING_ERROR\"] = \"stream-parsing-error\";\n  ErrorCode2[\"NODE_LAUNCH_FAILED\"] = \"node-launch-failed\";\n  ErrorCode2[\"UNKNOWN\"] = \"unknown\";\n  return ErrorCode2;\n})(ErrorCode || {});\n\n// src/fuel-error.ts\n\nvar _FuelError = class extends Error {\n  VERSIONS = _fuel_ts_versions__WEBPACK_IMPORTED_MODULE_0__.versions;\n  metadata;\n  rawError;\n  static parse(e) {\n    const error = e;\n    if (error.code === void 0) {\n      throw new _FuelError(\n        \"parse-failed\" /* PARSE_FAILED */,\n        \"Failed to parse the error object. The required 'code' property is missing.\"\n      );\n    }\n    const enumValues = Object.values(ErrorCode);\n    const codeIsKnown = enumValues.includes(error.code);\n    if (!codeIsKnown) {\n      throw new _FuelError(\n        \"parse-failed\" /* PARSE_FAILED */,\n        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(\", \")}.`\n      );\n    }\n    return new _FuelError(error.code, error.message);\n  }\n  code;\n  constructor(code, message, metadata = {}, rawError = null) {\n    super(message);\n    this.code = code;\n    this.name = \"FuelError\";\n    this.metadata = metadata;\n    this.rawError = rawError;\n  }\n  toObject() {\n    const { code, name, message, metadata, VERSIONS, rawError } = this;\n    return { code, name, message, metadata, VERSIONS, rawError };\n  }\n};\nvar FuelError = _FuelError;\n__publicField(FuelError, \"CODES\", ErrorCode);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/hasher/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   uint64ToBytesBE: () => (/* binding */ uint64ToBytesBE)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/crypto */ \"(ssr)/./node_modules/@fuel-ts/crypto/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n// src/hasher.ts\n\n\n\nfunction sha256(data) {\n  return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data)));\n}\nfunction hash(data) {\n  return sha256(data);\n}\nfunction uint64ToBytesBE(value) {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false);\n  return new Uint8Array(dataView.buffer);\n}\nfunction hashMessage(msg) {\n  return hash((0,_fuel_ts_crypto__WEBPACK_IMPORTED_MODULE_0__.bufferFromString)(msg, \"utf-8\"));\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvaGFzaGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNtRDtBQUNBO0FBQ1k7QUFDL0Q7QUFDQSxTQUFTLHVEQUFPLENBQUMsNERBQWEsQ0FBQyx3REFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlFQUFnQjtBQUM5QjtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL2p1Ym9paS9GdWVsL0FyY2FuZS9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvaGFzaGVyL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9oYXNoZXIudHNcbmltcG9ydCB7IGJ1ZmZlckZyb21TdHJpbmcgfSBmcm9tIFwiQGZ1ZWwtdHMvY3J5cHRvXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4bGlmeSB9IGZyb20gXCJAZnVlbC10cy91dGlsc1wiO1xuaW1wb3J0IHsgc2hhMjU2IGFzIHNoYTI1NkFzQnl0ZXMgfSBmcm9tIFwiQG5vYmxlL2hhc2hlcy9zaGEyNTZcIjtcbmZ1bmN0aW9uIHNoYTI1NihkYXRhKSB7XG4gIHJldHVybiBoZXhsaWZ5KHNoYTI1NkFzQnl0ZXMoYXJyYXlpZnkoZGF0YSkpKTtcbn1cbmZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICByZXR1cm4gc2hhMjU2KGRhdGEpO1xufVxuZnVuY3Rpb24gdWludDY0VG9CeXRlc0JFKHZhbHVlKSB7XG4gIGNvbnN0IGJpZ0ludFZhbHVlID0gQmlnSW50KHZhbHVlKTtcbiAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICBkYXRhVmlldy5zZXRCaWdVaW50NjQoMCwgYmlnSW50VmFsdWUsIGZhbHNlKTtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGFWaWV3LmJ1ZmZlcik7XG59XG5mdW5jdGlvbiBoYXNoTWVzc2FnZShtc2cpIHtcbiAgcmV0dXJuIGhhc2goYnVmZmVyRnJvbVN0cmluZyhtc2csIFwidXRmLThcIikpO1xufVxuZXhwb3J0IHtcbiAgaGFzaCxcbiAgaGFzaE1lc3NhZ2UsXG4gIHNoYTI1NixcbiAgdWludDY0VG9CeXRlc0JFXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/math/dist/configs.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/math/dist/configs.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DECIMAL_FUEL: () => (/* binding */ DECIMAL_FUEL),\n/* harmony export */   DECIMAL_GWEI: () => (/* binding */ DECIMAL_GWEI),\n/* harmony export */   DECIMAL_KWEI: () => (/* binding */ DECIMAL_KWEI),\n/* harmony export */   DECIMAL_MWEI: () => (/* binding */ DECIMAL_MWEI),\n/* harmony export */   DECIMAL_WEI: () => (/* binding */ DECIMAL_WEI),\n/* harmony export */   DEFAULT_DECIMAL_UNITS: () => (/* binding */ DEFAULT_DECIMAL_UNITS),\n/* harmony export */   DEFAULT_MIN_PRECISION: () => (/* binding */ DEFAULT_MIN_PRECISION),\n/* harmony export */   DEFAULT_PRECISION: () => (/* binding */ DEFAULT_PRECISION)\n/* harmony export */ });\n// src/configs.ts\nvar DEFAULT_PRECISION = 9;\nvar DEFAULT_MIN_PRECISION = 3;\nvar DEFAULT_DECIMAL_UNITS = 9;\nvar DECIMAL_FUEL = 9;\nvar DECIMAL_WEI = 18;\nvar DECIMAL_KWEI = 15;\nvar DECIMAL_MWEI = 12;\nvar DECIMAL_GWEI = 9;\n\n//# sourceMappingURL=configs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvbWF0aC9kaXN0L2NvbmZpZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUU7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvanVib2lpL0Z1ZWwvQXJjYW5lL25vZGVfbW9kdWxlcy9AZnVlbC10cy9tYXRoL2Rpc3QvY29uZmlncy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbmZpZ3MudHNcbnZhciBERUZBVUxUX1BSRUNJU0lPTiA9IDk7XG52YXIgREVGQVVMVF9NSU5fUFJFQ0lTSU9OID0gMztcbnZhciBERUZBVUxUX0RFQ0lNQUxfVU5JVFMgPSA5O1xudmFyIERFQ0lNQUxfRlVFTCA9IDk7XG52YXIgREVDSU1BTF9XRUkgPSAxODtcbnZhciBERUNJTUFMX0tXRUkgPSAxNTtcbnZhciBERUNJTUFMX01XRUkgPSAxMjtcbnZhciBERUNJTUFMX0dXRUkgPSA5O1xuZXhwb3J0IHtcbiAgREVDSU1BTF9GVUVMLFxuICBERUNJTUFMX0dXRUksXG4gIERFQ0lNQUxfS1dFSSxcbiAgREVDSU1BTF9NV0VJLFxuICBERUNJTUFMX1dFSSxcbiAgREVGQVVMVF9ERUNJTUFMX1VOSVRTLFxuICBERUZBVUxUX01JTl9QUkVDSVNJT04sXG4gIERFRkFVTFRfUFJFQ0lTSU9OXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlncy5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/math/dist/configs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@fuel-ts/math/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BN: () => (/* binding */ BN),\n/* harmony export */   bn: () => (/* binding */ bn),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   formatUnits: () => (/* binding */ formatUnits),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toFixed: () => (/* binding */ toFixed),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toNumber: () => (/* binding */ toNumber)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n// src/bn.ts\n\n\n\n// src/configs.ts\nvar DEFAULT_PRECISION = 9;\nvar DEFAULT_MIN_PRECISION = 3;\nvar DEFAULT_DECIMAL_UNITS = 9;\n\n// src/bn.ts\nvar BN = class extends bn_js__WEBPACK_IMPORTED_MODULE_1__ {\n  MAX_U64 = \"0xFFFFFFFFFFFFFFFF\";\n  constructor(value, base, endian) {\n    let bnValue = value;\n    let bnBase = base;\n    if (BN.isBN(value)) {\n      bnValue = value.toArray();\n    } else if (typeof value === \"string\" && value.slice(0, 2) === \"0x\") {\n      bnValue = value.substring(2);\n      bnBase = base || \"hex\";\n    }\n    if (typeof bnValue === \"number\" && bnValue > Number.MAX_SAFE_INTEGER) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.NUMBER_TOO_BIG,\n        `Value ${bnValue} is too large to be represented as a number, use string instead.`\n      );\n    }\n    super(bnValue == null ? 0 : bnValue, bnBase, endian);\n  }\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  toString(base, length) {\n    const output = super.toString(base, length);\n    if (base === 16 || base === \"hex\") {\n      return `0x${output}`;\n    }\n    return output;\n  }\n  toHex(bytesPadding) {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n    if (this.isNeg()) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONVERTING_FAILED, \"Cannot convert negative value to hex.\");\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONVERTING_FAILED,\n        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`\n      );\n    }\n    return this.toString(16, bytesLength);\n  }\n  toBytes(bytesPadding) {\n    if (this.isNeg()) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONVERTING_FAILED, \"Cannot convert negative value to bytes.\");\n    }\n    return Uint8Array.from(this.toArray(void 0, bytesPadding));\n  }\n  toJSON() {\n    return this.toString(16);\n  }\n  valueOf() {\n    return this.toString();\n  }\n  format(options) {\n    const {\n      units = DEFAULT_DECIMAL_UNITS,\n      precision: initialPrecision = DEFAULT_PRECISION,\n      minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION\n    } = options || {};\n    if (units === 0) {\n      return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    const minPrecision = initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;\n    const precision = initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;\n    const formattedUnits = this.formatUnits(units);\n    const [integerPart, fractionalPart = \"\"] = formattedUnits.split(\".\");\n    const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    if (precision === 0) {\n      return formattedInteger;\n    }\n    let formattedFractional = fractionalPart.replace(/0+$/, \"\");\n    if (formattedFractional.length > precision) {\n      if (integerPart === \"0\") {\n        const firstNonZeroIndex = formattedFractional.search(/[1-9]/);\n        if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {\n          formattedFractional = formattedFractional.slice(0, precision);\n        } else {\n          formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);\n        }\n      } else {\n        formattedFractional = formattedFractional.slice(0, precision);\n      }\n    } else {\n      formattedFractional = formattedFractional.slice(0, precision);\n    }\n    if (formattedFractional.length < minPrecision) {\n      formattedFractional = formattedFractional.padEnd(minPrecision, \"0\");\n    }\n    if (formattedFractional === \"\" && minPrecision === 0) {\n      return formattedInteger;\n    }\n    return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;\n  }\n  formatUnits(units = DEFAULT_DECIMAL_UNITS) {\n    const valueString = this.toString();\n    const valueLength = valueString.length;\n    if (valueLength <= units) {\n      const paddedZeros = \"0\".repeat(units - valueLength);\n      return `0.${paddedZeros}${valueString}`;\n    }\n    const integerPart = valueString.slice(0, valueLength - units);\n    const fractionalPart = valueString.slice(valueLength - units);\n    return `${integerPart}.${fractionalPart}`;\n  }\n  // END ANCHOR: HELPERS\n  // ANCHOR: OVERRIDES to accept better inputs\n  add(v) {\n    return this.caller(v, \"add\");\n  }\n  pow(v) {\n    return this.caller(v, \"pow\");\n  }\n  sub(v) {\n    return this.caller(v, \"sub\");\n  }\n  div(v) {\n    return this.caller(v, \"div\");\n  }\n  mul(v) {\n    return this.caller(v, \"mul\");\n  }\n  mod(v) {\n    return this.caller(v, \"mod\");\n  }\n  divRound(v) {\n    return this.caller(v, \"divRound\");\n  }\n  lt(v) {\n    return this.caller(v, \"lt\");\n  }\n  lte(v) {\n    return this.caller(v, \"lte\");\n  }\n  gt(v) {\n    return this.caller(v, \"gt\");\n  }\n  gte(v) {\n    return this.caller(v, \"gte\");\n  }\n  eq(v) {\n    return this.caller(v, \"eq\");\n  }\n  cmp(v) {\n    return this.caller(v, \"cmp\");\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n  // ANCHOR: OVERRIDES to output our BN type\n  sqr() {\n    return new BN(super.sqr().toArray());\n  }\n  neg() {\n    return new BN(super.neg().toArray());\n  }\n  abs() {\n    return new BN(super.abs().toArray());\n  }\n  toTwos(width) {\n    return new BN(super.toTwos(width).toArray());\n  }\n  fromTwos(width) {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v, methodName) {\n    const output = super[methodName](new BN(v));\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n    if (typeof output === \"boolean\") {\n      return output;\n    }\n    return output;\n  }\n  clone() {\n    return new BN(this.toArray());\n  }\n  mulTo(num, out) {\n    const output = new bn_js__WEBPACK_IMPORTED_MODULE_1__(this.toArray()).mulTo(num, out);\n    return new BN(output.toArray());\n  }\n  egcd(p) {\n    const { a, b, gcd } = new bn_js__WEBPACK_IMPORTED_MODULE_1__(this.toArray()).egcd(p);\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray())\n    };\n  }\n  divmod(num, mode, positive) {\n    const { div, mod } = new bn_js__WEBPACK_IMPORTED_MODULE_1__(this.toArray()).divmod(new BN(num), mode, positive);\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray())\n    };\n  }\n  maxU64() {\n    return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;\n  }\n  max(num) {\n    return this.gte(num) ? new BN(num) : this;\n  }\n  normalizeZeroToOne() {\n    return this.isZero() ? new BN(1) : this;\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n};\nvar bn = (value, base, endian) => new BN(value, base, endian);\nbn.parseUnits = (value, units = DEFAULT_DECIMAL_UNITS) => {\n  const valueToParse = value === \".\" ? \"0.\" : value;\n  const [valueUnits = \"0\", valueDecimals = \"0\"] = valueToParse.split(\".\");\n  const length = valueDecimals.length;\n  if (units === 0) {\n    const valueWithoutDecimals = valueToParse.replace(\",\", \"\").split(\".\")[0];\n    return bn(valueWithoutDecimals);\n  }\n  if (length > units) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n      _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.CONVERTING_FAILED,\n      `Decimal can't have more than ${units} digits.`\n    );\n  }\n  const decimals = Array.from({ length: units }).fill(\"0\");\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(\",\", \"\")}${decimals.join(\"\")}`;\n  return bn(amount);\n};\n\n// src/decimal.ts\nfunction toFixed(value, options) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n  const [valueUnits = \"0\", valueDecimals = \"0\"] = String(value || \"0.0\").split(\".\");\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, \"$1,\");\n  let decimals = valueDecimals.slice(0, precision);\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n  const decimalPortion = decimals ? `.${decimals}` : \"\";\n  return `${units}${decimalPortion}`;\n}\n\n// src/functional.ts\nfunction toNumber(value) {\n  return bn(value).toNumber();\n}\nfunction toHex(value, bytesPadding) {\n  return bn(value).toHex(bytesPadding);\n}\nfunction toBytes(value, bytesPadding) {\n  return bn(value).toBytes(bytesPadding);\n}\nfunction formatUnits(value, units) {\n  return bn(value).formatUnits(units);\n}\nfunction format(value, options) {\n  return bn(value).format(options);\n}\n\n// src/math.ts\nfunction max(...numbers) {\n  return numbers.reduce((prev, cur) => bn(cur).gt(prev) ? bn(cur) : prev, bn(0));\n}\nfunction multiply(...numbers) {\n  return bn(Math.ceil(numbers.reduce((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/merkle/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/merkle/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SparseMerkleTree: () => (/* binding */ SparseMerkleTree),\n/* harmony export */   calcRoot: () => (/* binding */ calcRoot),\n/* harmony export */   constructTree: () => (/* binding */ constructTree),\n/* harmony export */   getProof: () => (/* binding */ getProof),\n/* harmony export */   hashLeaf: () => (/* binding */ hashLeaf),\n/* harmony export */   hashNode: () => (/* binding */ hashNode)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\");\n// src/binary/binaryMerkleTree.ts\n\n\n// src/common/common.ts\nvar EMPTY = \"0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n\n// src/binary/types/node.ts\nvar Node = class {\n  left;\n  right;\n  parent;\n  hash;\n  data;\n  index;\n  constructor(left, right, parent, hash5, data, index = 0) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash5;\n    this.data = data;\n    this.index = index;\n  }\n};\nvar node_default = Node;\n\n// src/binary/binaryMerkleTree.ts\nfunction hashLeaf(data) {\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(\"0x00\".concat(data.slice(2)));\n}\nfunction hashNode(left, right) {\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(\"0x01\".concat(left.slice(2)).concat(right.slice(2)));\n}\nfunction constructTree(data) {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new node_default(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n  let size = nodes.length + 1 >> 1;\n  let odd = nodes.length & 1;\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, \"\");\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n    if (size === 1) {\n      break;\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    odd = size & 1;\n    size = size + 1 >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\nfunction calcRoot(data) {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new node_default(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = nodes.length + 1 >> 1;\n  let odd = nodes.length & 1;\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new node_default(pNodes[j].index, pNodes[j + 1].index, -1, hashed, \"\");\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = size + 1 >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\nfunction getProof(nodes, id) {\n  const proof = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n\n// src/sparse/sparseMerkleTree.ts\n\n\n// src/sparse/proofs.ts\n\n\n// src/sparse/treeHasher.ts\n\nvar leafPrefix = \"0x00\";\nvar nodePrefix = \"0x01\";\nfunction hashLeaf2(key, data) {\n  const value = \"0x00\".concat(key.slice(2)).concat((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(data).slice(2));\n  return [(0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(value), value];\n}\nfunction hashNode2(left, right) {\n  const value = \"0x01\".concat(left.slice(2)).concat(right.slice(2));\n  return [(0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(value), value];\n}\nfunction parseLeaf(data) {\n  const len = nodePrefix.length;\n  return [\"0x\".concat(data.slice(len, len + 64)), \"0x\".concat(data.slice(len + 64))];\n}\nfunction parseNode(data) {\n  const len = nodePrefix.length;\n  return [\"0x\".concat(data.slice(len, len + 64)), \"0x\".concat(data.slice(len + 64))];\n}\nfunction isLeaf(data) {\n  return data.slice(0, 4) === leafPrefix;\n}\n\n// src/sparse/types/sparseCompactMerkleProof.ts\nvar SparseCompactMerkleProof = class {\n  SideNodes;\n  NonMembershipLeafData;\n  BitMask;\n  NumSideNodes;\n  SiblingData;\n  constructor(SideNodes, NonMembershipLeafData, Bitmask, NumSideNodes, SiblingData) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n};\nvar sparseCompactMerkleProof_default = SparseCompactMerkleProof;\n\n// src/sparse/types/sparseMerkleProof.ts\nvar SparseMerkleProof = class {\n  SideNodes;\n  NonMembershipLeafData;\n  SiblingData;\n  constructor(sideNodes, NonMembershipLeafData, SiblingData) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n};\nvar sparseMerkleProof_default = SparseMerkleProof;\n\n// src/sparse/utils.ts\nvar ZERO = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nvar MAX_HEIGHT = 256;\nfunction getBitAtFromMSB(data, position) {\n  const slicedData = data.slice(2);\n  const byte = \"0x\".concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  const bits = Number(byte) & 1 << 8 - 1 - position % 8;\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\nfunction reverseSideNodes(sideNodes) {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes = sideNodes;\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left]\n    ];\n    left += 1;\n    right -= 1;\n  }\n  return reversedSideNodes;\n}\nfunction countCommonPrefix(data1, data2) {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n\n// src/sparse/proofs.ts\nfunction compactProof(proof) {\n  const bitMask = [];\n  const compactedSideNodes = [];\n  let node;\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new sparseCompactMerkleProof_default(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n// src/sparse/sparseMerkleTree.ts\nvar SparseMerkleTree = class {\n  ms;\n  root;\n  constructor() {\n    const ms = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n  get(key) {\n    return this.ms[key];\n  }\n  set(key, value) {\n    this.ms[key] = value;\n  }\n  setRoot(root) {\n    this.root = root;\n  }\n  sideNodesForRoot(key, root) {\n    const sideNodes = [];\n    if (root === ZERO) {\n      return [sideNodes, ZERO, \"\", \"\"];\n    }\n    let currentData = this.get(root);\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, \"\"];\n    }\n    let leftNode;\n    let rightNode;\n    let nodeHash = \"\";\n    let sideNode = \"\";\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n      sideNodes.push(sideNode);\n      if (nodeHash === ZERO) {\n        currentData = \"\";\n        break;\n      }\n      currentData = this.get(nodeHash);\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n    const siblingData = this.get(sideNode);\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n  deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData) {\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n    const [actualPath] = parseLeaf(oldLeafData);\n    if (actualPath !== key) {\n      return this.root;\n    }\n    let currentHash = \"\";\n    let currentData = \"\";\n    let sideNode = \"\";\n    let sideNodeValue = \"\";\n    let nonPlaceholderReached = false;\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === \"\") {\n        continue;\n      }\n      sideNode = sideNodes[i];\n      if (currentData === \"\") {\n        sideNodeValue = this.get(sideNode);\n        if (isLeaf(sideNodeValue)) {\n          currentHash = sideNode;\n          currentData = sideNode;\n          continue;\n        } else {\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        continue;\n      } else if (!nonPlaceholderReached) {\n        nonPlaceholderReached = true;\n      }\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode2(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    if (currentHash === \"\") {\n      currentHash = ZERO;\n    }\n    return currentHash;\n  }\n  updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData) {\n    let currentHash;\n    let currentData;\n    this.set((0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_0__.hash)(value), value);\n    [currentHash, currentData] = hashLeaf2(key, value);\n    this.set(currentHash, currentData);\n    currentData = currentHash;\n    let commonPrefixCount;\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode2(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === \"\") {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode2(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode2(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n    return currentHash;\n  }\n  update(key, value) {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n  delete(key) {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n  prove(key) {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n    const nonEmptySideNodes = [];\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== \"\") {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n    let nonMembershipLeafData = \"\";\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        nonMembershipLeafData = leafData;\n      }\n    }\n    const proof = new sparseMerkleProof_default(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n  proveCompacted(key) {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvbWVya2xlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUN1Qzs7QUFFdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMscURBQUk7QUFDYjtBQUNBO0FBQ0EsU0FBUyxxREFBSTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsWUFBWTtBQUMxRDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDZ0Q7O0FBRWhEO0FBQ2dEOztBQUVoRDtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxtREFBbUQscURBQUs7QUFDeEQsVUFBVSxxREFBSztBQUNmO0FBQ0E7QUFDQTtBQUNBLFVBQVUscURBQUs7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNEJBQTRCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFEQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRRTtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9qdWJvaWkvRnVlbC9BcmNhbmUvbm9kZV9tb2R1bGVzL0BmdWVsLXRzL21lcmtsZS9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvYmluYXJ5L2JpbmFyeU1lcmtsZVRyZWUudHNcbmltcG9ydCB7IGhhc2ggfSBmcm9tIFwiQGZ1ZWwtdHMvaGFzaGVyXCI7XG5cbi8vIHNyYy9jb21tb24vY29tbW9uLnRzXG52YXIgRU1QVFkgPSBcIjB4ZTNiMGM0NDI5OGZjMWMxNDlhZmJmNGM4OTk2ZmI5MjQyN2FlNDFlNDY0OWI5MzRjYTQ5NTk5MWI3ODUyYjg1NVwiO1xuXG4vLyBzcmMvYmluYXJ5L3R5cGVzL25vZGUudHNcbnZhciBOb2RlID0gY2xhc3Mge1xuICBsZWZ0O1xuICByaWdodDtcbiAgcGFyZW50O1xuICBoYXNoO1xuICBkYXRhO1xuICBpbmRleDtcbiAgY29uc3RydWN0b3IobGVmdCwgcmlnaHQsIHBhcmVudCwgaGFzaDUsIGRhdGEsIGluZGV4ID0gMCkge1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuaGFzaCA9IGhhc2g1O1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICB9XG59O1xudmFyIG5vZGVfZGVmYXVsdCA9IE5vZGU7XG5cbi8vIHNyYy9iaW5hcnkvYmluYXJ5TWVya2xlVHJlZS50c1xuZnVuY3Rpb24gaGFzaExlYWYoZGF0YSkge1xuICByZXR1cm4gaGFzaChcIjB4MDBcIi5jb25jYXQoZGF0YS5zbGljZSgyKSkpO1xufVxuZnVuY3Rpb24gaGFzaE5vZGUobGVmdCwgcmlnaHQpIHtcbiAgcmV0dXJuIGhhc2goXCIweDAxXCIuY29uY2F0KGxlZnQuc2xpY2UoMikpLmNvbmNhdChyaWdodC5zbGljZSgyKSkpO1xufVxuZnVuY3Rpb24gY29uc3RydWN0VHJlZShkYXRhKSB7XG4gIGNvbnN0IG5vZGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGhhc2hlZCA9IGhhc2hMZWFmKGRhdGFbaV0pO1xuICAgIGNvbnN0IGxlYWYgPSBuZXcgbm9kZV9kZWZhdWx0KC0xLCAtMSwgLTEsIGhhc2hlZCwgZGF0YVtpXSk7XG4gICAgbGVhZi5pbmRleCA9IGk7XG4gICAgbm9kZXMucHVzaChsZWFmKTtcbiAgfVxuICBjb25zdCBub2Rlc0xpc3QgPSBbLi4ubm9kZXNdO1xuICBsZXQgcE5vZGVzID0gWy4uLm5vZGVzXTtcbiAgbGV0IHNpemUgPSBub2Rlcy5sZW5ndGggKyAxID4+IDE7XG4gIGxldCBvZGQgPSBub2Rlcy5sZW5ndGggJiAxO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemUgLSBvZGQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaiA9IGkgPDwgMTtcbiAgICAgIGNvbnN0IGhhc2hlZCA9IGhhc2hOb2RlKHBOb2Rlc1tqXS5oYXNoLCBwTm9kZXNbaiArIDFdLmhhc2gpO1xuICAgICAgbm9kZXNbaV0gPSBuZXcgbm9kZV9kZWZhdWx0KHBOb2Rlc1tqXS5pbmRleCwgcE5vZGVzW2ogKyAxXS5pbmRleCwgLTEsIGhhc2hlZCwgXCJcIik7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBub2Rlc0xpc3QubGVuZ3RoO1xuICAgICAgbm9kZXNbaV0uaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBub2Rlc0xpc3RbcE5vZGVzW2pdLmluZGV4XS5wYXJlbnQgPSBuZXh0SW5kZXg7XG4gICAgICBub2Rlc0xpc3RbcE5vZGVzW2ogKyAxXS5pbmRleF0ucGFyZW50ID0gbmV4dEluZGV4O1xuICAgICAgbm9kZXNMaXN0LnB1c2gobm9kZXNbaV0pO1xuICAgIH1cbiAgICBpZiAoc2l6ZSA9PT0gMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChvZGQgPT09IDEpIHtcbiAgICAgIG5vZGVzW2ldID0gcE5vZGVzW2kgPDwgMV07XG4gICAgfVxuICAgIG9kZCA9IHNpemUgJiAxO1xuICAgIHNpemUgPSBzaXplICsgMSA+PiAxO1xuICAgIHBOb2RlcyA9IFsuLi5ub2Rlc107XG4gIH1cbiAgcmV0dXJuIG5vZGVzTGlzdDtcbn1cbmZ1bmN0aW9uIGNhbGNSb290KGRhdGEpIHtcbiAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBFTVBUWTtcbiAgfVxuICBjb25zdCBub2RlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBoYXNoZWQgPSBoYXNoTGVhZihkYXRhW2ldKTtcbiAgICBub2Rlcy5wdXNoKG5ldyBub2RlX2RlZmF1bHQoLTEsIC0xLCAtMSwgaGFzaGVkLCBkYXRhW2ldKSk7XG4gIH1cbiAgbGV0IHBOb2RlcyA9IG5vZGVzO1xuICBsZXQgc2l6ZSA9IG5vZGVzLmxlbmd0aCArIDEgPj4gMTtcbiAgbGV0IG9kZCA9IG5vZGVzLmxlbmd0aCAmIDE7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZSAtIG9kZDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBqID0gaSA8PCAxO1xuICAgICAgY29uc3QgaGFzaGVkID0gaGFzaE5vZGUocE5vZGVzW2pdLmhhc2gsIHBOb2Rlc1tqICsgMV0uaGFzaCk7XG4gICAgICBub2Rlc1tpXSA9IG5ldyBub2RlX2RlZmF1bHQocE5vZGVzW2pdLmluZGV4LCBwTm9kZXNbaiArIDFdLmluZGV4LCAtMSwgaGFzaGVkLCBcIlwiKTtcbiAgICB9XG4gICAgaWYgKG9kZCA9PT0gMSkge1xuICAgICAgbm9kZXNbaV0gPSBwTm9kZXNbaSA8PCAxXTtcbiAgICB9XG4gICAgaWYgKHNpemUgPT09IDEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvZGQgPSBzaXplICYgMTtcbiAgICBzaXplID0gc2l6ZSArIDEgPj4gMTtcbiAgICBwTm9kZXMgPSBub2RlcztcbiAgfVxuICByZXR1cm4gbm9kZXNbMF0uaGFzaDtcbn1cbmZ1bmN0aW9uIGdldFByb29mKG5vZGVzLCBpZCkge1xuICBjb25zdCBwcm9vZiA9IFtdO1xuICBmb3IgKGxldCBwcmV2ID0gaWQsIGN1ciA9IG5vZGVzW2lkXS5wYXJlbnQ7IGN1ciAhPT0gLTE7IHByZXYgPSBjdXIsIGN1ciA9IG5vZGVzW2N1cl0ucGFyZW50KSB7XG4gICAgaWYgKG5vZGVzW2N1cl0ubGVmdCA9PT0gcHJldikge1xuICAgICAgcHJvb2YucHVzaChub2Rlc1tub2Rlc1tjdXJdLnJpZ2h0XS5oYXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvb2YucHVzaChub2Rlc1tub2Rlc1tjdXJdLmxlZnRdLmhhc2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvb2Y7XG59XG5cbi8vIHNyYy9zcGFyc2Uvc3BhcnNlTWVya2xlVHJlZS50c1xuaW1wb3J0IHsgaGFzaCBhcyBoYXNoNCB9IGZyb20gXCJAZnVlbC10cy9oYXNoZXJcIjtcblxuLy8gc3JjL3NwYXJzZS9wcm9vZnMudHNcbmltcG9ydCB7IGhhc2ggYXMgaGFzaDMgfSBmcm9tIFwiQGZ1ZWwtdHMvaGFzaGVyXCI7XG5cbi8vIHNyYy9zcGFyc2UvdHJlZUhhc2hlci50c1xuaW1wb3J0IHsgaGFzaCBhcyBoYXNoMiB9IGZyb20gXCJAZnVlbC10cy9oYXNoZXJcIjtcbnZhciBsZWFmUHJlZml4ID0gXCIweDAwXCI7XG52YXIgbm9kZVByZWZpeCA9IFwiMHgwMVwiO1xuZnVuY3Rpb24gaGFzaExlYWYyKGtleSwgZGF0YSkge1xuICBjb25zdCB2YWx1ZSA9IFwiMHgwMFwiLmNvbmNhdChrZXkuc2xpY2UoMikpLmNvbmNhdChoYXNoMihkYXRhKS5zbGljZSgyKSk7XG4gIHJldHVybiBbaGFzaDIodmFsdWUpLCB2YWx1ZV07XG59XG5mdW5jdGlvbiBoYXNoTm9kZTIobGVmdCwgcmlnaHQpIHtcbiAgY29uc3QgdmFsdWUgPSBcIjB4MDFcIi5jb25jYXQobGVmdC5zbGljZSgyKSkuY29uY2F0KHJpZ2h0LnNsaWNlKDIpKTtcbiAgcmV0dXJuIFtoYXNoMih2YWx1ZSksIHZhbHVlXTtcbn1cbmZ1bmN0aW9uIHBhcnNlTGVhZihkYXRhKSB7XG4gIGNvbnN0IGxlbiA9IG5vZGVQcmVmaXgubGVuZ3RoO1xuICByZXR1cm4gW1wiMHhcIi5jb25jYXQoZGF0YS5zbGljZShsZW4sIGxlbiArIDY0KSksIFwiMHhcIi5jb25jYXQoZGF0YS5zbGljZShsZW4gKyA2NCkpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlTm9kZShkYXRhKSB7XG4gIGNvbnN0IGxlbiA9IG5vZGVQcmVmaXgubGVuZ3RoO1xuICByZXR1cm4gW1wiMHhcIi5jb25jYXQoZGF0YS5zbGljZShsZW4sIGxlbiArIDY0KSksIFwiMHhcIi5jb25jYXQoZGF0YS5zbGljZShsZW4gKyA2NCkpXTtcbn1cbmZ1bmN0aW9uIGlzTGVhZihkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNsaWNlKDAsIDQpID09PSBsZWFmUHJlZml4O1xufVxuXG4vLyBzcmMvc3BhcnNlL3R5cGVzL3NwYXJzZUNvbXBhY3RNZXJrbGVQcm9vZi50c1xudmFyIFNwYXJzZUNvbXBhY3RNZXJrbGVQcm9vZiA9IGNsYXNzIHtcbiAgU2lkZU5vZGVzO1xuICBOb25NZW1iZXJzaGlwTGVhZkRhdGE7XG4gIEJpdE1hc2s7XG4gIE51bVNpZGVOb2RlcztcbiAgU2libGluZ0RhdGE7XG4gIGNvbnN0cnVjdG9yKFNpZGVOb2RlcywgTm9uTWVtYmVyc2hpcExlYWZEYXRhLCBCaXRtYXNrLCBOdW1TaWRlTm9kZXMsIFNpYmxpbmdEYXRhKSB7XG4gICAgdGhpcy5TaWRlTm9kZXMgPSBTaWRlTm9kZXM7XG4gICAgdGhpcy5Ob25NZW1iZXJzaGlwTGVhZkRhdGEgPSBOb25NZW1iZXJzaGlwTGVhZkRhdGE7XG4gICAgdGhpcy5CaXRNYXNrID0gQml0bWFzaztcbiAgICB0aGlzLk51bVNpZGVOb2RlcyA9IE51bVNpZGVOb2RlcztcbiAgICB0aGlzLlNpYmxpbmdEYXRhID0gU2libGluZ0RhdGE7XG4gIH1cbn07XG52YXIgc3BhcnNlQ29tcGFjdE1lcmtsZVByb29mX2RlZmF1bHQgPSBTcGFyc2VDb21wYWN0TWVya2xlUHJvb2Y7XG5cbi8vIHNyYy9zcGFyc2UvdHlwZXMvc3BhcnNlTWVya2xlUHJvb2YudHNcbnZhciBTcGFyc2VNZXJrbGVQcm9vZiA9IGNsYXNzIHtcbiAgU2lkZU5vZGVzO1xuICBOb25NZW1iZXJzaGlwTGVhZkRhdGE7XG4gIFNpYmxpbmdEYXRhO1xuICBjb25zdHJ1Y3RvcihzaWRlTm9kZXMsIE5vbk1lbWJlcnNoaXBMZWFmRGF0YSwgU2libGluZ0RhdGEpIHtcbiAgICB0aGlzLlNpZGVOb2RlcyA9IHNpZGVOb2RlcztcbiAgICB0aGlzLk5vbk1lbWJlcnNoaXBMZWFmRGF0YSA9IE5vbk1lbWJlcnNoaXBMZWFmRGF0YTtcbiAgICB0aGlzLlNpYmxpbmdEYXRhID0gU2libGluZ0RhdGE7XG4gIH1cbn07XG52YXIgc3BhcnNlTWVya2xlUHJvb2ZfZGVmYXVsdCA9IFNwYXJzZU1lcmtsZVByb29mO1xuXG4vLyBzcmMvc3BhcnNlL3V0aWxzLnRzXG52YXIgWkVSTyA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG52YXIgTUFYX0hFSUdIVCA9IDI1NjtcbmZ1bmN0aW9uIGdldEJpdEF0RnJvbU1TQihkYXRhLCBwb3NpdGlvbikge1xuICBjb25zdCBzbGljZWREYXRhID0gZGF0YS5zbGljZSgyKTtcbiAgY29uc3QgYnl0ZSA9IFwiMHhcIi5jb25jYXQoXG4gICAgc2xpY2VkRGF0YS5zbGljZShNYXRoLmZsb29yKHBvc2l0aW9uIC8gOCkgKiAyLCBNYXRoLmZsb29yKHBvc2l0aW9uIC8gOCkgKiAyICsgMilcbiAgKTtcbiAgY29uc3QgYml0cyA9IE51bWJlcihieXRlKSAmIDEgPDwgOCAtIDEgLSBwb3NpdGlvbiAlIDg7XG4gIGlmIChiaXRzID4gMCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gcmV2ZXJzZVNpZGVOb2RlcyhzaWRlTm9kZXMpIHtcbiAgbGV0IGxlZnQgPSAwO1xuICBsZXQgcmlnaHQgPSBzaWRlTm9kZXMubGVuZ3RoIC0gMTtcbiAgY29uc3QgcmV2ZXJzZWRTaWRlTm9kZXMgPSBzaWRlTm9kZXM7XG4gIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcbiAgICBbcmV2ZXJzZWRTaWRlTm9kZXNbbGVmdF0sIHJldmVyc2VkU2lkZU5vZGVzW3JpZ2h0XV0gPSBbXG4gICAgICByZXZlcnNlZFNpZGVOb2Rlc1tyaWdodF0sXG4gICAgICByZXZlcnNlZFNpZGVOb2Rlc1tsZWZ0XVxuICAgIF07XG4gICAgbGVmdCArPSAxO1xuICAgIHJpZ2h0IC09IDE7XG4gIH1cbiAgcmV0dXJuIHJldmVyc2VkU2lkZU5vZGVzO1xufVxuZnVuY3Rpb24gY291bnRDb21tb25QcmVmaXgoZGF0YTEsIGRhdGEyKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTUFYX0hFSUdIVDsgaSArPSAxKSB7XG4gICAgaWYgKGdldEJpdEF0RnJvbU1TQihkYXRhMSwgaSkgPT09IGdldEJpdEF0RnJvbU1TQihkYXRhMiwgaSkpIHtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbi8vIHNyYy9zcGFyc2UvcHJvb2ZzLnRzXG5mdW5jdGlvbiBjb21wYWN0UHJvb2YocHJvb2YpIHtcbiAgY29uc3QgYml0TWFzayA9IFtdO1xuICBjb25zdCBjb21wYWN0ZWRTaWRlTm9kZXMgPSBbXTtcbiAgbGV0IG5vZGU7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvb2YuU2lkZU5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbm9kZSA9IHByb29mLlNpZGVOb2Rlc1tpXTtcbiAgICBpZiAobm9kZSA9PT0gWkVSTykge1xuICAgICAgYml0TWFzay5wdXNoKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wYWN0ZWRTaWRlTm9kZXMucHVzaChub2RlKTtcbiAgICAgIGJpdE1hc2sucHVzaCgxKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29tcGFjdGVkUHJvb2YgPSBuZXcgc3BhcnNlQ29tcGFjdE1lcmtsZVByb29mX2RlZmF1bHQoXG4gICAgY29tcGFjdGVkU2lkZU5vZGVzLFxuICAgIHByb29mLk5vbk1lbWJlcnNoaXBMZWFmRGF0YSxcbiAgICBiaXRNYXNrLFxuICAgIHByb29mLlNpZGVOb2Rlcy5sZW5ndGgsXG4gICAgcHJvb2YuU2libGluZ0RhdGFcbiAgKTtcbiAgcmV0dXJuIGNvbXBhY3RlZFByb29mO1xufVxuXG4vLyBzcmMvc3BhcnNlL3NwYXJzZU1lcmtsZVRyZWUudHNcbnZhciBTcGFyc2VNZXJrbGVUcmVlID0gY2xhc3Mge1xuICBtcztcbiAgcm9vdDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgbXMgPSB7fTtcbiAgICB0aGlzLm1zID0gbXM7XG4gICAgdGhpcy5yb290ID0gWkVSTztcbiAgICB0aGlzLm1zW3RoaXMucm9vdF0gPSBaRVJPO1xuICB9XG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5tc1trZXldO1xuICB9XG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5tc1trZXldID0gdmFsdWU7XG4gIH1cbiAgc2V0Um9vdChyb290KSB7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgfVxuICBzaWRlTm9kZXNGb3JSb290KGtleSwgcm9vdCkge1xuICAgIGNvbnN0IHNpZGVOb2RlcyA9IFtdO1xuICAgIGlmIChyb290ID09PSBaRVJPKSB7XG4gICAgICByZXR1cm4gW3NpZGVOb2RlcywgWkVSTywgXCJcIiwgXCJcIl07XG4gICAgfVxuICAgIGxldCBjdXJyZW50RGF0YSA9IHRoaXMuZ2V0KHJvb3QpO1xuICAgIGlmIChpc0xlYWYoY3VycmVudERhdGEpKSB7XG4gICAgICByZXR1cm4gW3NpZGVOb2Rlcywgcm9vdCwgY3VycmVudERhdGEsIFwiXCJdO1xuICAgIH1cbiAgICBsZXQgbGVmdE5vZGU7XG4gICAgbGV0IHJpZ2h0Tm9kZTtcbiAgICBsZXQgbm9kZUhhc2ggPSBcIlwiO1xuICAgIGxldCBzaWRlTm9kZSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfSEVJR0hUOyBpICs9IDEpIHtcbiAgICAgIFtsZWZ0Tm9kZSwgcmlnaHROb2RlXSA9IHBhcnNlTm9kZShjdXJyZW50RGF0YSk7XG4gICAgICBpZiAoZ2V0Qml0QXRGcm9tTVNCKGtleSwgaSkgPT09IDEpIHtcbiAgICAgICAgc2lkZU5vZGUgPSBsZWZ0Tm9kZTtcbiAgICAgICAgbm9kZUhhc2ggPSByaWdodE5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWRlTm9kZSA9IHJpZ2h0Tm9kZTtcbiAgICAgICAgbm9kZUhhc2ggPSBsZWZ0Tm9kZTtcbiAgICAgIH1cbiAgICAgIHNpZGVOb2Rlcy5wdXNoKHNpZGVOb2RlKTtcbiAgICAgIGlmIChub2RlSGFzaCA9PT0gWkVSTykge1xuICAgICAgICBjdXJyZW50RGF0YSA9IFwiXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY3VycmVudERhdGEgPSB0aGlzLmdldChub2RlSGFzaCk7XG4gICAgICBpZiAoaXNMZWFmKGN1cnJlbnREYXRhKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2libGluZ0RhdGEgPSB0aGlzLmdldChzaWRlTm9kZSk7XG4gICAgcmV0dXJuIFtyZXZlcnNlU2lkZU5vZGVzKHNpZGVOb2RlcyksIG5vZGVIYXNoLCBjdXJyZW50RGF0YSwgc2libGluZ0RhdGFdO1xuICB9XG4gIGRlbGV0ZVdpdGhTaWRlTm9kZXMoa2V5LCBzaWRlTm9kZXMsIG9sZExlYWZIYXNoLCBvbGRMZWFmRGF0YSkge1xuICAgIGlmIChvbGRMZWFmSGFzaCA9PT0gWkVSTykge1xuICAgICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgICB9XG4gICAgY29uc3QgW2FjdHVhbFBhdGhdID0gcGFyc2VMZWFmKG9sZExlYWZEYXRhKTtcbiAgICBpZiAoYWN0dWFsUGF0aCAhPT0ga2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290O1xuICAgIH1cbiAgICBsZXQgY3VycmVudEhhc2ggPSBcIlwiO1xuICAgIGxldCBjdXJyZW50RGF0YSA9IFwiXCI7XG4gICAgbGV0IHNpZGVOb2RlID0gXCJcIjtcbiAgICBsZXQgc2lkZU5vZGVWYWx1ZSA9IFwiXCI7XG4gICAgbGV0IG5vblBsYWNlaG9sZGVyUmVhY2hlZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZU5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2lkZU5vZGVzW2ldID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc2lkZU5vZGUgPSBzaWRlTm9kZXNbaV07XG4gICAgICBpZiAoY3VycmVudERhdGEgPT09IFwiXCIpIHtcbiAgICAgICAgc2lkZU5vZGVWYWx1ZSA9IHRoaXMuZ2V0KHNpZGVOb2RlKTtcbiAgICAgICAgaWYgKGlzTGVhZihzaWRlTm9kZVZhbHVlKSkge1xuICAgICAgICAgIGN1cnJlbnRIYXNoID0gc2lkZU5vZGU7XG4gICAgICAgICAgY3VycmVudERhdGEgPSBzaWRlTm9kZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50RGF0YSA9IFpFUk87XG4gICAgICAgICAgbm9uUGxhY2Vob2xkZXJSZWFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFub25QbGFjZWhvbGRlclJlYWNoZWQgJiYgc2lkZU5vZGUgPT09IFpFUk8pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKCFub25QbGFjZWhvbGRlclJlYWNoZWQpIHtcbiAgICAgICAgbm9uUGxhY2Vob2xkZXJSZWFjaGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXRCaXRBdEZyb21NU0Ioa2V5LCBzaWRlTm9kZXMubGVuZ3RoIC0gMSAtIGkpID09PSAxKSB7XG4gICAgICAgIFtjdXJyZW50SGFzaCwgY3VycmVudERhdGFdID0gaGFzaE5vZGUyKHNpZGVOb2RlLCBjdXJyZW50RGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBbY3VycmVudEhhc2gsIGN1cnJlbnREYXRhXSA9IGhhc2hOb2RlMihjdXJyZW50RGF0YSwgc2lkZU5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXQoY3VycmVudEhhc2gsIGN1cnJlbnREYXRhKTtcbiAgICAgIGN1cnJlbnREYXRhID0gY3VycmVudEhhc2g7XG4gICAgfVxuICAgIGlmIChjdXJyZW50SGFzaCA9PT0gXCJcIikge1xuICAgICAgY3VycmVudEhhc2ggPSBaRVJPO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudEhhc2g7XG4gIH1cbiAgdXBkYXRlV2l0aFNpZGVOb2RlcyhrZXksIHZhbHVlLCBzaWRlTm9kZXMsIG9sZExlYWZIYXNoLCBvbGRMZWFmRGF0YSkge1xuICAgIGxldCBjdXJyZW50SGFzaDtcbiAgICBsZXQgY3VycmVudERhdGE7XG4gICAgdGhpcy5zZXQoaGFzaDQodmFsdWUpLCB2YWx1ZSk7XG4gICAgW2N1cnJlbnRIYXNoLCBjdXJyZW50RGF0YV0gPSBoYXNoTGVhZjIoa2V5LCB2YWx1ZSk7XG4gICAgdGhpcy5zZXQoY3VycmVudEhhc2gsIGN1cnJlbnREYXRhKTtcbiAgICBjdXJyZW50RGF0YSA9IGN1cnJlbnRIYXNoO1xuICAgIGxldCBjb21tb25QcmVmaXhDb3VudDtcbiAgICBpZiAob2xkTGVhZkhhc2ggPT09IFpFUk8pIHtcbiAgICAgIGNvbW1vblByZWZpeENvdW50ID0gTUFYX0hFSUdIVDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW2FjdHVhbFBhdGhdID0gcGFyc2VMZWFmKG9sZExlYWZEYXRhKTtcbiAgICAgIGNvbW1vblByZWZpeENvdW50ID0gY291bnRDb21tb25QcmVmaXgoa2V5LCBhY3R1YWxQYXRoKTtcbiAgICB9XG4gICAgaWYgKGNvbW1vblByZWZpeENvdW50ICE9PSBNQVhfSEVJR0hUKSB7XG4gICAgICBpZiAoZ2V0Qml0QXRGcm9tTVNCKGtleSwgY29tbW9uUHJlZml4Q291bnQpID09PSAxKSB7XG4gICAgICAgIFtjdXJyZW50SGFzaCwgY3VycmVudERhdGFdID0gaGFzaE5vZGUyKG9sZExlYWZIYXNoLCBjdXJyZW50RGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBbY3VycmVudEhhc2gsIGN1cnJlbnREYXRhXSA9IGhhc2hOb2RlMihjdXJyZW50RGF0YSwgb2xkTGVhZkhhc2gpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXQoY3VycmVudEhhc2gsIGN1cnJlbnREYXRhKTtcbiAgICAgIGN1cnJlbnREYXRhID0gY3VycmVudEhhc2g7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTUFYX0hFSUdIVDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2lkZU5vZGU7XG4gICAgICBjb25zdCBvZmZzZXRPZlNpZGVOb2RlcyA9IE1BWF9IRUlHSFQgLSBzaWRlTm9kZXMubGVuZ3RoO1xuICAgICAgaWYgKGkgLSBvZmZzZXRPZlNpZGVOb2RlcyA8IDAgfHwgc2lkZU5vZGVzW2kgLSBvZmZzZXRPZlNpZGVOb2Rlc10gPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKGNvbW1vblByZWZpeENvdW50ICE9PSBNQVhfSEVJR0hUICYmIGNvbW1vblByZWZpeENvdW50ID4gTUFYX0hFSUdIVCAtIDEgLSBpKSB7XG4gICAgICAgICAgc2lkZU5vZGUgPSBaRVJPO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWRlTm9kZSA9IHNpZGVOb2Rlc1tpIC0gb2Zmc2V0T2ZTaWRlTm9kZXNdO1xuICAgICAgfVxuICAgICAgaWYgKGdldEJpdEF0RnJvbU1TQihrZXksIE1BWF9IRUlHSFQgLSAxIC0gaSkgPT09IDEpIHtcbiAgICAgICAgW2N1cnJlbnRIYXNoLCBjdXJyZW50RGF0YV0gPSBoYXNoTm9kZTIoc2lkZU5vZGUsIGN1cnJlbnREYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFtjdXJyZW50SGFzaCwgY3VycmVudERhdGFdID0gaGFzaE5vZGUyKGN1cnJlbnREYXRhLCBzaWRlTm9kZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldChjdXJyZW50SGFzaCwgY3VycmVudERhdGEpO1xuICAgICAgY3VycmVudERhdGEgPSBjdXJyZW50SGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRIYXNoO1xuICB9XG4gIHVwZGF0ZShrZXksIHZhbHVlKSB7XG4gICAgY29uc3QgW3NpZGVOb2Rlcywgb2xkTGVhZkhhc2gsIG9sZExlYWZEYXRhXSA9IHRoaXMuc2lkZU5vZGVzRm9yUm9vdChrZXksIHRoaXMucm9vdCk7XG4gICAgY29uc3QgbmV3Um9vdCA9IHRoaXMudXBkYXRlV2l0aFNpZGVOb2RlcyhrZXksIHZhbHVlLCBzaWRlTm9kZXMsIG9sZExlYWZIYXNoLCBvbGRMZWFmRGF0YSk7XG4gICAgdGhpcy5zZXRSb290KG5ld1Jvb3QpO1xuICB9XG4gIGRlbGV0ZShrZXkpIHtcbiAgICBjb25zdCBbc2lkZU5vZGVzLCBvbGRMZWFmSGFzaCwgb2xkTGVhZkRhdGFdID0gdGhpcy5zaWRlTm9kZXNGb3JSb290KGtleSwgdGhpcy5yb290KTtcbiAgICBjb25zdCBuZXdSb290ID0gdGhpcy5kZWxldGVXaXRoU2lkZU5vZGVzKGtleSwgc2lkZU5vZGVzLCBvbGRMZWFmSGFzaCwgb2xkTGVhZkRhdGEpO1xuICAgIHRoaXMuc2V0Um9vdChuZXdSb290KTtcbiAgfVxuICBwcm92ZShrZXkpIHtcbiAgICBjb25zdCBbc2lkZU5vZGVzLCBsZWFmSGFzaCwgbGVhZkRhdGEsIHNpYmxpbmdEYXRhXSA9IHRoaXMuc2lkZU5vZGVzRm9yUm9vdChrZXksIHRoaXMucm9vdCk7XG4gICAgY29uc3Qgbm9uRW1wdHlTaWRlTm9kZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpZGVOb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNpZGVOb2Rlc1tpXSAhPT0gXCJcIikge1xuICAgICAgICBub25FbXB0eVNpZGVOb2Rlcy5wdXNoKHNpZGVOb2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBub25NZW1iZXJzaGlwTGVhZkRhdGEgPSBcIlwiO1xuICAgIGlmIChsZWFmSGFzaCAhPT0gWkVSTykge1xuICAgICAgY29uc3QgW2FjdHVhbFBhdGhdID0gcGFyc2VMZWFmKGxlYWZEYXRhKTtcbiAgICAgIGlmIChhY3R1YWxQYXRoICE9PSBrZXkpIHtcbiAgICAgICAgbm9uTWVtYmVyc2hpcExlYWZEYXRhID0gbGVhZkRhdGE7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByb29mID0gbmV3IHNwYXJzZU1lcmtsZVByb29mX2RlZmF1bHQobm9uRW1wdHlTaWRlTm9kZXMsIG5vbk1lbWJlcnNoaXBMZWFmRGF0YSwgc2libGluZ0RhdGEpO1xuICAgIHJldHVybiBwcm9vZjtcbiAgfVxuICBwcm92ZUNvbXBhY3RlZChrZXkpIHtcbiAgICBjb25zdCBwcm9vZiA9IHRoaXMucHJvdmUoa2V5KTtcbiAgICBjb25zdCBjb21wYWN0ZWRQcm9vZiA9IGNvbXBhY3RQcm9vZihwcm9vZik7XG4gICAgcmV0dXJuIGNvbXBhY3RlZFByb29mO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgU3BhcnNlTWVya2xlVHJlZSxcbiAgY2FsY1Jvb3QsXG4gIGNvbnN0cnVjdFRyZWUsXG4gIGdldFByb29mLFxuICBoYXNoTGVhZixcbiAgaGFzaE5vZGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/merkle/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/program/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@fuel-ts/program/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractContract: () => (/* binding */ AbstractContract),\n/* harmony export */   AbstractProgram: () => (/* binding */ AbstractProgram),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   FunctionInvocationScope: () => (/* binding */ FunctionInvocationScope),\n/* harmony export */   InstructionSet: () => (/* binding */ InstructionSet),\n/* harmony export */   MultiCallInvocationScope: () => (/* binding */ MultiCallInvocationScope),\n/* harmony export */   ScriptRequest: () => (/* binding */ ScriptRequest),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   buildDryRunResult: () => (/* binding */ buildDryRunResult),\n/* harmony export */   buildFunctionResult: () => (/* binding */ buildFunctionResult),\n/* harmony export */   extractInvocationResult: () => (/* binding */ extractInvocationResult),\n/* harmony export */   getAbisFromAllCalls: () => (/* binding */ getAbisFromAllCalls),\n/* harmony export */   getResultLogs: () => (/* binding */ getResultLogs)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/account */ \"(ssr)/./node_modules/@fuel-ts/account/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/address */ \"(ssr)/./node_modules/@fuel-ts/address/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/transactions */ \"(ssr)/./node_modules/@fuel-ts/transactions/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @fuels/vm-asm */ \"(ssr)/./node_modules/@fuels/vm-asm/dist/node/index.cjs\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ramda */ \"(ssr)/./node_modules/ramda/es/clone.js\");\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @fuel-ts/address/configs */ \"(ssr)/./node_modules/@fuel-ts/address/dist/configs.mjs\");\n// src/types.ts\nvar AbstractProgram = class {\n};\nvar AbstractContract = class extends AbstractProgram {\n};\n\n// src/utils.ts\n\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR, message);\n  }\n}\nfunction getAbisFromAllCalls(functionScopes) {\n  return functionScopes.reduce((acc, funcScope, i) => {\n    const { program, externalAbis } = funcScope.getCallConfig();\n    if (i === 0) {\n      acc.main = program.interface.jsonAbi;\n      acc.otherContractsAbis = {};\n    } else {\n      acc.otherContractsAbis[program.id.toB256()] = program.interface.jsonAbi;\n    }\n    acc.otherContractsAbis = { ...acc.otherContractsAbis, ...externalAbis };\n    return acc;\n  }, {});\n}\nvar getResultLogs = (receipts, mainCallConfig, functionScopes) => {\n  if (!mainCallConfig) {\n    return [];\n  }\n  const { main, otherContractsAbis } = getAbisFromAllCalls(functionScopes);\n  return (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getDecodedLogs)(receipts, main, otherContractsAbis);\n};\n\n// src/functions/invocation-scope.ts\n\n\n\n// src/functions/base-invocation-scope.ts\n\n\n\n\n\n\n\n\n\n// src/contract-call-script.ts\n\n\n\n\n\n\n\n\n// src/instruction-set.ts\n\nvar InstructionSet = class {\n  #operations;\n  constructor(...args) {\n    this.#operations = args || [];\n  }\n  entries() {\n    return this.#operations;\n  }\n  push(...args) {\n    this.#operations.push(...args);\n  }\n  concat(ops) {\n    return this.#operations.concat(ops);\n  }\n  extend(ops) {\n    this.#operations.push(...ops);\n  }\n  toBytes() {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(\n      this.#operations.reduce((instructions, line) => {\n        instructions.push(line.to_bytes());\n        return instructions;\n      }, [])\n    );\n  }\n  toHex() {\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.hexlify)(this.toBytes());\n  }\n  toString() {\n    return `Program:\n${JSON.stringify(this.#operations, null, 2)}`;\n  }\n  byteLength() {\n    return this.toBytes().byteLength;\n  }\n};\n\n// src/script-request.ts\n\n\n\n\n\nvar calculateScriptDataBaseOffset = (maxInputs) => _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.SCRIPT_FIXED_SIZE + (0,_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.calculateVmTxMemory)({ maxInputs });\nvar POINTER_DATA_OFFSET = _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.ASSET_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\nfunction callResultToScriptResult(callResult) {\n  const receipts = [...callResult.receipts];\n  let scriptResultReceipt;\n  let returnReceipt;\n  receipts.forEach((receipt) => {\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ScriptResult) {\n      scriptResultReceipt = receipt;\n    } else if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData || receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Revert) {\n      returnReceipt = receipt;\n    }\n  });\n  if (!scriptResultReceipt || !returnReceipt) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const scriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult\n  };\n  return scriptResult;\n}\nfunction decodeCallResult(callResult, decoder, logs = []) {\n  try {\n    const scriptResult = callResultToScriptResult(callResult);\n    return decoder(scriptResult);\n  } catch (error) {\n    if (error.code === _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED) {\n      const statusReason = callResult?.dryRunStatus?.reason;\n      throw (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.extractTxError)({\n        logs,\n        receipts: callResult.receipts,\n        statusReason\n      });\n    }\n    throw error;\n  }\n}\nfunction callResultToInvocationResult(callResult, call2, logs) {\n  return decodeCallResult(\n    callResult,\n    (scriptResult) => {\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Revert) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED,\n          `Script Reverted. Logs: ${JSON.stringify(logs)}`\n        );\n      }\n      if (scriptResult.returnReceipt.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return && scriptResult.returnReceipt.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n        const { type } = scriptResult.returnReceipt;\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED,\n          `Script Return Type [${type}] Invalid. Logs: ${JSON.stringify({\n            logs,\n            receipt: scriptResult.returnReceipt\n          })}`\n        );\n      }\n      let value;\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return) {\n        value = scriptResult.returnReceipt.val;\n      }\n      if (scriptResult.returnReceipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n        const decoded = call2.func.decodeOutput(scriptResult.returnReceipt.data);\n        value = decoded[0];\n      }\n      return value;\n    },\n    logs\n  );\n}\nvar ScriptRequest = class {\n  /**\n   * The bytes of the script.\n   */\n  bytes;\n  /**\n   * A function to encode the script data.\n   */\n  scriptDataEncoder;\n  /**\n   * A function to decode the script result.\n   */\n  scriptResultDecoder;\n  /**\n   * Creates an instance of the ScriptRequest class.\n   *\n   * @param bytes - The bytes of the script.\n   * @param scriptDataEncoder - The script data encoder function.\n   * @param scriptResultDecoder - The script result decoder function.\n   */\n  constructor(bytes, scriptDataEncoder, scriptResultDecoder2) {\n    this.bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder2;\n  }\n  /**\n   * Gets the script data offset for the given bytes.\n   *\n   * @param byteLength - The byte length of the script.\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  static getScriptDataOffsetWithScriptBytes(byteLength, maxInputs) {\n    const scriptDataBaseOffset = (0,_fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.calculateVmTxMemory)({ maxInputs }) + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.SCRIPT_FIXED_SIZE;\n    return scriptDataBaseOffset + byteLength;\n  }\n  /**\n   * Gets the script data offset.\n   *\n   * @param maxInputs - The maxInputs value from the chain's consensus params.\n   * @returns The script data offset.\n   */\n  getScriptDataOffset(maxInputs) {\n    return ScriptRequest.getScriptDataOffsetWithScriptBytes(this.bytes.length, maxInputs);\n  }\n  /**\n   * Encodes the data for a script call.\n   *\n   * @param data - The script data.\n   * @returns The encoded data.\n   */\n  encodeScriptData(data) {\n    const callScript = this.scriptDataEncoder(data);\n    if (ArrayBuffer.isView(callScript)) {\n      return callScript;\n    }\n    this.bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(callScript.script);\n    return callScript.data;\n  }\n  /**\n   * Decodes the result of a script call.\n   *\n   * @param callResult - The CallResult from the script call.\n   * @param logs - Optional logs associated with the decoding.\n   * @returns The decoded result.\n   */\n  decodeCallResult(callResult, logs = []) {\n    return decodeCallResult(callResult, this.scriptResultDecoder, logs);\n  }\n};\n\n// src/contract-call-script.ts\nvar DEFAULT_OPCODE_PARAMS = {\n  assetIdOffset: 0,\n  amountOffset: 0,\n  gasForwardedOffset: 0,\n  callDataOffset: 0\n};\nvar SCRIPT_WRAPPER_CONTRACT_ID = _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__.ZeroBytes32;\nvar getSingleCallInstructions = ({\n  callDataOffset,\n  gasForwardedOffset,\n  amountOffset,\n  assetIdOffset\n}) => {\n  const inst = new InstructionSet(\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(16, callDataOffset),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(17, amountOffset),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.lw(17, 17, 0),\n    _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(18, assetIdOffset)\n  );\n  if (gasForwardedOffset) {\n    inst.push(\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.movi(19, gasForwardedOffset),\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.lw(19, 19, 0),\n      _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.call(16, 17, 18, 19)\n    );\n  } else {\n    inst.push(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.call(16, 17, 18, _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.RegId.cgas().to_u8()));\n  }\n  return inst;\n};\nfunction getInstructions(offsets) {\n  if (!offsets.length) {\n    return new Uint8Array();\n  }\n  const multiCallInstructions = new InstructionSet();\n  for (let i = 0; i < offsets.length; i += 1) {\n    multiCallInstructions.extend(getSingleCallInstructions(offsets[i]).entries());\n  }\n  multiCallInstructions.push(_fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.ret(1));\n  return multiCallInstructions.toBytes();\n}\nvar isReturnType = (type) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return || type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData;\nvar getMainCallReceipt = (receipts, contractId) => receipts.find(\n  ({ type, id, to }) => type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Call && id === SCRIPT_WRAPPER_CONTRACT_ID && to === contractId\n);\nvar scriptResultDecoder = (contractId) => (result) => {\n  if ((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.toNumber)(result.code) !== 0) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.SCRIPT_REVERTED, `Transaction reverted.`);\n  }\n  const mainCallResult = getMainCallReceipt(\n    result.receipts,\n    contractId.toB256()\n  );\n  const mainCallInstructionStart = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(mainCallResult?.is);\n  const receipts = result.receipts;\n  return receipts.filter(({ type }) => isReturnType(type)).flatMap((receipt) => {\n    if (!mainCallInstructionStart.eq((0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(receipt.is))) {\n      return [];\n    }\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.Return) {\n      return [new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(receipt.val)];\n    }\n    if (receipt.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.ReceiptType.ReturnData) {\n      const encodedScriptReturn = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(receipt.data);\n      return [encodedScriptReturn];\n    }\n    return [new Uint8Array()];\n  });\n};\nvar decodeContractCallScriptResult = (callResult, contractId, logs = []) => decodeCallResult(callResult, scriptResultDecoder(contractId), logs);\nvar getCallInstructionsLength = (contractCalls) => contractCalls.reduce(\n  (sum, call2) => {\n    const offset = { ...DEFAULT_OPCODE_PARAMS };\n    if (call2.gas) {\n      offset.gasForwardedOffset = 1;\n    }\n    return sum + getSingleCallInstructions(offset).byteLength();\n  },\n  _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.Instruction.size()\n  // placeholder for single RET instruction which is added later\n);\nvar getContractCallScript = (functionScopes, maxInputs) => new ScriptRequest(\n  // Script to call the contract, start with stub size matching length of calls\n  getInstructions(new Array(functionScopes.length).fill(DEFAULT_OPCODE_PARAMS)),\n  (contractCalls) => {\n    const TOTAL_CALLS = contractCalls.length;\n    if (TOTAL_CALLS === 0) {\n      return { data: new Uint8Array(), script: new Uint8Array() };\n    }\n    const callInstructionsLength = getCallInstructionsLength(contractCalls);\n    const paddingLength = (8 - callInstructionsLength % 8) % 8;\n    const paddedInstructionsLength = callInstructionsLength + paddingLength;\n    const dataOffset = calculateScriptDataBaseOffset(maxInputs.toNumber()) + paddedInstructionsLength;\n    const paramOffsets = [];\n    let segmentOffset = dataOffset;\n    const scriptData = [];\n    for (let i = 0; i < TOTAL_CALLS; i += 1) {\n      const call2 = contractCalls[i];\n      const amountOffset = segmentOffset;\n      const assetIdOffset = amountOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\n      const callDataOffset = assetIdOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.ASSET_ID_LEN;\n      const encodedSelectorOffset = callDataOffset + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.CONTRACT_ID_LEN + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE + _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.WORD_SIZE;\n      const encodedArgsOffset = encodedSelectorOffset + call2.fnSelectorBytes.byteLength;\n      const encodedArgs = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.arrayify)(call2.data);\n      let gasForwardedOffset = 0;\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(call2.amount || 0));\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.B256Coder().encode(call2.assetId?.toString() || _fuel_ts_address_configs__WEBPACK_IMPORTED_MODULE_8__.ZeroBytes32));\n      scriptData.push(call2.contractId.toBytes());\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(encodedSelectorOffset));\n      scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(encodedArgsOffset));\n      scriptData.push(call2.fnSelectorBytes);\n      scriptData.push(encodedArgs);\n      if (call2.gas) {\n        scriptData.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.BigNumberCoder(\"u64\").encode(call2.gas));\n        gasForwardedOffset = encodedArgsOffset + encodedArgs.byteLength;\n      }\n      const callParamOffsets = {\n        amountOffset,\n        assetIdOffset,\n        gasForwardedOffset,\n        callDataOffset\n      };\n      paramOffsets.push(callParamOffsets);\n      segmentOffset = dataOffset + (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(scriptData).byteLength;\n    }\n    const script = getInstructions(paramOffsets);\n    const finalScriptData = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.concat)(scriptData);\n    return { data: finalScriptData, script };\n  },\n  () => [new Uint8Array()]\n);\n\n// src/response.ts\n\nvar extractInvocationResult = (functionScopes, receipts, isMultiCall, logs) => {\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  if (functionScopes.length === 1 && mainCallConfig && \"bytes\" in mainCallConfig.program) {\n    return callResultToInvocationResult({ receipts }, mainCallConfig, logs);\n  }\n  const encodedResults = decodeContractCallScriptResult(\n    { receipts },\n    (mainCallConfig?.program).id,\n    logs\n  );\n  const decodedResults = encodedResults.map((encodedResult, i) => {\n    const { func } = functionScopes[i].getCallConfig();\n    return func.decodeOutput(encodedResult)?.[0];\n  });\n  return isMultiCall ? decodedResults : decodedResults?.[0];\n};\nvar buildFunctionResult = async (params) => {\n  const { funcScope, isMultiCall, program, transactionResponse } = params;\n  const txResult = await transactionResponse.waitForResult();\n  const { receipts } = txResult;\n  const functionScopes = Array.isArray(funcScope) ? funcScope : [funcScope];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const logs = getResultLogs(receipts, mainCallConfig, functionScopes);\n  const value = extractInvocationResult(functionScopes, receipts, isMultiCall, logs);\n  const gasUsed = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getGasUsedFromReceipts)(receipts);\n  const submitResult = {\n    isMultiCall,\n    functionScopes,\n    value,\n    program,\n    transactionResult: txResult,\n    transactionResponse,\n    transactionId: transactionResponse.id,\n    logs,\n    gasUsed\n  };\n  return submitResult;\n};\nvar buildDryRunResult = (params) => {\n  const { funcScopes, callResult, isMultiCall } = params;\n  const { receipts } = callResult;\n  const functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];\n  const mainCallConfig = functionScopes[0]?.getCallConfig();\n  const logs = getResultLogs(receipts, mainCallConfig, functionScopes);\n  const value = extractInvocationResult(functionScopes, receipts, isMultiCall, logs);\n  const gasUsed = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.getGasUsedFromReceipts)(receipts);\n  const submitResult = {\n    functionScopes,\n    callResult,\n    isMultiCall,\n    gasUsed,\n    value\n  };\n  return submitResult;\n};\n\n// src/functions/base-invocation-scope.ts\nfunction createContractCall(funcScope) {\n  const { program, args, forward, func, callParameters, externalAbis } = funcScope.getCallConfig();\n  const data = func.encodeArguments(args);\n  return {\n    contractId: program.id,\n    fnSelectorBytes: func.selectorBytes,\n    data,\n    assetId: forward?.assetId,\n    amount: forward?.amount,\n    gas: callParameters?.gasLimit,\n    externalContractsAbis: externalAbis\n  };\n}\nvar BaseInvocationScope = class {\n  transactionRequest;\n  program;\n  functionInvocationScopes = [];\n  txParameters;\n  requiredCoins = [];\n  isMultiCall = false;\n  hasCallParamsGasLimit = false;\n  // flag to check if any of the callParams has gasLimit set\n  externalAbis = {};\n  addSignersCallback;\n  /**\n   * Constructs an instance of BaseInvocationScope.\n   *\n   * @param program - The abstract program to be invoked.\n   * @param isMultiCall - A flag indicating whether the invocation is a multi-call.\n   */\n  constructor(program, isMultiCall) {\n    this.program = program;\n    this.isMultiCall = isMultiCall;\n    this.transactionRequest = new _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.ScriptTransactionRequest();\n  }\n  /**\n   * Getter for the contract calls.\n   *\n   * @returns An array of contract calls.\n   */\n  get calls() {\n    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));\n  }\n  /**\n   * Updates the script request with the current contract calls.\n   */\n  async updateScriptRequest() {\n    const provider = this.getProvider();\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs }\n      }\n    } = await provider.getChain();\n    const contractCallScript = getContractCallScript(this.functionInvocationScopes, maxInputs);\n    this.transactionRequest.setScript(contractCallScript, this.calls);\n  }\n  /**\n   * Updates the transaction request with the current input/output.\n   */\n  updateContractInputAndOutput() {\n    const calls = this.calls;\n    calls.forEach((c) => {\n      if (c.contractId) {\n        this.transactionRequest.addContractInputAndOutput(c.contractId);\n      }\n      if (c.externalContractsAbis) {\n        Object.keys(c.externalContractsAbis).forEach(\n          (contractId) => this.transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(contractId))\n        );\n      }\n    });\n  }\n  /**\n   * Gets the required coins for the transaction.\n   *\n   * @returns An array of required coin quantities.\n   */\n  getRequiredCoins() {\n    const forwardingAssets = this.calls.map((call2) => ({\n      assetId: String(call2.assetId),\n      amount: (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(call2.amount || 0)\n    })).filter(({ assetId, amount }) => assetId && !(0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(amount).isZero());\n    return forwardingAssets;\n  }\n  /**\n   * Updates the required coins for the transaction.\n   */\n  updateRequiredCoins() {\n    const assets = this.getRequiredCoins();\n    const reduceForwardCoins = (requiredCoins, { assetId, amount }) => {\n      const currentAmount = requiredCoins.get(assetId)?.amount || (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0);\n      return requiredCoins.set(assetId, {\n        assetId: String(assetId),\n        amount: currentAmount.add(amount)\n      });\n    };\n    this.requiredCoins = Array.from(\n      assets.reduce(reduceForwardCoins, /* @__PURE__ */ new Map()).values()\n    );\n  }\n  /**\n   * Adds a single call to the invocation scope.\n   *\n   * @param funcScope - The function scope to add.\n   * @returns The current instance of the class.\n   */\n  addCall(funcScope) {\n    this.addCalls([funcScope]);\n    return this;\n  }\n  /**\n   * Adds multiple calls to the invocation scope.\n   *\n   * @param funcScopes - An array of function scopes to add.\n   * @returns The current instance of the class.\n   */\n  addCalls(funcScopes) {\n    this.functionInvocationScopes.push(...funcScopes);\n    this.updateContractInputAndOutput();\n    this.updateRequiredCoins();\n    return this;\n  }\n  /**\n   * Prepares the transaction by updating the script request, required coins, and checking the gas limit.\n   */\n  async prepareTransaction() {\n    await _fuels_vm_asm__WEBPACK_IMPORTED_MODULE_6__.initWasm();\n    await this.updateScriptRequest();\n    this.updateRequiredCoins();\n    this.checkGasLimitTotal();\n    if (this.transactionRequest.type === _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.TransactionType.Script) {\n      this.transactionRequest.abis = getAbisFromAllCalls(this.functionInvocationScopes);\n    }\n  }\n  /**\n   * Checks if the total gas limit is within the acceptable range.\n   */\n  checkGasLimitTotal() {\n    const gasLimitOnCalls = this.calls.reduce((total, call2) => total.add(call2.gas || 0), (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(0));\n    if (this.transactionRequest.gasLimit.eq(0)) {\n      this.transactionRequest.gasLimit = gasLimitOnCalls;\n    } else if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR,\n        \"Transaction's gasLimit must be equal to or greater than the combined forwarded gas of all calls.\"\n      );\n    }\n  }\n  /**\n   * Gets the transaction cost for dry running the transaction.\n   *\n   * @returns The transaction cost details.\n   */\n  async getTransactionCost() {\n    const request = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(await this.getTransactionRequest());\n    const account = this.program.account ?? _fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.Wallet.generate({ provider: this.getProvider() });\n    return account.getTransactionCost(request, {\n      quantities: this.getRequiredCoins(),\n      signatureCallback: this.addSignersCallback\n    });\n  }\n  /**\n   * Costs and funds the underlying transaction request.\n   *\n   * @returns The invocation scope as a funded transaction request.\n   */\n  async fundWithRequiredCoins() {\n    let transactionRequest = await this.getTransactionRequest();\n    transactionRequest = (0,ramda__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(transactionRequest);\n    const txCost = await this.getTransactionCost();\n    const { gasUsed, missingContractIds, outputVariables, maxFee } = txCost;\n    this.setDefaultTxParams(transactionRequest, gasUsed, maxFee);\n    transactionRequest.inputs = transactionRequest.inputs.filter((i) => i.type !== _fuel_ts_transactions__WEBPACK_IMPORTED_MODULE_4__.InputType.Coin);\n    missingContractIds.forEach((contractId) => {\n      transactionRequest.addContractInputAndOutput(new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(contractId));\n    });\n    transactionRequest.addVariableOutputs(outputVariables);\n    await this.program.account?.fund(transactionRequest, txCost);\n    if (this.addSignersCallback) {\n      await this.addSignersCallback(transactionRequest);\n    }\n    return transactionRequest;\n  }\n  /**\n   * Sets the transaction parameters.\n   *\n   * @param txParams - The transaction parameters to set.\n   * @returns The current instance of the class.\n   */\n  txParams(txParams) {\n    this.txParameters = txParams;\n    const request = this.transactionRequest;\n    request.tip = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.tip || request.tip);\n    request.gasLimit = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.gasLimit || request.gasLimit);\n    request.maxFee = txParams.maxFee ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.maxFee) : request.maxFee;\n    request.witnessLimit = txParams.witnessLimit ? (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_3__.bn)(txParams.witnessLimit) : request.witnessLimit;\n    request.maturity = txParams.maturity || request.maturity;\n    request.addVariableOutputs(this.txParameters?.variableOutputs || 0);\n    return this;\n  }\n  /**\n   * Adds contracts to the invocation scope.\n   *\n   * @param contracts - An array of contracts to add.\n   * @returns The current instance of the class.\n   */\n  addContracts(contracts) {\n    contracts.forEach((contract) => {\n      this.transactionRequest.addContractInputAndOutput(contract.id);\n      this.externalAbis[contract.id.toB256()] = contract.interface.jsonAbi;\n    });\n    return this;\n  }\n  /**\n   * Adds an asset transfer to an Account on the contract call transaction request.\n   *\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The current instance of the class.\n   */\n  addTransfer(transferParams) {\n    const { amount, destination, assetId } = transferParams;\n    this.transactionRequest = this.transactionRequest.addCoinOutput(\n      new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(destination),\n      amount,\n      assetId\n    );\n    return this;\n  }\n  /**\n   * Adds multiple transfers to the contract call transaction request.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The current instance of the class.\n   */\n  addBatchTransfer(transferParams) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.transactionRequest = this.transactionRequest.addCoinOutput(\n        new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(destination),\n        amount,\n        assetId\n      );\n    });\n    return this;\n  }\n  addSigners(signers) {\n    this.addSignersCallback = (transactionRequest) => transactionRequest.addAccountWitnesses(signers);\n    return this;\n  }\n  /**\n   * Prepares and returns the transaction request object.\n   *\n   * @returns The prepared transaction request.\n   */\n  async getTransactionRequest() {\n    await this.prepareTransaction();\n    return this.transactionRequest;\n  }\n  /**\n   * Submits the contract call transaction and returns a promise that resolves to an object\n   * containing the transaction ID and a function to wait for the result. The promise will resolve\n   * as soon as the transaction is submitted to the node.\n   *\n   * @returns A promise that resolves to an object containing:\n   * - `transactionId`: The ID of the submitted transaction.\n   * - `waitForResult`: A function that waits for the transaction result.\n   * @template T - The type of the return value.\n   */\n  async call() {\n    assert(this.program.account, \"Wallet is required!\");\n    const transactionRequest = await this.fundWithRequiredCoins();\n    const response = await this.program.account.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    const transactionId = response.id;\n    return {\n      transactionId,\n      waitForResult: async () => buildFunctionResult({\n        funcScope: this.functionInvocationScopes,\n        isMultiCall: this.isMultiCall,\n        program: this.program,\n        transactionResponse: response\n      })\n    };\n  }\n  /**\n   * Simulates a transaction.\n   *\n   * @returns The result of the invocation call.\n   */\n  async simulate() {\n    assert(this.program.account, \"Wallet is required!\");\n    if (!(\"populateTransactionWitnessesSignature\" in this.program.account)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.ABI_MAIN_METHOD_MISSING,\n        \"An unlocked wallet is required to simulate a contract call.\"\n      );\n    }\n    const transactionRequest = await this.fundWithRequiredCoins();\n    const callResult = await this.program.account.simulateTransaction(transactionRequest, {\n      estimateTxDependencies: false\n    });\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  /**\n   * Executes a transaction in dry run mode.\n   *\n   * @returns The result of the invocation call.\n   */\n  async dryRun() {\n    const { receipts } = await this.getTransactionCost();\n    const callResult = {\n      receipts\n    };\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  async get() {\n    const { receipts } = await this.getTransactionCost();\n    const callResult = {\n      receipts\n    };\n    return buildDryRunResult({\n      funcScopes: this.functionInvocationScopes,\n      callResult,\n      isMultiCall: this.isMultiCall\n    });\n  }\n  getProvider() {\n    const provider = this.program.provider;\n    return provider;\n  }\n  /**\n   * Obtains the ID of a transaction.\n   *\n   * @param chainId - the chainId to use to hash the transaction with\n   * @returns the ID of the transaction.\n   */\n  async getTransactionId(chainId) {\n    const chainIdToHash = chainId ?? await this.getProvider().getChainId();\n    const transactionRequest = await this.getTransactionRequest();\n    return transactionRequest.getTransactionId(chainIdToHash);\n  }\n  /**\n   * In case the gasLimit is *not* set by the user, this method sets a default value.\n   */\n  setDefaultTxParams(transactionRequest, gasUsed, maxFee) {\n    const gasLimitSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.txParameters?.gasLimit) || this.hasCallParamsGasLimit;\n    const maxFeeSpecified = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.txParameters?.maxFee);\n    const { gasLimit: setGasLimit, maxFee: setMaxFee } = transactionRequest;\n    if (!gasLimitSpecified) {\n      transactionRequest.gasLimit = gasUsed;\n    } else if (setGasLimit.lt(gasUsed)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n    if (!maxFeeSpecified) {\n      transactionRequest.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n  }\n};\n\n// src/functions/invocation-scope.ts\nvar FunctionInvocationScope = class extends BaseInvocationScope {\n  func;\n  callParameters;\n  forward;\n  args;\n  /**\n   * Constructs an instance of FunctionInvocationScope.\n   *\n   * @param program - The program.\n   * @param func - The function fragment.\n   * @param args - The arguments.\n   */\n  constructor(program, func, args) {\n    super(program, false);\n    this.func = func;\n    this.args = args || [];\n    this.setArguments(...args);\n    super.addCall(this);\n  }\n  /**\n   * Gets the call configuration.\n   *\n   * @returns The call configuration.\n   */\n  getCallConfig() {\n    return {\n      func: this.func,\n      program: this.program,\n      callParameters: this.callParameters,\n      txParameters: this.txParameters,\n      forward: this.forward,\n      args: this.args,\n      externalAbis: this.externalAbis\n    };\n  }\n  /**\n   * Sets the arguments for the function invocation.\n   *\n   * @param args - The arguments.\n   * @returns The instance of FunctionInvocationScope.\n   */\n  setArguments(...args) {\n    this.args = args || [];\n    return this;\n  }\n  /**\n   * Sets the call parameters for the function invocation.\n   *\n   * @param callParams - The call parameters.\n   * @returns The instance of FunctionInvocationScope.\n   * @throws If the function is not payable and forward is set.\n   */\n  callParams(callParams) {\n    if (!this.hasCallParamsGasLimit && callParams?.gasLimit !== void 0) {\n      this.hasCallParamsGasLimit = true;\n    }\n    this.callParameters = callParams;\n    if (callParams?.forward) {\n      if (!this.func.attributes.find((attr) => attr.name === \"payable\")) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_ERROR,\n          `The target function ${this.func.name} cannot accept forwarded funds as it's not marked as 'payable'.`\n        );\n      }\n      this.forward = (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_0__.coinQuantityfy)(callParams.forward);\n    }\n    this.setArguments(...this.args);\n    this.updateRequiredCoins();\n    return this;\n  }\n};\n\n// src/functions/multicall-scope.ts\nvar MultiCallInvocationScope = class extends BaseInvocationScope {\n  /**\n   * Constructs an instance of MultiCallInvocationScope.\n   *\n   * @param contract - The contract.\n   * @param funcScopes - An array of function invocation scopes.\n   */\n  constructor(contract, funcScopes) {\n    super(contract, true);\n    this.addCalls(funcScopes);\n  }\n  /**\n   * Adds a single function invocation scope to the multi-call invocation scope.\n   *\n   * @param funcScope - The function invocation scope.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCall(funcScope) {\n    return super.addCalls([funcScope]);\n  }\n  /**\n   * Adds multiple function invocation scopes to the multi-call invocation scope.\n   *\n   * @param funcScopes - An array of function invocation scopes.\n   * @returns The instance of MultiCallInvocationScope.\n   */\n  addCalls(funcScopes) {\n    return super.addCalls(funcScopes);\n  }\n};\n\n// src/contract.ts\n\n\nvar Contract = class {\n  /**\n   * The unique contract identifier.\n   */\n  id;\n  /**\n   * The provider for interacting with the contract.\n   */\n  provider;\n  /**\n   * The contract's ABI interface.\n   */\n  interface;\n  /**\n   * The account associated with the contract, if available.\n   */\n  account;\n  /**\n   * A collection of functions available on the contract.\n   */\n  functions = {};\n  /**\n   * Creates an instance of the Contract class.\n   *\n   * @param id - The contract's address.\n   * @param abi - The contract's ABI (JSON ABI or Interface instance).\n   * @param accountOrProvider - The account or provider for interaction.\n   */\n  constructor(id, abi, accountOrProvider) {\n    this.interface = abi instanceof _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.Interface ? abi : new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_7__.Interface(abi);\n    this.id = new _fuel_ts_address__WEBPACK_IMPORTED_MODULE_2__.Address(id);\n    if (accountOrProvider && \"provider\" in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.functions, fragment.name, {\n        value: this.buildFunction(fragment),\n        writable: false\n      });\n    });\n  }\n  /**\n   * Build a function invocation scope for the provided function fragment.\n   *\n   * @param func - The function fragment to build a scope for.\n   * @returns A function that creates a FunctionInvocationScope.\n   */\n  buildFunction(func) {\n    return (() => {\n      const funcInvocationScopeCreator = (...args) => new FunctionInvocationScope(this, func, args);\n      Object.defineProperty(funcInvocationScopeCreator, \"isReadOnly\", {\n        value: () => func.isReadOnly(),\n        writable: false\n      });\n      return funcInvocationScopeCreator;\n    })();\n  }\n  /**\n   * Create a multi-call invocation scope for the provided function invocation scopes.\n   *\n   * @param calls - An array of FunctionInvocationScopes to execute in a batch.\n   * @returns A MultiCallInvocationScope instance.\n   */\n  multiCall(calls) {\n    return new MultiCallInvocationScope(this, calls);\n  }\n  /**\n   * Get the balance for a given asset ID for this contract.\n   *\n   * @param assetId - The specified asset ID.\n   * @returns The balance of the contract for the specified asset.\n   */\n  getBalance(assetId) {\n    return this.provider.getContractBalance(this.id, assetId);\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvcHJvZ3JhbS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDa0Q7QUFDSztBQUN2RDtBQUNBO0FBQ0EsY0FBYyxzREFBUyxDQUFDLHNEQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwyQkFBMkI7QUFDckMsU0FBUyxnRUFBYztBQUN2Qjs7QUFFQTtBQUNrRDtBQUNpQzs7QUFFbkY7QUFDb0U7QUFDekI7QUFDd0M7QUFDekM7QUFDeUI7QUFDeEI7QUFDTDtBQUNSOztBQUU5QjtBQU80QjtBQUMyQjtBQUM0QjtBQUN0QztBQUN1QjtBQUNNO0FBQ3JDOztBQUVyQztBQUNpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNEQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVEQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMENBQTBDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFPNEI7QUFDc0I7QUFDaUM7QUFDL0I7QUFDVjtBQUMxQyxtREFBbUQsaUVBQWlCLEdBQUcsdUVBQW1CLEdBQUcsV0FBVztBQUN4RywwQkFBMEIseURBQVMsR0FBRyw0REFBWSxHQUFHLCtEQUFlLEdBQUcseURBQVMsR0FBRyx5REFBUztBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDhEQUFXO0FBQ3BDO0FBQ0EsTUFBTSwwQkFBMEIsOERBQVcsNEJBQTRCLDhEQUFXLGdDQUFnQyw4REFBVztBQUM3SDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxzREFBVSxDQUFDLHNEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSix1QkFBdUIsc0RBQVU7QUFDakM7QUFDQSxZQUFZLGdFQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDhEQUFXO0FBQ3pELGtCQUFrQixzREFBVTtBQUM1QixVQUFVLHNEQUFVO0FBQ3BCLG9DQUFvQyxxQkFBcUI7QUFDekQ7QUFDQTtBQUNBLDhDQUE4Qyw4REFBVywrQ0FBK0MsOERBQVc7QUFDbkgsZ0JBQWdCLE9BQU87QUFDdkIsa0JBQWtCLHNEQUFVO0FBQzVCLFVBQVUsc0RBQVU7QUFDcEIsaUNBQWlDLEtBQUssbUJBQW1CO0FBQ3pEO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsOERBQVc7QUFDekQ7QUFDQTtBQUNBLDhDQUE4Qyw4REFBVztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0RBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx1RUFBbUIsR0FBRyxXQUFXLElBQUksaUVBQWlCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdEQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGlFQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLCtDQUFRO0FBQ1osSUFBSSwrQ0FBUTtBQUNaLElBQUksNkNBQU07QUFDVixJQUFJLCtDQUFRO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsTUFBTSwrQ0FBUTtBQUNkLE1BQU0sNkNBQU07QUFDWixNQUFNLCtDQUFRO0FBQ2Q7QUFDQSxJQUFJO0FBQ0osY0FBYywrQ0FBUSxhQUFhLGdEQUFTO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQSw2QkFBNkIsOENBQU87QUFDcEM7QUFDQTtBQUNBLHNDQUFzQyw4REFBWSxvQkFBb0IsOERBQVk7QUFDbEY7QUFDQSxLQUFLLGNBQWMsY0FBYyw4REFBWTtBQUM3QztBQUNBO0FBQ0EsTUFBTSx1REFBUTtBQUNkLGNBQWMsc0RBQVUsQ0FBQyxzREFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlEQUFFO0FBQ3JDO0FBQ0EsNEJBQTRCLE1BQU07QUFDbEMscUNBQXFDLGlEQUFFO0FBQ3ZDO0FBQ0E7QUFDQSx5QkFBeUIsOERBQVk7QUFDckMsa0JBQWtCLDhEQUFjO0FBQ2hDO0FBQ0EseUJBQXlCLDhEQUFZO0FBQ3JDLGtDQUFrQyx3REFBUztBQUMzQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRSxzREFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQSwyQ0FBMkMseURBQVU7QUFDckQsNkNBQTZDLDREQUFhO0FBQzFELHFEQUFxRCwrREFBZ0IsR0FBRyx5REFBVSxHQUFHLHlEQUFVO0FBQy9GO0FBQ0EsMEJBQTBCLHdEQUFTO0FBQ25DO0FBQ0EsMEJBQTBCLDhEQUFjO0FBQ3hDLDBCQUEwQix5REFBUyx1Q0FBdUMsaUVBQVc7QUFDckY7QUFDQSwwQkFBMEIsOERBQWM7QUFDeEMsMEJBQTBCLDhEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsc0RBQU87QUFDMUM7QUFDQTtBQUNBLDRCQUE0QixzREFBTztBQUNuQyxhQUFhO0FBQ2IsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVU7QUFDcEQ7QUFDQTtBQUNBLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxVQUFVLHVEQUF1RDtBQUNqRTtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3RUFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDO0FBQ2hELFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3RUFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLDZEQUE2RDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzRUFBd0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixxREFBTztBQUN2RjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQUc7QUFDakIsS0FBSyxhQUFhLGlCQUFpQixpQkFBaUIsaURBQUc7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUJBQWlCO0FBQ2xFLGtFQUFrRSxpREFBRztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1EQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxrRUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRixpREFBRztBQUM5RjtBQUNBO0FBQ0EsTUFBTTtBQUNOLGdCQUFnQixzREFBVTtBQUMxQixRQUFRLHNEQUFVO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlEQUFLO0FBQ3pCLDRDQUE0QyxvREFBTSxZQUFZLDhCQUE4QjtBQUM1RjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBSztBQUM5QjtBQUNBLFlBQVksdURBQXVEO0FBQ25FO0FBQ0EsbUZBQW1GLDREQUFTO0FBQzVGO0FBQ0EsdURBQXVELHFEQUFPO0FBQzlELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpREFBRztBQUNyQix1QkFBdUIsaURBQUc7QUFDMUIsdUNBQXVDLGlEQUFHO0FBQzFDLG1EQUFtRCxpREFBRztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0JBQStCO0FBQzNDO0FBQ0EsVUFBVSxxREFBTztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOEJBQThCO0FBQzVEO0FBQ0EsWUFBWSxxREFBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0RBQVU7QUFDMUIsUUFBUSxzREFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlEQUFTO0FBQ3ZDLDRCQUE0Qix5REFBUztBQUNyQyxZQUFZLDJDQUEyQztBQUN2RDtBQUNBO0FBQ0EsTUFBTTtBQUNOLGdCQUFnQixzREFBVTtBQUMxQixRQUFRLHNEQUFVO0FBQ2xCLHNCQUFzQixZQUFZLGlDQUFpQyxRQUFRO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGdCQUFnQixzREFBVTtBQUMxQixRQUFRLHNEQUFVO0FBQ2xCLG9CQUFvQixVQUFVLGlDQUFpQyxPQUFPO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzREFBVTtBQUM1QixVQUFVLHNEQUFVO0FBQ3BCLGlDQUFpQyxnQkFBZ0I7QUFDakQ7QUFDQTtBQUNBLHFCQUFxQixnRUFBYztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDK0M7QUFDUTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHlEQUFTLGFBQWEseURBQVM7QUFDbkUsa0JBQWtCLHFEQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZUU7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvanVib2lpL0Z1ZWwvQXJjYW5lL25vZGVfbW9kdWxlcy9AZnVlbC10cy9wcm9ncmFtL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy90eXBlcy50c1xudmFyIEFic3RyYWN0UHJvZ3JhbSA9IGNsYXNzIHtcbn07XG52YXIgQWJzdHJhY3RDb250cmFjdCA9IGNsYXNzIGV4dGVuZHMgQWJzdHJhY3RQcm9ncmFtIHtcbn07XG5cbi8vIHNyYy91dGlscy50c1xuaW1wb3J0IHsgZ2V0RGVjb2RlZExvZ3MgfSBmcm9tIFwiQGZ1ZWwtdHMvYWNjb3VudFwiO1xuaW1wb3J0IHsgRXJyb3JDb2RlLCBGdWVsRXJyb3IgfSBmcm9tIFwiQGZ1ZWwtdHMvZXJyb3JzXCI7XG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEZ1ZWxFcnJvcihFcnJvckNvZGUuVFJBTlNBQ1RJT05fRVJST1IsIG1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBYmlzRnJvbUFsbENhbGxzKGZ1bmN0aW9uU2NvcGVzKSB7XG4gIHJldHVybiBmdW5jdGlvblNjb3Blcy5yZWR1Y2UoKGFjYywgZnVuY1Njb3BlLCBpKSA9PiB7XG4gICAgY29uc3QgeyBwcm9ncmFtLCBleHRlcm5hbEFiaXMgfSA9IGZ1bmNTY29wZS5nZXRDYWxsQ29uZmlnKCk7XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIGFjYy5tYWluID0gcHJvZ3JhbS5pbnRlcmZhY2UuanNvbkFiaTtcbiAgICAgIGFjYy5vdGhlckNvbnRyYWN0c0FiaXMgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjLm90aGVyQ29udHJhY3RzQWJpc1twcm9ncmFtLmlkLnRvQjI1NigpXSA9IHByb2dyYW0uaW50ZXJmYWNlLmpzb25BYmk7XG4gICAgfVxuICAgIGFjYy5vdGhlckNvbnRyYWN0c0FiaXMgPSB7IC4uLmFjYy5vdGhlckNvbnRyYWN0c0FiaXMsIC4uLmV4dGVybmFsQWJpcyB9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbnZhciBnZXRSZXN1bHRMb2dzID0gKHJlY2VpcHRzLCBtYWluQ2FsbENvbmZpZywgZnVuY3Rpb25TY29wZXMpID0+IHtcbiAgaWYgKCFtYWluQ2FsbENvbmZpZykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCB7IG1haW4sIG90aGVyQ29udHJhY3RzQWJpcyB9ID0gZ2V0QWJpc0Zyb21BbGxDYWxscyhmdW5jdGlvblNjb3Blcyk7XG4gIHJldHVybiBnZXREZWNvZGVkTG9ncyhyZWNlaXB0cywgbWFpbiwgb3RoZXJDb250cmFjdHNBYmlzKTtcbn07XG5cbi8vIHNyYy9mdW5jdGlvbnMvaW52b2NhdGlvbi1zY29wZS50c1xuaW1wb3J0IHsgY29pblF1YW50aXR5ZnkgfSBmcm9tIFwiQGZ1ZWwtdHMvYWNjb3VudFwiO1xuaW1wb3J0IHsgRXJyb3JDb2RlIGFzIEVycm9yQ29kZTUsIEZ1ZWxFcnJvciBhcyBGdWVsRXJyb3I1IH0gZnJvbSBcIkBmdWVsLXRzL2Vycm9yc1wiO1xuXG4vLyBzcmMvZnVuY3Rpb25zL2Jhc2UtaW52b2NhdGlvbi1zY29wZS50c1xuaW1wb3J0IHsgU2NyaXB0VHJhbnNhY3Rpb25SZXF1ZXN0LCBXYWxsZXQgfSBmcm9tIFwiQGZ1ZWwtdHMvYWNjb3VudFwiO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gXCJAZnVlbC10cy9hZGRyZXNzXCI7XG5pbXBvcnQgeyBFcnJvckNvZGUgYXMgRXJyb3JDb2RlNCwgRnVlbEVycm9yIGFzIEZ1ZWxFcnJvcjQgfSBmcm9tIFwiQGZ1ZWwtdHMvZXJyb3JzXCI7XG5pbXBvcnQgeyBibiBhcyBibjIgfSBmcm9tIFwiQGZ1ZWwtdHMvbWF0aFwiO1xuaW1wb3J0IHsgSW5wdXRUeXBlLCBUcmFuc2FjdGlvblR5cGUgfSBmcm9tIFwiQGZ1ZWwtdHMvdHJhbnNhY3Rpb25zXCI7XG5pbXBvcnQgeyBpc0RlZmluZWQgfSBmcm9tIFwiQGZ1ZWwtdHMvdXRpbHNcIjtcbmltcG9ydCAqIGFzIGFzbTIgZnJvbSBcIkBmdWVscy92bS1hc21cIjtcbmltcG9ydCB7IGNsb25lIH0gZnJvbSBcInJhbWRhXCI7XG5cbi8vIHNyYy9jb250cmFjdC1jYWxsLXNjcmlwdC50c1xuaW1wb3J0IHtcbiAgV09SRF9TSVpFIGFzIFdPUkRfU0laRTIsXG4gIEIyNTZDb2RlcixcbiAgQVNTRVRfSURfTEVOIGFzIEFTU0VUX0lEX0xFTjIsXG4gIEJpZ051bWJlckNvZGVyLFxuICBDT05UUkFDVF9JRF9MRU4gYXMgQ09OVFJBQ1RfSURfTEVOMlxufSBmcm9tIFwiQGZ1ZWwtdHMvYWJpLWNvZGVyXCI7XG5pbXBvcnQgeyBaZXJvQnl0ZXMzMiB9IGZyb20gXCJAZnVlbC10cy9hZGRyZXNzL2NvbmZpZ3NcIjtcbmltcG9ydCB7IEVycm9yQ29kZSBhcyBFcnJvckNvZGUzLCBGdWVsRXJyb3IgYXMgRnVlbEVycm9yMyB9IGZyb20gXCJAZnVlbC10cy9lcnJvcnNcIjtcbmltcG9ydCB7IGJuLCB0b051bWJlciB9IGZyb20gXCJAZnVlbC10cy9tYXRoXCI7XG5pbXBvcnQgeyBSZWNlaXB0VHlwZSBhcyBSZWNlaXB0VHlwZTIgfSBmcm9tIFwiQGZ1ZWwtdHMvdHJhbnNhY3Rpb25zXCI7XG5pbXBvcnQgeyBjb25jYXQgYXMgY29uY2F0MiwgYXJyYXlpZnkgYXMgYXJyYXlpZnkyIH0gZnJvbSBcIkBmdWVsLXRzL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyBhc20gZnJvbSBcIkBmdWVscy92bS1hc21cIjtcblxuLy8gc3JjL2luc3RydWN0aW9uLXNldC50c1xuaW1wb3J0IHsgY29uY2F0LCBoZXhsaWZ5IH0gZnJvbSBcIkBmdWVsLXRzL3V0aWxzXCI7XG52YXIgSW5zdHJ1Y3Rpb25TZXQgPSBjbGFzcyB7XG4gICNvcGVyYXRpb25zO1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgdGhpcy4jb3BlcmF0aW9ucyA9IGFyZ3MgfHwgW107XG4gIH1cbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gdGhpcy4jb3BlcmF0aW9ucztcbiAgfVxuICBwdXNoKC4uLmFyZ3MpIHtcbiAgICB0aGlzLiNvcGVyYXRpb25zLnB1c2goLi4uYXJncyk7XG4gIH1cbiAgY29uY2F0KG9wcykge1xuICAgIHJldHVybiB0aGlzLiNvcGVyYXRpb25zLmNvbmNhdChvcHMpO1xuICB9XG4gIGV4dGVuZChvcHMpIHtcbiAgICB0aGlzLiNvcGVyYXRpb25zLnB1c2goLi4ub3BzKTtcbiAgfVxuICB0b0J5dGVzKCkge1xuICAgIHJldHVybiBjb25jYXQoXG4gICAgICB0aGlzLiNvcGVyYXRpb25zLnJlZHVjZSgoaW5zdHJ1Y3Rpb25zLCBsaW5lKSA9PiB7XG4gICAgICAgIGluc3RydWN0aW9ucy5wdXNoKGxpbmUudG9fYnl0ZXMoKSk7XG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbnM7XG4gICAgICB9LCBbXSlcbiAgICApO1xuICB9XG4gIHRvSGV4KCkge1xuICAgIHJldHVybiBoZXhsaWZ5KHRoaXMudG9CeXRlcygpKTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYFByb2dyYW06XG4ke0pTT04uc3RyaW5naWZ5KHRoaXMuI29wZXJhdGlvbnMsIG51bGwsIDIpfWA7XG4gIH1cbiAgYnl0ZUxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy50b0J5dGVzKCkuYnl0ZUxlbmd0aDtcbiAgfVxufTtcblxuLy8gc3JjL3NjcmlwdC1yZXF1ZXN0LnRzXG5pbXBvcnQge1xuICBBU1NFVF9JRF9MRU4sXG4gIENPTlRSQUNUX0lEX0xFTixcbiAgU0NSSVBUX0ZJWEVEX1NJWkUsXG4gIFdPUkRfU0laRSxcbiAgY2FsY3VsYXRlVm1UeE1lbW9yeVxufSBmcm9tIFwiQGZ1ZWwtdHMvYWJpLWNvZGVyXCI7XG5pbXBvcnQgeyBleHRyYWN0VHhFcnJvciB9IGZyb20gXCJAZnVlbC10cy9hY2NvdW50XCI7XG5pbXBvcnQgeyBFcnJvckNvZGUgYXMgRXJyb3JDb2RlMiwgRnVlbEVycm9yIGFzIEZ1ZWxFcnJvcjIgfSBmcm9tIFwiQGZ1ZWwtdHMvZXJyb3JzXCI7XG5pbXBvcnQgeyBSZWNlaXB0VHlwZSB9IGZyb20gXCJAZnVlbC10cy90cmFuc2FjdGlvbnNcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBmdWVsLXRzL3V0aWxzXCI7XG52YXIgY2FsY3VsYXRlU2NyaXB0RGF0YUJhc2VPZmZzZXQgPSAobWF4SW5wdXRzKSA9PiBTQ1JJUFRfRklYRURfU0laRSArIGNhbGN1bGF0ZVZtVHhNZW1vcnkoeyBtYXhJbnB1dHMgfSk7XG52YXIgUE9JTlRFUl9EQVRBX09GRlNFVCA9IFdPUkRfU0laRSArIEFTU0VUX0lEX0xFTiArIENPTlRSQUNUX0lEX0xFTiArIFdPUkRfU0laRSArIFdPUkRfU0laRTtcbmZ1bmN0aW9uIGNhbGxSZXN1bHRUb1NjcmlwdFJlc3VsdChjYWxsUmVzdWx0KSB7XG4gIGNvbnN0IHJlY2VpcHRzID0gWy4uLmNhbGxSZXN1bHQucmVjZWlwdHNdO1xuICBsZXQgc2NyaXB0UmVzdWx0UmVjZWlwdDtcbiAgbGV0IHJldHVyblJlY2VpcHQ7XG4gIHJlY2VpcHRzLmZvckVhY2goKHJlY2VpcHQpID0+IHtcbiAgICBpZiAocmVjZWlwdC50eXBlID09PSBSZWNlaXB0VHlwZS5TY3JpcHRSZXN1bHQpIHtcbiAgICAgIHNjcmlwdFJlc3VsdFJlY2VpcHQgPSByZWNlaXB0O1xuICAgIH0gZWxzZSBpZiAocmVjZWlwdC50eXBlID09PSBSZWNlaXB0VHlwZS5SZXR1cm4gfHwgcmVjZWlwdC50eXBlID09PSBSZWNlaXB0VHlwZS5SZXR1cm5EYXRhIHx8IHJlY2VpcHQudHlwZSA9PT0gUmVjZWlwdFR5cGUuUmV2ZXJ0KSB7XG4gICAgICByZXR1cm5SZWNlaXB0ID0gcmVjZWlwdDtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXNjcmlwdFJlc3VsdFJlY2VpcHQgfHwgIXJldHVyblJlY2VpcHQpIHtcbiAgICB0aHJvdyBuZXcgRnVlbEVycm9yMihFcnJvckNvZGUyLlNDUklQVF9SRVZFUlRFRCwgYFRyYW5zYWN0aW9uIHJldmVydGVkLmApO1xuICB9XG4gIGNvbnN0IHNjcmlwdFJlc3VsdCA9IHtcbiAgICBjb2RlOiBzY3JpcHRSZXN1bHRSZWNlaXB0LnJlc3VsdCxcbiAgICBnYXNVc2VkOiBzY3JpcHRSZXN1bHRSZWNlaXB0Lmdhc1VzZWQsXG4gICAgcmVjZWlwdHMsXG4gICAgc2NyaXB0UmVzdWx0UmVjZWlwdCxcbiAgICByZXR1cm5SZWNlaXB0LFxuICAgIGNhbGxSZXN1bHRcbiAgfTtcbiAgcmV0dXJuIHNjcmlwdFJlc3VsdDtcbn1cbmZ1bmN0aW9uIGRlY29kZUNhbGxSZXN1bHQoY2FsbFJlc3VsdCwgZGVjb2RlciwgbG9ncyA9IFtdKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2NyaXB0UmVzdWx0ID0gY2FsbFJlc3VsdFRvU2NyaXB0UmVzdWx0KGNhbGxSZXN1bHQpO1xuICAgIHJldHVybiBkZWNvZGVyKHNjcmlwdFJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09IEVycm9yQ29kZTIuU0NSSVBUX1JFVkVSVEVEKSB7XG4gICAgICBjb25zdCBzdGF0dXNSZWFzb24gPSBjYWxsUmVzdWx0Py5kcnlSdW5TdGF0dXM/LnJlYXNvbjtcbiAgICAgIHRocm93IGV4dHJhY3RUeEVycm9yKHtcbiAgICAgICAgbG9ncyxcbiAgICAgICAgcmVjZWlwdHM6IGNhbGxSZXN1bHQucmVjZWlwdHMsXG4gICAgICAgIHN0YXR1c1JlYXNvblxuICAgICAgfSk7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5mdW5jdGlvbiBjYWxsUmVzdWx0VG9JbnZvY2F0aW9uUmVzdWx0KGNhbGxSZXN1bHQsIGNhbGwyLCBsb2dzKSB7XG4gIHJldHVybiBkZWNvZGVDYWxsUmVzdWx0KFxuICAgIGNhbGxSZXN1bHQsXG4gICAgKHNjcmlwdFJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHNjcmlwdFJlc3VsdC5yZXR1cm5SZWNlaXB0LnR5cGUgPT09IFJlY2VpcHRUeXBlLlJldmVydCkge1xuICAgICAgICB0aHJvdyBuZXcgRnVlbEVycm9yMihcbiAgICAgICAgICBFcnJvckNvZGUyLlNDUklQVF9SRVZFUlRFRCxcbiAgICAgICAgICBgU2NyaXB0IFJldmVydGVkLiBMb2dzOiAke0pTT04uc3RyaW5naWZ5KGxvZ3MpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzY3JpcHRSZXN1bHQucmV0dXJuUmVjZWlwdC50eXBlICE9PSBSZWNlaXB0VHlwZS5SZXR1cm4gJiYgc2NyaXB0UmVzdWx0LnJldHVyblJlY2VpcHQudHlwZSAhPT0gUmVjZWlwdFR5cGUuUmV0dXJuRGF0YSkge1xuICAgICAgICBjb25zdCB7IHR5cGUgfSA9IHNjcmlwdFJlc3VsdC5yZXR1cm5SZWNlaXB0O1xuICAgICAgICB0aHJvdyBuZXcgRnVlbEVycm9yMihcbiAgICAgICAgICBFcnJvckNvZGUyLlNDUklQVF9SRVZFUlRFRCxcbiAgICAgICAgICBgU2NyaXB0IFJldHVybiBUeXBlIFske3R5cGV9XSBJbnZhbGlkLiBMb2dzOiAke0pTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGxvZ3MsXG4gICAgICAgICAgICByZWNlaXB0OiBzY3JpcHRSZXN1bHQucmV0dXJuUmVjZWlwdFxuICAgICAgICAgIH0pfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxldCB2YWx1ZTtcbiAgICAgIGlmIChzY3JpcHRSZXN1bHQucmV0dXJuUmVjZWlwdC50eXBlID09PSBSZWNlaXB0VHlwZS5SZXR1cm4pIHtcbiAgICAgICAgdmFsdWUgPSBzY3JpcHRSZXN1bHQucmV0dXJuUmVjZWlwdC52YWw7XG4gICAgICB9XG4gICAgICBpZiAoc2NyaXB0UmVzdWx0LnJldHVyblJlY2VpcHQudHlwZSA9PT0gUmVjZWlwdFR5cGUuUmV0dXJuRGF0YSkge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gY2FsbDIuZnVuYy5kZWNvZGVPdXRwdXQoc2NyaXB0UmVzdWx0LnJldHVyblJlY2VpcHQuZGF0YSk7XG4gICAgICAgIHZhbHVlID0gZGVjb2RlZFswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIGxvZ3NcbiAgKTtcbn1cbnZhciBTY3JpcHRSZXF1ZXN0ID0gY2xhc3Mge1xuICAvKipcbiAgICogVGhlIGJ5dGVzIG9mIHRoZSBzY3JpcHQuXG4gICAqL1xuICBieXRlcztcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdG8gZW5jb2RlIHRoZSBzY3JpcHQgZGF0YS5cbiAgICovXG4gIHNjcmlwdERhdGFFbmNvZGVyO1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBkZWNvZGUgdGhlIHNjcmlwdCByZXN1bHQuXG4gICAqL1xuICBzY3JpcHRSZXN1bHREZWNvZGVyO1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgU2NyaXB0UmVxdWVzdCBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIC0gVGhlIGJ5dGVzIG9mIHRoZSBzY3JpcHQuXG4gICAqIEBwYXJhbSBzY3JpcHREYXRhRW5jb2RlciAtIFRoZSBzY3JpcHQgZGF0YSBlbmNvZGVyIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gc2NyaXB0UmVzdWx0RGVjb2RlciAtIFRoZSBzY3JpcHQgcmVzdWx0IGRlY29kZXIgZnVuY3Rpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihieXRlcywgc2NyaXB0RGF0YUVuY29kZXIsIHNjcmlwdFJlc3VsdERlY29kZXIyKSB7XG4gICAgdGhpcy5ieXRlcyA9IGFycmF5aWZ5KGJ5dGVzKTtcbiAgICB0aGlzLnNjcmlwdERhdGFFbmNvZGVyID0gc2NyaXB0RGF0YUVuY29kZXI7XG4gICAgdGhpcy5zY3JpcHRSZXN1bHREZWNvZGVyID0gc2NyaXB0UmVzdWx0RGVjb2RlcjI7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNjcmlwdCBkYXRhIG9mZnNldCBmb3IgdGhlIGdpdmVuIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCAtIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgc2NyaXB0LlxuICAgKiBAcGFyYW0gbWF4SW5wdXRzIC0gVGhlIG1heElucHV0cyB2YWx1ZSBmcm9tIHRoZSBjaGFpbidzIGNvbnNlbnN1cyBwYXJhbXMuXG4gICAqIEByZXR1cm5zIFRoZSBzY3JpcHQgZGF0YSBvZmZzZXQuXG4gICAqL1xuICBzdGF0aWMgZ2V0U2NyaXB0RGF0YU9mZnNldFdpdGhTY3JpcHRCeXRlcyhieXRlTGVuZ3RoLCBtYXhJbnB1dHMpIHtcbiAgICBjb25zdCBzY3JpcHREYXRhQmFzZU9mZnNldCA9IGNhbGN1bGF0ZVZtVHhNZW1vcnkoeyBtYXhJbnB1dHMgfSkgKyBTQ1JJUFRfRklYRURfU0laRTtcbiAgICByZXR1cm4gc2NyaXB0RGF0YUJhc2VPZmZzZXQgKyBieXRlTGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzY3JpcHQgZGF0YSBvZmZzZXQuXG4gICAqXG4gICAqIEBwYXJhbSBtYXhJbnB1dHMgLSBUaGUgbWF4SW5wdXRzIHZhbHVlIGZyb20gdGhlIGNoYWluJ3MgY29uc2Vuc3VzIHBhcmFtcy5cbiAgICogQHJldHVybnMgVGhlIHNjcmlwdCBkYXRhIG9mZnNldC5cbiAgICovXG4gIGdldFNjcmlwdERhdGFPZmZzZXQobWF4SW5wdXRzKSB7XG4gICAgcmV0dXJuIFNjcmlwdFJlcXVlc3QuZ2V0U2NyaXB0RGF0YU9mZnNldFdpdGhTY3JpcHRCeXRlcyh0aGlzLmJ5dGVzLmxlbmd0aCwgbWF4SW5wdXRzKTtcbiAgfVxuICAvKipcbiAgICogRW5jb2RlcyB0aGUgZGF0YSBmb3IgYSBzY3JpcHQgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBUaGUgc2NyaXB0IGRhdGEuXG4gICAqIEByZXR1cm5zIFRoZSBlbmNvZGVkIGRhdGEuXG4gICAqL1xuICBlbmNvZGVTY3JpcHREYXRhKGRhdGEpIHtcbiAgICBjb25zdCBjYWxsU2NyaXB0ID0gdGhpcy5zY3JpcHREYXRhRW5jb2RlcihkYXRhKTtcbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGNhbGxTY3JpcHQpKSB7XG4gICAgICByZXR1cm4gY2FsbFNjcmlwdDtcbiAgICB9XG4gICAgdGhpcy5ieXRlcyA9IGFycmF5aWZ5KGNhbGxTY3JpcHQuc2NyaXB0KTtcbiAgICByZXR1cm4gY2FsbFNjcmlwdC5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSByZXN1bHQgb2YgYSBzY3JpcHQgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxSZXN1bHQgLSBUaGUgQ2FsbFJlc3VsdCBmcm9tIHRoZSBzY3JpcHQgY2FsbC5cbiAgICogQHBhcmFtIGxvZ3MgLSBPcHRpb25hbCBsb2dzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGVjb2RpbmcuXG4gICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHJlc3VsdC5cbiAgICovXG4gIGRlY29kZUNhbGxSZXN1bHQoY2FsbFJlc3VsdCwgbG9ncyA9IFtdKSB7XG4gICAgcmV0dXJuIGRlY29kZUNhbGxSZXN1bHQoY2FsbFJlc3VsdCwgdGhpcy5zY3JpcHRSZXN1bHREZWNvZGVyLCBsb2dzKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbnRyYWN0LWNhbGwtc2NyaXB0LnRzXG52YXIgREVGQVVMVF9PUENPREVfUEFSQU1TID0ge1xuICBhc3NldElkT2Zmc2V0OiAwLFxuICBhbW91bnRPZmZzZXQ6IDAsXG4gIGdhc0ZvcndhcmRlZE9mZnNldDogMCxcbiAgY2FsbERhdGFPZmZzZXQ6IDBcbn07XG52YXIgU0NSSVBUX1dSQVBQRVJfQ09OVFJBQ1RfSUQgPSBaZXJvQnl0ZXMzMjtcbnZhciBnZXRTaW5nbGVDYWxsSW5zdHJ1Y3Rpb25zID0gKHtcbiAgY2FsbERhdGFPZmZzZXQsXG4gIGdhc0ZvcndhcmRlZE9mZnNldCxcbiAgYW1vdW50T2Zmc2V0LFxuICBhc3NldElkT2Zmc2V0XG59KSA9PiB7XG4gIGNvbnN0IGluc3QgPSBuZXcgSW5zdHJ1Y3Rpb25TZXQoXG4gICAgYXNtLm1vdmkoMTYsIGNhbGxEYXRhT2Zmc2V0KSxcbiAgICBhc20ubW92aSgxNywgYW1vdW50T2Zmc2V0KSxcbiAgICBhc20ubHcoMTcsIDE3LCAwKSxcbiAgICBhc20ubW92aSgxOCwgYXNzZXRJZE9mZnNldClcbiAgKTtcbiAgaWYgKGdhc0ZvcndhcmRlZE9mZnNldCkge1xuICAgIGluc3QucHVzaChcbiAgICAgIGFzbS5tb3ZpKDE5LCBnYXNGb3J3YXJkZWRPZmZzZXQpLFxuICAgICAgYXNtLmx3KDE5LCAxOSwgMCksXG4gICAgICBhc20uY2FsbCgxNiwgMTcsIDE4LCAxOSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGluc3QucHVzaChhc20uY2FsbCgxNiwgMTcsIDE4LCBhc20uUmVnSWQuY2dhcygpLnRvX3U4KCkpKTtcbiAgfVxuICByZXR1cm4gaW5zdDtcbn07XG5mdW5jdGlvbiBnZXRJbnN0cnVjdGlvbnMob2Zmc2V0cykge1xuICBpZiAoIW9mZnNldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCk7XG4gIH1cbiAgY29uc3QgbXVsdGlDYWxsSW5zdHJ1Y3Rpb25zID0gbmV3IEluc3RydWN0aW9uU2V0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIG11bHRpQ2FsbEluc3RydWN0aW9ucy5leHRlbmQoZ2V0U2luZ2xlQ2FsbEluc3RydWN0aW9ucyhvZmZzZXRzW2ldKS5lbnRyaWVzKCkpO1xuICB9XG4gIG11bHRpQ2FsbEluc3RydWN0aW9ucy5wdXNoKGFzbS5yZXQoMSkpO1xuICByZXR1cm4gbXVsdGlDYWxsSW5zdHJ1Y3Rpb25zLnRvQnl0ZXMoKTtcbn1cbnZhciBpc1JldHVyblR5cGUgPSAodHlwZSkgPT4gdHlwZSA9PT0gUmVjZWlwdFR5cGUyLlJldHVybiB8fCB0eXBlID09PSBSZWNlaXB0VHlwZTIuUmV0dXJuRGF0YTtcbnZhciBnZXRNYWluQ2FsbFJlY2VpcHQgPSAocmVjZWlwdHMsIGNvbnRyYWN0SWQpID0+IHJlY2VpcHRzLmZpbmQoXG4gICh7IHR5cGUsIGlkLCB0byB9KSA9PiB0eXBlID09PSBSZWNlaXB0VHlwZTIuQ2FsbCAmJiBpZCA9PT0gU0NSSVBUX1dSQVBQRVJfQ09OVFJBQ1RfSUQgJiYgdG8gPT09IGNvbnRyYWN0SWRcbik7XG52YXIgc2NyaXB0UmVzdWx0RGVjb2RlciA9IChjb250cmFjdElkKSA9PiAocmVzdWx0KSA9PiB7XG4gIGlmICh0b051bWJlcihyZXN1bHQuY29kZSkgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRnVlbEVycm9yMyhFcnJvckNvZGUzLlNDUklQVF9SRVZFUlRFRCwgYFRyYW5zYWN0aW9uIHJldmVydGVkLmApO1xuICB9XG4gIGNvbnN0IG1haW5DYWxsUmVzdWx0ID0gZ2V0TWFpbkNhbGxSZWNlaXB0KFxuICAgIHJlc3VsdC5yZWNlaXB0cyxcbiAgICBjb250cmFjdElkLnRvQjI1NigpXG4gICk7XG4gIGNvbnN0IG1haW5DYWxsSW5zdHJ1Y3Rpb25TdGFydCA9IGJuKG1haW5DYWxsUmVzdWx0Py5pcyk7XG4gIGNvbnN0IHJlY2VpcHRzID0gcmVzdWx0LnJlY2VpcHRzO1xuICByZXR1cm4gcmVjZWlwdHMuZmlsdGVyKCh7IHR5cGUgfSkgPT4gaXNSZXR1cm5UeXBlKHR5cGUpKS5mbGF0TWFwKChyZWNlaXB0KSA9PiB7XG4gICAgaWYgKCFtYWluQ2FsbEluc3RydWN0aW9uU3RhcnQuZXEoYm4ocmVjZWlwdC5pcykpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChyZWNlaXB0LnR5cGUgPT09IFJlY2VpcHRUeXBlMi5SZXR1cm4pIHtcbiAgICAgIHJldHVybiBbbmV3IEJpZ051bWJlckNvZGVyKFwidTY0XCIpLmVuY29kZShyZWNlaXB0LnZhbCldO1xuICAgIH1cbiAgICBpZiAocmVjZWlwdC50eXBlID09PSBSZWNlaXB0VHlwZTIuUmV0dXJuRGF0YSkge1xuICAgICAgY29uc3QgZW5jb2RlZFNjcmlwdFJldHVybiA9IGFycmF5aWZ5MihyZWNlaXB0LmRhdGEpO1xuICAgICAgcmV0dXJuIFtlbmNvZGVkU2NyaXB0UmV0dXJuXTtcbiAgICB9XG4gICAgcmV0dXJuIFtuZXcgVWludDhBcnJheSgpXTtcbiAgfSk7XG59O1xudmFyIGRlY29kZUNvbnRyYWN0Q2FsbFNjcmlwdFJlc3VsdCA9IChjYWxsUmVzdWx0LCBjb250cmFjdElkLCBsb2dzID0gW10pID0+IGRlY29kZUNhbGxSZXN1bHQoY2FsbFJlc3VsdCwgc2NyaXB0UmVzdWx0RGVjb2Rlcihjb250cmFjdElkKSwgbG9ncyk7XG52YXIgZ2V0Q2FsbEluc3RydWN0aW9uc0xlbmd0aCA9IChjb250cmFjdENhbGxzKSA9PiBjb250cmFjdENhbGxzLnJlZHVjZShcbiAgKHN1bSwgY2FsbDIpID0+IHtcbiAgICBjb25zdCBvZmZzZXQgPSB7IC4uLkRFRkFVTFRfT1BDT0RFX1BBUkFNUyB9O1xuICAgIGlmIChjYWxsMi5nYXMpIHtcbiAgICAgIG9mZnNldC5nYXNGb3J3YXJkZWRPZmZzZXQgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gc3VtICsgZ2V0U2luZ2xlQ2FsbEluc3RydWN0aW9ucyhvZmZzZXQpLmJ5dGVMZW5ndGgoKTtcbiAgfSxcbiAgYXNtLkluc3RydWN0aW9uLnNpemUoKVxuICAvLyBwbGFjZWhvbGRlciBmb3Igc2luZ2xlIFJFVCBpbnN0cnVjdGlvbiB3aGljaCBpcyBhZGRlZCBsYXRlclxuKTtcbnZhciBnZXRDb250cmFjdENhbGxTY3JpcHQgPSAoZnVuY3Rpb25TY29wZXMsIG1heElucHV0cykgPT4gbmV3IFNjcmlwdFJlcXVlc3QoXG4gIC8vIFNjcmlwdCB0byBjYWxsIHRoZSBjb250cmFjdCwgc3RhcnQgd2l0aCBzdHViIHNpemUgbWF0Y2hpbmcgbGVuZ3RoIG9mIGNhbGxzXG4gIGdldEluc3RydWN0aW9ucyhuZXcgQXJyYXkoZnVuY3Rpb25TY29wZXMubGVuZ3RoKS5maWxsKERFRkFVTFRfT1BDT0RFX1BBUkFNUykpLFxuICAoY29udHJhY3RDYWxscykgPT4ge1xuICAgIGNvbnN0IFRPVEFMX0NBTExTID0gY29udHJhY3RDYWxscy5sZW5ndGg7XG4gICAgaWYgKFRPVEFMX0NBTExTID09PSAwKSB7XG4gICAgICByZXR1cm4geyBkYXRhOiBuZXcgVWludDhBcnJheSgpLCBzY3JpcHQ6IG5ldyBVaW50OEFycmF5KCkgfTtcbiAgICB9XG4gICAgY29uc3QgY2FsbEluc3RydWN0aW9uc0xlbmd0aCA9IGdldENhbGxJbnN0cnVjdGlvbnNMZW5ndGgoY29udHJhY3RDYWxscyk7XG4gICAgY29uc3QgcGFkZGluZ0xlbmd0aCA9ICg4IC0gY2FsbEluc3RydWN0aW9uc0xlbmd0aCAlIDgpICUgODtcbiAgICBjb25zdCBwYWRkZWRJbnN0cnVjdGlvbnNMZW5ndGggPSBjYWxsSW5zdHJ1Y3Rpb25zTGVuZ3RoICsgcGFkZGluZ0xlbmd0aDtcbiAgICBjb25zdCBkYXRhT2Zmc2V0ID0gY2FsY3VsYXRlU2NyaXB0RGF0YUJhc2VPZmZzZXQobWF4SW5wdXRzLnRvTnVtYmVyKCkpICsgcGFkZGVkSW5zdHJ1Y3Rpb25zTGVuZ3RoO1xuICAgIGNvbnN0IHBhcmFtT2Zmc2V0cyA9IFtdO1xuICAgIGxldCBzZWdtZW50T2Zmc2V0ID0gZGF0YU9mZnNldDtcbiAgICBjb25zdCBzY3JpcHREYXRhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBUT1RBTF9DQUxMUzsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjYWxsMiA9IGNvbnRyYWN0Q2FsbHNbaV07XG4gICAgICBjb25zdCBhbW91bnRPZmZzZXQgPSBzZWdtZW50T2Zmc2V0O1xuICAgICAgY29uc3QgYXNzZXRJZE9mZnNldCA9IGFtb3VudE9mZnNldCArIFdPUkRfU0laRTI7XG4gICAgICBjb25zdCBjYWxsRGF0YU9mZnNldCA9IGFzc2V0SWRPZmZzZXQgKyBBU1NFVF9JRF9MRU4yO1xuICAgICAgY29uc3QgZW5jb2RlZFNlbGVjdG9yT2Zmc2V0ID0gY2FsbERhdGFPZmZzZXQgKyBDT05UUkFDVF9JRF9MRU4yICsgV09SRF9TSVpFMiArIFdPUkRfU0laRTI7XG4gICAgICBjb25zdCBlbmNvZGVkQXJnc09mZnNldCA9IGVuY29kZWRTZWxlY3Rvck9mZnNldCArIGNhbGwyLmZuU2VsZWN0b3JCeXRlcy5ieXRlTGVuZ3RoO1xuICAgICAgY29uc3QgZW5jb2RlZEFyZ3MgPSBhcnJheWlmeTIoY2FsbDIuZGF0YSk7XG4gICAgICBsZXQgZ2FzRm9yd2FyZGVkT2Zmc2V0ID0gMDtcbiAgICAgIHNjcmlwdERhdGEucHVzaChuZXcgQmlnTnVtYmVyQ29kZXIoXCJ1NjRcIikuZW5jb2RlKGNhbGwyLmFtb3VudCB8fCAwKSk7XG4gICAgICBzY3JpcHREYXRhLnB1c2gobmV3IEIyNTZDb2RlcigpLmVuY29kZShjYWxsMi5hc3NldElkPy50b1N0cmluZygpIHx8IFplcm9CeXRlczMyKSk7XG4gICAgICBzY3JpcHREYXRhLnB1c2goY2FsbDIuY29udHJhY3RJZC50b0J5dGVzKCkpO1xuICAgICAgc2NyaXB0RGF0YS5wdXNoKG5ldyBCaWdOdW1iZXJDb2RlcihcInU2NFwiKS5lbmNvZGUoZW5jb2RlZFNlbGVjdG9yT2Zmc2V0KSk7XG4gICAgICBzY3JpcHREYXRhLnB1c2gobmV3IEJpZ051bWJlckNvZGVyKFwidTY0XCIpLmVuY29kZShlbmNvZGVkQXJnc09mZnNldCkpO1xuICAgICAgc2NyaXB0RGF0YS5wdXNoKGNhbGwyLmZuU2VsZWN0b3JCeXRlcyk7XG4gICAgICBzY3JpcHREYXRhLnB1c2goZW5jb2RlZEFyZ3MpO1xuICAgICAgaWYgKGNhbGwyLmdhcykge1xuICAgICAgICBzY3JpcHREYXRhLnB1c2gobmV3IEJpZ051bWJlckNvZGVyKFwidTY0XCIpLmVuY29kZShjYWxsMi5nYXMpKTtcbiAgICAgICAgZ2FzRm9yd2FyZGVkT2Zmc2V0ID0gZW5jb2RlZEFyZ3NPZmZzZXQgKyBlbmNvZGVkQXJncy5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgY29uc3QgY2FsbFBhcmFtT2Zmc2V0cyA9IHtcbiAgICAgICAgYW1vdW50T2Zmc2V0LFxuICAgICAgICBhc3NldElkT2Zmc2V0LFxuICAgICAgICBnYXNGb3J3YXJkZWRPZmZzZXQsXG4gICAgICAgIGNhbGxEYXRhT2Zmc2V0XG4gICAgICB9O1xuICAgICAgcGFyYW1PZmZzZXRzLnB1c2goY2FsbFBhcmFtT2Zmc2V0cyk7XG4gICAgICBzZWdtZW50T2Zmc2V0ID0gZGF0YU9mZnNldCArIGNvbmNhdDIoc2NyaXB0RGF0YSkuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgY29uc3Qgc2NyaXB0ID0gZ2V0SW5zdHJ1Y3Rpb25zKHBhcmFtT2Zmc2V0cyk7XG4gICAgY29uc3QgZmluYWxTY3JpcHREYXRhID0gY29uY2F0MihzY3JpcHREYXRhKTtcbiAgICByZXR1cm4geyBkYXRhOiBmaW5hbFNjcmlwdERhdGEsIHNjcmlwdCB9O1xuICB9LFxuICAoKSA9PiBbbmV3IFVpbnQ4QXJyYXkoKV1cbik7XG5cbi8vIHNyYy9yZXNwb25zZS50c1xuaW1wb3J0IHsgZ2V0R2FzVXNlZEZyb21SZWNlaXB0cyB9IGZyb20gXCJAZnVlbC10cy9hY2NvdW50XCI7XG52YXIgZXh0cmFjdEludm9jYXRpb25SZXN1bHQgPSAoZnVuY3Rpb25TY29wZXMsIHJlY2VpcHRzLCBpc011bHRpQ2FsbCwgbG9ncykgPT4ge1xuICBjb25zdCBtYWluQ2FsbENvbmZpZyA9IGZ1bmN0aW9uU2NvcGVzWzBdPy5nZXRDYWxsQ29uZmlnKCk7XG4gIGlmIChmdW5jdGlvblNjb3Blcy5sZW5ndGggPT09IDEgJiYgbWFpbkNhbGxDb25maWcgJiYgXCJieXRlc1wiIGluIG1haW5DYWxsQ29uZmlnLnByb2dyYW0pIHtcbiAgICByZXR1cm4gY2FsbFJlc3VsdFRvSW52b2NhdGlvblJlc3VsdCh7IHJlY2VpcHRzIH0sIG1haW5DYWxsQ29uZmlnLCBsb2dzKTtcbiAgfVxuICBjb25zdCBlbmNvZGVkUmVzdWx0cyA9IGRlY29kZUNvbnRyYWN0Q2FsbFNjcmlwdFJlc3VsdChcbiAgICB7IHJlY2VpcHRzIH0sXG4gICAgKG1haW5DYWxsQ29uZmlnPy5wcm9ncmFtKS5pZCxcbiAgICBsb2dzXG4gICk7XG4gIGNvbnN0IGRlY29kZWRSZXN1bHRzID0gZW5jb2RlZFJlc3VsdHMubWFwKChlbmNvZGVkUmVzdWx0LCBpKSA9PiB7XG4gICAgY29uc3QgeyBmdW5jIH0gPSBmdW5jdGlvblNjb3Blc1tpXS5nZXRDYWxsQ29uZmlnKCk7XG4gICAgcmV0dXJuIGZ1bmMuZGVjb2RlT3V0cHV0KGVuY29kZWRSZXN1bHQpPy5bMF07XG4gIH0pO1xuICByZXR1cm4gaXNNdWx0aUNhbGwgPyBkZWNvZGVkUmVzdWx0cyA6IGRlY29kZWRSZXN1bHRzPy5bMF07XG59O1xudmFyIGJ1aWxkRnVuY3Rpb25SZXN1bHQgPSBhc3luYyAocGFyYW1zKSA9PiB7XG4gIGNvbnN0IHsgZnVuY1Njb3BlLCBpc011bHRpQ2FsbCwgcHJvZ3JhbSwgdHJhbnNhY3Rpb25SZXNwb25zZSB9ID0gcGFyYW1zO1xuICBjb25zdCB0eFJlc3VsdCA9IGF3YWl0IHRyYW5zYWN0aW9uUmVzcG9uc2Uud2FpdEZvclJlc3VsdCgpO1xuICBjb25zdCB7IHJlY2VpcHRzIH0gPSB0eFJlc3VsdDtcbiAgY29uc3QgZnVuY3Rpb25TY29wZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNTY29wZSkgPyBmdW5jU2NvcGUgOiBbZnVuY1Njb3BlXTtcbiAgY29uc3QgbWFpbkNhbGxDb25maWcgPSBmdW5jdGlvblNjb3Blc1swXT8uZ2V0Q2FsbENvbmZpZygpO1xuICBjb25zdCBsb2dzID0gZ2V0UmVzdWx0TG9ncyhyZWNlaXB0cywgbWFpbkNhbGxDb25maWcsIGZ1bmN0aW9uU2NvcGVzKTtcbiAgY29uc3QgdmFsdWUgPSBleHRyYWN0SW52b2NhdGlvblJlc3VsdChmdW5jdGlvblNjb3BlcywgcmVjZWlwdHMsIGlzTXVsdGlDYWxsLCBsb2dzKTtcbiAgY29uc3QgZ2FzVXNlZCA9IGdldEdhc1VzZWRGcm9tUmVjZWlwdHMocmVjZWlwdHMpO1xuICBjb25zdCBzdWJtaXRSZXN1bHQgPSB7XG4gICAgaXNNdWx0aUNhbGwsXG4gICAgZnVuY3Rpb25TY29wZXMsXG4gICAgdmFsdWUsXG4gICAgcHJvZ3JhbSxcbiAgICB0cmFuc2FjdGlvblJlc3VsdDogdHhSZXN1bHQsXG4gICAgdHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgICB0cmFuc2FjdGlvbklkOiB0cmFuc2FjdGlvblJlc3BvbnNlLmlkLFxuICAgIGxvZ3MsXG4gICAgZ2FzVXNlZFxuICB9O1xuICByZXR1cm4gc3VibWl0UmVzdWx0O1xufTtcbnZhciBidWlsZERyeVJ1blJlc3VsdCA9IChwYXJhbXMpID0+IHtcbiAgY29uc3QgeyBmdW5jU2NvcGVzLCBjYWxsUmVzdWx0LCBpc011bHRpQ2FsbCB9ID0gcGFyYW1zO1xuICBjb25zdCB7IHJlY2VpcHRzIH0gPSBjYWxsUmVzdWx0O1xuICBjb25zdCBmdW5jdGlvblNjb3BlcyA9IEFycmF5LmlzQXJyYXkoZnVuY1Njb3BlcykgPyBmdW5jU2NvcGVzIDogW2Z1bmNTY29wZXNdO1xuICBjb25zdCBtYWluQ2FsbENvbmZpZyA9IGZ1bmN0aW9uU2NvcGVzWzBdPy5nZXRDYWxsQ29uZmlnKCk7XG4gIGNvbnN0IGxvZ3MgPSBnZXRSZXN1bHRMb2dzKHJlY2VpcHRzLCBtYWluQ2FsbENvbmZpZywgZnVuY3Rpb25TY29wZXMpO1xuICBjb25zdCB2YWx1ZSA9IGV4dHJhY3RJbnZvY2F0aW9uUmVzdWx0KGZ1bmN0aW9uU2NvcGVzLCByZWNlaXB0cywgaXNNdWx0aUNhbGwsIGxvZ3MpO1xuICBjb25zdCBnYXNVc2VkID0gZ2V0R2FzVXNlZEZyb21SZWNlaXB0cyhyZWNlaXB0cyk7XG4gIGNvbnN0IHN1Ym1pdFJlc3VsdCA9IHtcbiAgICBmdW5jdGlvblNjb3BlcyxcbiAgICBjYWxsUmVzdWx0LFxuICAgIGlzTXVsdGlDYWxsLFxuICAgIGdhc1VzZWQsXG4gICAgdmFsdWVcbiAgfTtcbiAgcmV0dXJuIHN1Ym1pdFJlc3VsdDtcbn07XG5cbi8vIHNyYy9mdW5jdGlvbnMvYmFzZS1pbnZvY2F0aW9uLXNjb3BlLnRzXG5mdW5jdGlvbiBjcmVhdGVDb250cmFjdENhbGwoZnVuY1Njb3BlKSB7XG4gIGNvbnN0IHsgcHJvZ3JhbSwgYXJncywgZm9yd2FyZCwgZnVuYywgY2FsbFBhcmFtZXRlcnMsIGV4dGVybmFsQWJpcyB9ID0gZnVuY1Njb3BlLmdldENhbGxDb25maWcoKTtcbiAgY29uc3QgZGF0YSA9IGZ1bmMuZW5jb2RlQXJndW1lbnRzKGFyZ3MpO1xuICByZXR1cm4ge1xuICAgIGNvbnRyYWN0SWQ6IHByb2dyYW0uaWQsXG4gICAgZm5TZWxlY3RvckJ5dGVzOiBmdW5jLnNlbGVjdG9yQnl0ZXMsXG4gICAgZGF0YSxcbiAgICBhc3NldElkOiBmb3J3YXJkPy5hc3NldElkLFxuICAgIGFtb3VudDogZm9yd2FyZD8uYW1vdW50LFxuICAgIGdhczogY2FsbFBhcmFtZXRlcnM/Lmdhc0xpbWl0LFxuICAgIGV4dGVybmFsQ29udHJhY3RzQWJpczogZXh0ZXJuYWxBYmlzXG4gIH07XG59XG52YXIgQmFzZUludm9jYXRpb25TY29wZSA9IGNsYXNzIHtcbiAgdHJhbnNhY3Rpb25SZXF1ZXN0O1xuICBwcm9ncmFtO1xuICBmdW5jdGlvbkludm9jYXRpb25TY29wZXMgPSBbXTtcbiAgdHhQYXJhbWV0ZXJzO1xuICByZXF1aXJlZENvaW5zID0gW107XG4gIGlzTXVsdGlDYWxsID0gZmFsc2U7XG4gIGhhc0NhbGxQYXJhbXNHYXNMaW1pdCA9IGZhbHNlO1xuICAvLyBmbGFnIHRvIGNoZWNrIGlmIGFueSBvZiB0aGUgY2FsbFBhcmFtcyBoYXMgZ2FzTGltaXQgc2V0XG4gIGV4dGVybmFsQWJpcyA9IHt9O1xuICBhZGRTaWduZXJzQ2FsbGJhY2s7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGFuIGluc3RhbmNlIG9mIEJhc2VJbnZvY2F0aW9uU2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gVGhlIGFic3RyYWN0IHByb2dyYW0gdG8gYmUgaW52b2tlZC5cbiAgICogQHBhcmFtIGlzTXVsdGlDYWxsIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgaW52b2NhdGlvbiBpcyBhIG11bHRpLWNhbGwuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9ncmFtLCBpc011bHRpQ2FsbCkge1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgdGhpcy5pc011bHRpQ2FsbCA9IGlzTXVsdGlDYWxsO1xuICAgIHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0ID0gbmV3IFNjcmlwdFRyYW5zYWN0aW9uUmVxdWVzdCgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIHRoZSBjb250cmFjdCBjYWxscy5cbiAgICpcbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgY29udHJhY3QgY2FsbHMuXG4gICAqL1xuICBnZXQgY2FsbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzLm1hcCgoZnVuY1Njb3BlKSA9PiBjcmVhdGVDb250cmFjdENhbGwoZnVuY1Njb3BlKSk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHNjcmlwdCByZXF1ZXN0IHdpdGggdGhlIGN1cnJlbnQgY29udHJhY3QgY2FsbHMuXG4gICAqL1xuICBhc3luYyB1cGRhdGVTY3JpcHRSZXF1ZXN0KCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnNlbnN1c1BhcmFtZXRlcnM6IHtcbiAgICAgICAgdHhQYXJhbWV0ZXJzOiB7IG1heElucHV0cyB9XG4gICAgICB9XG4gICAgfSA9IGF3YWl0IHByb3ZpZGVyLmdldENoYWluKCk7XG4gICAgY29uc3QgY29udHJhY3RDYWxsU2NyaXB0ID0gZ2V0Q29udHJhY3RDYWxsU2NyaXB0KHRoaXMuZnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzLCBtYXhJbnB1dHMpO1xuICAgIHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0LnNldFNjcmlwdChjb250cmFjdENhbGxTY3JpcHQsIHRoaXMuY2FsbHMpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB0cmFuc2FjdGlvbiByZXF1ZXN0IHdpdGggdGhlIGN1cnJlbnQgaW5wdXQvb3V0cHV0LlxuICAgKi9cbiAgdXBkYXRlQ29udHJhY3RJbnB1dEFuZE91dHB1dCgpIHtcbiAgICBjb25zdCBjYWxscyA9IHRoaXMuY2FsbHM7XG4gICAgY2FsbHMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgaWYgKGMuY29udHJhY3RJZCkge1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uUmVxdWVzdC5hZGRDb250cmFjdElucHV0QW5kT3V0cHV0KGMuY29udHJhY3RJZCk7XG4gICAgICB9XG4gICAgICBpZiAoYy5leHRlcm5hbENvbnRyYWN0c0FiaXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoYy5leHRlcm5hbENvbnRyYWN0c0FiaXMpLmZvckVhY2goXG4gICAgICAgICAgKGNvbnRyYWN0SWQpID0+IHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0LmFkZENvbnRyYWN0SW5wdXRBbmRPdXRwdXQobmV3IEFkZHJlc3MoY29udHJhY3RJZCkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJlcXVpcmVkIGNvaW5zIGZvciB0aGUgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHJlcXVpcmVkIGNvaW4gcXVhbnRpdGllcy5cbiAgICovXG4gIGdldFJlcXVpcmVkQ29pbnMoKSB7XG4gICAgY29uc3QgZm9yd2FyZGluZ0Fzc2V0cyA9IHRoaXMuY2FsbHMubWFwKChjYWxsMikgPT4gKHtcbiAgICAgIGFzc2V0SWQ6IFN0cmluZyhjYWxsMi5hc3NldElkKSxcbiAgICAgIGFtb3VudDogYm4yKGNhbGwyLmFtb3VudCB8fCAwKVxuICAgIH0pKS5maWx0ZXIoKHsgYXNzZXRJZCwgYW1vdW50IH0pID0+IGFzc2V0SWQgJiYgIWJuMihhbW91bnQpLmlzWmVybygpKTtcbiAgICByZXR1cm4gZm9yd2FyZGluZ0Fzc2V0cztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcmVxdWlyZWQgY29pbnMgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAgICovXG4gIHVwZGF0ZVJlcXVpcmVkQ29pbnMoKSB7XG4gICAgY29uc3QgYXNzZXRzID0gdGhpcy5nZXRSZXF1aXJlZENvaW5zKCk7XG4gICAgY29uc3QgcmVkdWNlRm9yd2FyZENvaW5zID0gKHJlcXVpcmVkQ29pbnMsIHsgYXNzZXRJZCwgYW1vdW50IH0pID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRBbW91bnQgPSByZXF1aXJlZENvaW5zLmdldChhc3NldElkKT8uYW1vdW50IHx8IGJuMigwKTtcbiAgICAgIHJldHVybiByZXF1aXJlZENvaW5zLnNldChhc3NldElkLCB7XG4gICAgICAgIGFzc2V0SWQ6IFN0cmluZyhhc3NldElkKSxcbiAgICAgICAgYW1vdW50OiBjdXJyZW50QW1vdW50LmFkZChhbW91bnQpXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMucmVxdWlyZWRDb2lucyA9IEFycmF5LmZyb20oXG4gICAgICBhc3NldHMucmVkdWNlKHJlZHVjZUZvcndhcmRDb2lucywgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSkudmFsdWVzKClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgc2luZ2xlIGNhbGwgdG8gdGhlIGludm9jYXRpb24gc2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSBmdW5jU2NvcGUgLSBUaGUgZnVuY3Rpb24gc2NvcGUgdG8gYWRkLlxuICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgY2xhc3MuXG4gICAqL1xuICBhZGRDYWxsKGZ1bmNTY29wZSkge1xuICAgIHRoaXMuYWRkQ2FsbHMoW2Z1bmNTY29wZV0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBpbnZvY2F0aW9uIHNjb3BlLlxuICAgKlxuICAgKiBAcGFyYW0gZnVuY1Njb3BlcyAtIEFuIGFycmF5IG9mIGZ1bmN0aW9uIHNjb3BlcyB0byBhZGQuXG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBjbGFzcy5cbiAgICovXG4gIGFkZENhbGxzKGZ1bmNTY29wZXMpIHtcbiAgICB0aGlzLmZ1bmN0aW9uSW52b2NhdGlvblNjb3Blcy5wdXNoKC4uLmZ1bmNTY29wZXMpO1xuICAgIHRoaXMudXBkYXRlQ29udHJhY3RJbnB1dEFuZE91dHB1dCgpO1xuICAgIHRoaXMudXBkYXRlUmVxdWlyZWRDb2lucygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB0aGUgdHJhbnNhY3Rpb24gYnkgdXBkYXRpbmcgdGhlIHNjcmlwdCByZXF1ZXN0LCByZXF1aXJlZCBjb2lucywgYW5kIGNoZWNraW5nIHRoZSBnYXMgbGltaXQuXG4gICAqL1xuICBhc3luYyBwcmVwYXJlVHJhbnNhY3Rpb24oKSB7XG4gICAgYXdhaXQgYXNtMi5pbml0V2FzbSgpO1xuICAgIGF3YWl0IHRoaXMudXBkYXRlU2NyaXB0UmVxdWVzdCgpO1xuICAgIHRoaXMudXBkYXRlUmVxdWlyZWRDb2lucygpO1xuICAgIHRoaXMuY2hlY2tHYXNMaW1pdFRvdGFsKCk7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0LnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5TY3JpcHQpIHtcbiAgICAgIHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0LmFiaXMgPSBnZXRBYmlzRnJvbUFsbENhbGxzKHRoaXMuZnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdG90YWwgZ2FzIGxpbWl0IGlzIHdpdGhpbiB0aGUgYWNjZXB0YWJsZSByYW5nZS5cbiAgICovXG4gIGNoZWNrR2FzTGltaXRUb3RhbCgpIHtcbiAgICBjb25zdCBnYXNMaW1pdE9uQ2FsbHMgPSB0aGlzLmNhbGxzLnJlZHVjZSgodG90YWwsIGNhbGwyKSA9PiB0b3RhbC5hZGQoY2FsbDIuZ2FzIHx8IDApLCBibjIoMCkpO1xuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uUmVxdWVzdC5nYXNMaW1pdC5lcSgwKSkge1xuICAgICAgdGhpcy50cmFuc2FjdGlvblJlcXVlc3QuZ2FzTGltaXQgPSBnYXNMaW1pdE9uQ2FsbHM7XG4gICAgfSBlbHNlIGlmIChnYXNMaW1pdE9uQ2FsbHMuZ3QodGhpcy50cmFuc2FjdGlvblJlcXVlc3QuZ2FzTGltaXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRnVlbEVycm9yNChcbiAgICAgICAgRXJyb3JDb2RlNC5UUkFOU0FDVElPTl9FUlJPUixcbiAgICAgICAgXCJUcmFuc2FjdGlvbidzIGdhc0xpbWl0IG11c3QgYmUgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIHRoZSBjb21iaW5lZCBmb3J3YXJkZWQgZ2FzIG9mIGFsbCBjYWxscy5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHRyYW5zYWN0aW9uIGNvc3QgZm9yIGRyeSBydW5uaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHRyYW5zYWN0aW9uIGNvc3QgZGV0YWlscy5cbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uQ29zdCgpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gY2xvbmUoYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvblJlcXVlc3QoKSk7XG4gICAgY29uc3QgYWNjb3VudCA9IHRoaXMucHJvZ3JhbS5hY2NvdW50ID8/IFdhbGxldC5nZW5lcmF0ZSh7IHByb3ZpZGVyOiB0aGlzLmdldFByb3ZpZGVyKCkgfSk7XG4gICAgcmV0dXJuIGFjY291bnQuZ2V0VHJhbnNhY3Rpb25Db3N0KHJlcXVlc3QsIHtcbiAgICAgIHF1YW50aXRpZXM6IHRoaXMuZ2V0UmVxdWlyZWRDb2lucygpLFxuICAgICAgc2lnbmF0dXJlQ2FsbGJhY2s6IHRoaXMuYWRkU2lnbmVyc0NhbGxiYWNrXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENvc3RzIGFuZCBmdW5kcyB0aGUgdW5kZXJseWluZyB0cmFuc2FjdGlvbiByZXF1ZXN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgaW52b2NhdGlvbiBzY29wZSBhcyBhIGZ1bmRlZCB0cmFuc2FjdGlvbiByZXF1ZXN0LlxuICAgKi9cbiAgYXN5bmMgZnVuZFdpdGhSZXF1aXJlZENvaW5zKCkge1xuICAgIGxldCB0cmFuc2FjdGlvblJlcXVlc3QgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uUmVxdWVzdCgpO1xuICAgIHRyYW5zYWN0aW9uUmVxdWVzdCA9IGNsb25lKHRyYW5zYWN0aW9uUmVxdWVzdCk7XG4gICAgY29uc3QgdHhDb3N0ID0gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvbkNvc3QoKTtcbiAgICBjb25zdCB7IGdhc1VzZWQsIG1pc3NpbmdDb250cmFjdElkcywgb3V0cHV0VmFyaWFibGVzLCBtYXhGZWUgfSA9IHR4Q29zdDtcbiAgICB0aGlzLnNldERlZmF1bHRUeFBhcmFtcyh0cmFuc2FjdGlvblJlcXVlc3QsIGdhc1VzZWQsIG1heEZlZSk7XG4gICAgdHJhbnNhY3Rpb25SZXF1ZXN0LmlucHV0cyA9IHRyYW5zYWN0aW9uUmVxdWVzdC5pbnB1dHMuZmlsdGVyKChpKSA9PiBpLnR5cGUgIT09IElucHV0VHlwZS5Db2luKTtcbiAgICBtaXNzaW5nQ29udHJhY3RJZHMuZm9yRWFjaCgoY29udHJhY3RJZCkgPT4ge1xuICAgICAgdHJhbnNhY3Rpb25SZXF1ZXN0LmFkZENvbnRyYWN0SW5wdXRBbmRPdXRwdXQobmV3IEFkZHJlc3MoY29udHJhY3RJZCkpO1xuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uUmVxdWVzdC5hZGRWYXJpYWJsZU91dHB1dHMob3V0cHV0VmFyaWFibGVzKTtcbiAgICBhd2FpdCB0aGlzLnByb2dyYW0uYWNjb3VudD8uZnVuZCh0cmFuc2FjdGlvblJlcXVlc3QsIHR4Q29zdCk7XG4gICAgaWYgKHRoaXMuYWRkU2lnbmVyc0NhbGxiYWNrKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkZFNpZ25lcnNDYWxsYmFjayh0cmFuc2FjdGlvblJlcXVlc3QpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNhY3Rpb25SZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0cmFuc2FjdGlvbiBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gdHhQYXJhbXMgLSBUaGUgdHJhbnNhY3Rpb24gcGFyYW1ldGVycyB0byBzZXQuXG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBjbGFzcy5cbiAgICovXG4gIHR4UGFyYW1zKHR4UGFyYW1zKSB7XG4gICAgdGhpcy50eFBhcmFtZXRlcnMgPSB0eFBhcmFtcztcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy50cmFuc2FjdGlvblJlcXVlc3Q7XG4gICAgcmVxdWVzdC50aXAgPSBibjIodHhQYXJhbXMudGlwIHx8IHJlcXVlc3QudGlwKTtcbiAgICByZXF1ZXN0Lmdhc0xpbWl0ID0gYm4yKHR4UGFyYW1zLmdhc0xpbWl0IHx8IHJlcXVlc3QuZ2FzTGltaXQpO1xuICAgIHJlcXVlc3QubWF4RmVlID0gdHhQYXJhbXMubWF4RmVlID8gYm4yKHR4UGFyYW1zLm1heEZlZSkgOiByZXF1ZXN0Lm1heEZlZTtcbiAgICByZXF1ZXN0LndpdG5lc3NMaW1pdCA9IHR4UGFyYW1zLndpdG5lc3NMaW1pdCA/IGJuMih0eFBhcmFtcy53aXRuZXNzTGltaXQpIDogcmVxdWVzdC53aXRuZXNzTGltaXQ7XG4gICAgcmVxdWVzdC5tYXR1cml0eSA9IHR4UGFyYW1zLm1hdHVyaXR5IHx8IHJlcXVlc3QubWF0dXJpdHk7XG4gICAgcmVxdWVzdC5hZGRWYXJpYWJsZU91dHB1dHModGhpcy50eFBhcmFtZXRlcnM/LnZhcmlhYmxlT3V0cHV0cyB8fCAwKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkcyBjb250cmFjdHMgdG8gdGhlIGludm9jYXRpb24gc2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSBjb250cmFjdHMgLSBBbiBhcnJheSBvZiBjb250cmFjdHMgdG8gYWRkLlxuICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgY2xhc3MuXG4gICAqL1xuICBhZGRDb250cmFjdHMoY29udHJhY3RzKSB7XG4gICAgY29udHJhY3RzLmZvckVhY2goKGNvbnRyYWN0KSA9PiB7XG4gICAgICB0aGlzLnRyYW5zYWN0aW9uUmVxdWVzdC5hZGRDb250cmFjdElucHV0QW5kT3V0cHV0KGNvbnRyYWN0LmlkKTtcbiAgICAgIHRoaXMuZXh0ZXJuYWxBYmlzW2NvbnRyYWN0LmlkLnRvQjI1NigpXSA9IGNvbnRyYWN0LmludGVyZmFjZS5qc29uQWJpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGFuIGFzc2V0IHRyYW5zZmVyIHRvIGFuIEFjY291bnQgb24gdGhlIGNvbnRyYWN0IGNhbGwgdHJhbnNhY3Rpb24gcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHRyYW5zZmVyUGFyYW1zIC0gVGhlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHRyYW5zZmVyIHRvIGJlIG1hZGUuXG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBjbGFzcy5cbiAgICovXG4gIGFkZFRyYW5zZmVyKHRyYW5zZmVyUGFyYW1zKSB7XG4gICAgY29uc3QgeyBhbW91bnQsIGRlc3RpbmF0aW9uLCBhc3NldElkIH0gPSB0cmFuc2ZlclBhcmFtcztcbiAgICB0aGlzLnRyYW5zYWN0aW9uUmVxdWVzdCA9IHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0LmFkZENvaW5PdXRwdXQoXG4gICAgICBuZXcgQWRkcmVzcyhkZXN0aW5hdGlvbiksXG4gICAgICBhbW91bnQsXG4gICAgICBhc3NldElkXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkcyBtdWx0aXBsZSB0cmFuc2ZlcnMgdG8gdGhlIGNvbnRyYWN0IGNhbGwgdHJhbnNhY3Rpb24gcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHRyYW5zZmVyUGFyYW1zIC0gQW4gYXJyYXkgb2YgYFRyYW5zZmVyUGFyYW1zYCBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgdHJhbnNmZXJzIHRvIGJlIG1hZGUuXG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBjbGFzcy5cbiAgICovXG4gIGFkZEJhdGNoVHJhbnNmZXIodHJhbnNmZXJQYXJhbXMpIHtcbiAgICB0cmFuc2ZlclBhcmFtcy5mb3JFYWNoKCh7IGRlc3RpbmF0aW9uLCBhbW91bnQsIGFzc2V0SWQgfSkgPT4ge1xuICAgICAgdGhpcy50cmFuc2FjdGlvblJlcXVlc3QgPSB0aGlzLnRyYW5zYWN0aW9uUmVxdWVzdC5hZGRDb2luT3V0cHV0KFxuICAgICAgICBuZXcgQWRkcmVzcyhkZXN0aW5hdGlvbiksXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAgYXNzZXRJZFxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhZGRTaWduZXJzKHNpZ25lcnMpIHtcbiAgICB0aGlzLmFkZFNpZ25lcnNDYWxsYmFjayA9ICh0cmFuc2FjdGlvblJlcXVlc3QpID0+IHRyYW5zYWN0aW9uUmVxdWVzdC5hZGRBY2NvdW50V2l0bmVzc2VzKHNpZ25lcnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyBhbmQgcmV0dXJucyB0aGUgdHJhbnNhY3Rpb24gcmVxdWVzdCBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBwcmVwYXJlZCB0cmFuc2FjdGlvbiByZXF1ZXN0LlxuICAgKi9cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KCkge1xuICAgIGF3YWl0IHRoaXMucHJlcGFyZVRyYW5zYWN0aW9uKCk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb25SZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBTdWJtaXRzIHRoZSBjb250cmFjdCBjYWxsIHRyYW5zYWN0aW9uIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIG9iamVjdFxuICAgKiBjb250YWluaW5nIHRoZSB0cmFuc2FjdGlvbiBJRCBhbmQgYSBmdW5jdGlvbiB0byB3YWl0IGZvciB0aGUgcmVzdWx0LiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmVcbiAgICogYXMgc29vbiBhcyB0aGUgdHJhbnNhY3Rpb24gaXMgc3VibWl0dGVkIHRvIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBvYmplY3QgY29udGFpbmluZzpcbiAgICogLSBgdHJhbnNhY3Rpb25JZGA6IFRoZSBJRCBvZiB0aGUgc3VibWl0dGVkIHRyYW5zYWN0aW9uLlxuICAgKiAtIGB3YWl0Rm9yUmVzdWx0YDogQSBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciB0aGUgdHJhbnNhY3Rpb24gcmVzdWx0LlxuICAgKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSByZXR1cm4gdmFsdWUuXG4gICAqL1xuICBhc3luYyBjYWxsKCkge1xuICAgIGFzc2VydCh0aGlzLnByb2dyYW0uYWNjb3VudCwgXCJXYWxsZXQgaXMgcmVxdWlyZWQhXCIpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uUmVxdWVzdCA9IGF3YWl0IHRoaXMuZnVuZFdpdGhSZXF1aXJlZENvaW5zKCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb2dyYW0uYWNjb3VudC5zZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25SZXF1ZXN0LCB7XG4gICAgICBlc3RpbWF0ZVR4RGVwZW5kZW5jaWVzOiBmYWxzZVxuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uSWQgPSByZXNwb25zZS5pZDtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNhY3Rpb25JZCxcbiAgICAgIHdhaXRGb3JSZXN1bHQ6IGFzeW5jICgpID0+IGJ1aWxkRnVuY3Rpb25SZXN1bHQoe1xuICAgICAgICBmdW5jU2NvcGU6IHRoaXMuZnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzLFxuICAgICAgICBpc011bHRpQ2FsbDogdGhpcy5pc011bHRpQ2FsbCxcbiAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxuICAgICAgICB0cmFuc2FjdGlvblJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgfSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTaW11bGF0ZXMgYSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBjYWxsLlxuICAgKi9cbiAgYXN5bmMgc2ltdWxhdGUoKSB7XG4gICAgYXNzZXJ0KHRoaXMucHJvZ3JhbS5hY2NvdW50LCBcIldhbGxldCBpcyByZXF1aXJlZCFcIik7XG4gICAgaWYgKCEoXCJwb3B1bGF0ZVRyYW5zYWN0aW9uV2l0bmVzc2VzU2lnbmF0dXJlXCIgaW4gdGhpcy5wcm9ncmFtLmFjY291bnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRnVlbEVycm9yNChcbiAgICAgICAgRXJyb3JDb2RlNC5BQklfTUFJTl9NRVRIT0RfTUlTU0lORyxcbiAgICAgICAgXCJBbiB1bmxvY2tlZCB3YWxsZXQgaXMgcmVxdWlyZWQgdG8gc2ltdWxhdGUgYSBjb250cmFjdCBjYWxsLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2FjdGlvblJlcXVlc3QgPSBhd2FpdCB0aGlzLmZ1bmRXaXRoUmVxdWlyZWRDb2lucygpO1xuICAgIGNvbnN0IGNhbGxSZXN1bHQgPSBhd2FpdCB0aGlzLnByb2dyYW0uYWNjb3VudC5zaW11bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uUmVxdWVzdCwge1xuICAgICAgZXN0aW1hdGVUeERlcGVuZGVuY2llczogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGREcnlSdW5SZXN1bHQoe1xuICAgICAgZnVuY1Njb3BlczogdGhpcy5mdW5jdGlvbkludm9jYXRpb25TY29wZXMsXG4gICAgICBjYWxsUmVzdWx0LFxuICAgICAgaXNNdWx0aUNhbGw6IHRoaXMuaXNNdWx0aUNhbGxcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZXMgYSB0cmFuc2FjdGlvbiBpbiBkcnkgcnVuIG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIGludm9jYXRpb24gY2FsbC5cbiAgICovXG4gIGFzeW5jIGRyeVJ1bigpIHtcbiAgICBjb25zdCB7IHJlY2VpcHRzIH0gPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uQ29zdCgpO1xuICAgIGNvbnN0IGNhbGxSZXN1bHQgPSB7XG4gICAgICByZWNlaXB0c1xuICAgIH07XG4gICAgcmV0dXJuIGJ1aWxkRHJ5UnVuUmVzdWx0KHtcbiAgICAgIGZ1bmNTY29wZXM6IHRoaXMuZnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzLFxuICAgICAgY2FsbFJlc3VsdCxcbiAgICAgIGlzTXVsdGlDYWxsOiB0aGlzLmlzTXVsdGlDYWxsXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGNvbnN0IHsgcmVjZWlwdHMgfSA9IGF3YWl0IHRoaXMuZ2V0VHJhbnNhY3Rpb25Db3N0KCk7XG4gICAgY29uc3QgY2FsbFJlc3VsdCA9IHtcbiAgICAgIHJlY2VpcHRzXG4gICAgfTtcbiAgICByZXR1cm4gYnVpbGREcnlSdW5SZXN1bHQoe1xuICAgICAgZnVuY1Njb3BlczogdGhpcy5mdW5jdGlvbkludm9jYXRpb25TY29wZXMsXG4gICAgICBjYWxsUmVzdWx0LFxuICAgICAgaXNNdWx0aUNhbGw6IHRoaXMuaXNNdWx0aUNhbGxcbiAgICB9KTtcbiAgfVxuICBnZXRQcm92aWRlcigpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMucHJvZ3JhbS5wcm92aWRlcjtcbiAgICByZXR1cm4gcHJvdmlkZXI7XG4gIH1cbiAgLyoqXG4gICAqIE9idGFpbnMgdGhlIElEIG9mIGEgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSBjaGFpbklkIC0gdGhlIGNoYWluSWQgdG8gdXNlIHRvIGhhc2ggdGhlIHRyYW5zYWN0aW9uIHdpdGhcbiAgICogQHJldHVybnMgdGhlIElEIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uSWQoY2hhaW5JZCkge1xuICAgIGNvbnN0IGNoYWluSWRUb0hhc2ggPSBjaGFpbklkID8/IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKS5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25SZXF1ZXN0ID0gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvblJlcXVlc3QoKTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25SZXF1ZXN0LmdldFRyYW5zYWN0aW9uSWQoY2hhaW5JZFRvSGFzaCk7XG4gIH1cbiAgLyoqXG4gICAqIEluIGNhc2UgdGhlIGdhc0xpbWl0IGlzICpub3QqIHNldCBieSB0aGUgdXNlciwgdGhpcyBtZXRob2Qgc2V0cyBhIGRlZmF1bHQgdmFsdWUuXG4gICAqL1xuICBzZXREZWZhdWx0VHhQYXJhbXModHJhbnNhY3Rpb25SZXF1ZXN0LCBnYXNVc2VkLCBtYXhGZWUpIHtcbiAgICBjb25zdCBnYXNMaW1pdFNwZWNpZmllZCA9IGlzRGVmaW5lZCh0aGlzLnR4UGFyYW1ldGVycz8uZ2FzTGltaXQpIHx8IHRoaXMuaGFzQ2FsbFBhcmFtc0dhc0xpbWl0O1xuICAgIGNvbnN0IG1heEZlZVNwZWNpZmllZCA9IGlzRGVmaW5lZCh0aGlzLnR4UGFyYW1ldGVycz8ubWF4RmVlKTtcbiAgICBjb25zdCB7IGdhc0xpbWl0OiBzZXRHYXNMaW1pdCwgbWF4RmVlOiBzZXRNYXhGZWUgfSA9IHRyYW5zYWN0aW9uUmVxdWVzdDtcbiAgICBpZiAoIWdhc0xpbWl0U3BlY2lmaWVkKSB7XG4gICAgICB0cmFuc2FjdGlvblJlcXVlc3QuZ2FzTGltaXQgPSBnYXNVc2VkO1xuICAgIH0gZWxzZSBpZiAoc2V0R2FzTGltaXQubHQoZ2FzVXNlZCkpIHtcbiAgICAgIHRocm93IG5ldyBGdWVsRXJyb3I0KFxuICAgICAgICBFcnJvckNvZGU0LkdBU19MSU1JVF9UT09fTE9XLFxuICAgICAgICBgR2FzIGxpbWl0ICcke3NldEdhc0xpbWl0fScgaXMgbG93ZXIgdGhhbiB0aGUgcmVxdWlyZWQ6ICcke2dhc1VzZWR9Jy5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIW1heEZlZVNwZWNpZmllZCkge1xuICAgICAgdHJhbnNhY3Rpb25SZXF1ZXN0Lm1heEZlZSA9IG1heEZlZTtcbiAgICB9IGVsc2UgaWYgKG1heEZlZS5ndChzZXRNYXhGZWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRnVlbEVycm9yNChcbiAgICAgICAgRXJyb3JDb2RlNC5NQVhfRkVFX1RPT19MT1csXG4gICAgICAgIGBNYXggZmVlICcke3NldE1heEZlZX0nIGlzIGxvd2VyIHRoYW4gdGhlIHJlcXVpcmVkOiAnJHttYXhGZWV9Jy5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL2Z1bmN0aW9ucy9pbnZvY2F0aW9uLXNjb3BlLnRzXG52YXIgRnVuY3Rpb25JbnZvY2F0aW9uU2NvcGUgPSBjbGFzcyBleHRlbmRzIEJhc2VJbnZvY2F0aW9uU2NvcGUge1xuICBmdW5jO1xuICBjYWxsUGFyYW1ldGVycztcbiAgZm9yd2FyZDtcbiAgYXJncztcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgRnVuY3Rpb25JbnZvY2F0aW9uU2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gVGhlIHByb2dyYW0uXG4gICAqIEBwYXJhbSBmdW5jIC0gVGhlIGZ1bmN0aW9uIGZyYWdtZW50LlxuICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9ncmFtLCBmdW5jLCBhcmdzKSB7XG4gICAgc3VwZXIocHJvZ3JhbSwgZmFsc2UpO1xuICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG4gICAgdGhpcy5hcmdzID0gYXJncyB8fCBbXTtcbiAgICB0aGlzLnNldEFyZ3VtZW50cyguLi5hcmdzKTtcbiAgICBzdXBlci5hZGRDYWxsKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjYWxsIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBjYWxsIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBnZXRDYWxsQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmdW5jOiB0aGlzLmZ1bmMsXG4gICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW0sXG4gICAgICBjYWxsUGFyYW1ldGVyczogdGhpcy5jYWxsUGFyYW1ldGVycyxcbiAgICAgIHR4UGFyYW1ldGVyczogdGhpcy50eFBhcmFtZXRlcnMsXG4gICAgICBmb3J3YXJkOiB0aGlzLmZvcndhcmQsXG4gICAgICBhcmdzOiB0aGlzLmFyZ3MsXG4gICAgICBleHRlcm5hbEFiaXM6IHRoaXMuZXh0ZXJuYWxBYmlzXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgYXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb24gaW52b2NhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgRnVuY3Rpb25JbnZvY2F0aW9uU2NvcGUuXG4gICAqL1xuICBzZXRBcmd1bWVudHMoLi4uYXJncykge1xuICAgIHRoaXMuYXJncyA9IGFyZ3MgfHwgW107XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNhbGwgcGFyYW1ldGVycyBmb3IgdGhlIGZ1bmN0aW9uIGludm9jYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsUGFyYW1zIC0gVGhlIGNhbGwgcGFyYW1ldGVycy5cbiAgICogQHJldHVybnMgVGhlIGluc3RhbmNlIG9mIEZ1bmN0aW9uSW52b2NhdGlvblNjb3BlLlxuICAgKiBAdGhyb3dzIElmIHRoZSBmdW5jdGlvbiBpcyBub3QgcGF5YWJsZSBhbmQgZm9yd2FyZCBpcyBzZXQuXG4gICAqL1xuICBjYWxsUGFyYW1zKGNhbGxQYXJhbXMpIHtcbiAgICBpZiAoIXRoaXMuaGFzQ2FsbFBhcmFtc0dhc0xpbWl0ICYmIGNhbGxQYXJhbXM/Lmdhc0xpbWl0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuaGFzQ2FsbFBhcmFtc0dhc0xpbWl0ID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5jYWxsUGFyYW1ldGVycyA9IGNhbGxQYXJhbXM7XG4gICAgaWYgKGNhbGxQYXJhbXM/LmZvcndhcmQpIHtcbiAgICAgIGlmICghdGhpcy5mdW5jLmF0dHJpYnV0ZXMuZmluZCgoYXR0cikgPT4gYXR0ci5uYW1lID09PSBcInBheWFibGVcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEZ1ZWxFcnJvcjUoXG4gICAgICAgICAgRXJyb3JDb2RlNS5UUkFOU0FDVElPTl9FUlJPUixcbiAgICAgICAgICBgVGhlIHRhcmdldCBmdW5jdGlvbiAke3RoaXMuZnVuYy5uYW1lfSBjYW5ub3QgYWNjZXB0IGZvcndhcmRlZCBmdW5kcyBhcyBpdCdzIG5vdCBtYXJrZWQgYXMgJ3BheWFibGUnLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZm9yd2FyZCA9IGNvaW5RdWFudGl0eWZ5KGNhbGxQYXJhbXMuZm9yd2FyZCk7XG4gICAgfVxuICAgIHRoaXMuc2V0QXJndW1lbnRzKC4uLnRoaXMuYXJncyk7XG4gICAgdGhpcy51cGRhdGVSZXF1aXJlZENvaW5zKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbi8vIHNyYy9mdW5jdGlvbnMvbXVsdGljYWxsLXNjb3BlLnRzXG52YXIgTXVsdGlDYWxsSW52b2NhdGlvblNjb3BlID0gY2xhc3MgZXh0ZW5kcyBCYXNlSW52b2NhdGlvblNjb3BlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgTXVsdGlDYWxsSW52b2NhdGlvblNjb3BlLlxuICAgKlxuICAgKiBAcGFyYW0gY29udHJhY3QgLSBUaGUgY29udHJhY3QuXG4gICAqIEBwYXJhbSBmdW5jU2NvcGVzIC0gQW4gYXJyYXkgb2YgZnVuY3Rpb24gaW52b2NhdGlvbiBzY29wZXMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb250cmFjdCwgZnVuY1Njb3Blcykge1xuICAgIHN1cGVyKGNvbnRyYWN0LCB0cnVlKTtcbiAgICB0aGlzLmFkZENhbGxzKGZ1bmNTY29wZXMpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgc2luZ2xlIGZ1bmN0aW9uIGludm9jYXRpb24gc2NvcGUgdG8gdGhlIG11bHRpLWNhbGwgaW52b2NhdGlvbiBzY29wZS5cbiAgICpcbiAgICogQHBhcmFtIGZ1bmNTY29wZSAtIFRoZSBmdW5jdGlvbiBpbnZvY2F0aW9uIHNjb3BlLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgTXVsdGlDYWxsSW52b2NhdGlvblNjb3BlLlxuICAgKi9cbiAgYWRkQ2FsbChmdW5jU2NvcGUpIHtcbiAgICByZXR1cm4gc3VwZXIuYWRkQ2FsbHMoW2Z1bmNTY29wZV0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIG11bHRpcGxlIGZ1bmN0aW9uIGludm9jYXRpb24gc2NvcGVzIHRvIHRoZSBtdWx0aS1jYWxsIGludm9jYXRpb24gc2NvcGUuXG4gICAqXG4gICAqIEBwYXJhbSBmdW5jU2NvcGVzIC0gQW4gYXJyYXkgb2YgZnVuY3Rpb24gaW52b2NhdGlvbiBzY29wZXMuXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBvZiBNdWx0aUNhbGxJbnZvY2F0aW9uU2NvcGUuXG4gICAqL1xuICBhZGRDYWxscyhmdW5jU2NvcGVzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmFkZENhbGxzKGZ1bmNTY29wZXMpO1xuICB9XG59O1xuXG4vLyBzcmMvY29udHJhY3QudHNcbmltcG9ydCB7IEludGVyZmFjZSB9IGZyb20gXCJAZnVlbC10cy9hYmktY29kZXJcIjtcbmltcG9ydCB7IEFkZHJlc3MgYXMgQWRkcmVzczIgfSBmcm9tIFwiQGZ1ZWwtdHMvYWRkcmVzc1wiO1xudmFyIENvbnRyYWN0ID0gY2xhc3Mge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBjb250cmFjdCBpZGVudGlmaWVyLlxuICAgKi9cbiAgaWQ7XG4gIC8qKlxuICAgKiBUaGUgcHJvdmlkZXIgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGNvbnRyYWN0LlxuICAgKi9cbiAgcHJvdmlkZXI7XG4gIC8qKlxuICAgKiBUaGUgY29udHJhY3QncyBBQkkgaW50ZXJmYWNlLlxuICAgKi9cbiAgaW50ZXJmYWNlO1xuICAvKipcbiAgICogVGhlIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb250cmFjdCwgaWYgYXZhaWxhYmxlLlxuICAgKi9cbiAgYWNjb3VudDtcbiAgLyoqXG4gICAqIEEgY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgYXZhaWxhYmxlIG9uIHRoZSBjb250cmFjdC5cbiAgICovXG4gIGZ1bmN0aW9ucyA9IHt9O1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgQ29udHJhY3QgY2xhc3MuXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIFRoZSBjb250cmFjdCdzIGFkZHJlc3MuXG4gICAqIEBwYXJhbSBhYmkgLSBUaGUgY29udHJhY3QncyBBQkkgKEpTT04gQUJJIG9yIEludGVyZmFjZSBpbnN0YW5jZSkuXG4gICAqIEBwYXJhbSBhY2NvdW50T3JQcm92aWRlciAtIFRoZSBhY2NvdW50IG9yIHByb3ZpZGVyIGZvciBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGlkLCBhYmksIGFjY291bnRPclByb3ZpZGVyKSB7XG4gICAgdGhpcy5pbnRlcmZhY2UgPSBhYmkgaW5zdGFuY2VvZiBJbnRlcmZhY2UgPyBhYmkgOiBuZXcgSW50ZXJmYWNlKGFiaSk7XG4gICAgdGhpcy5pZCA9IG5ldyBBZGRyZXNzMihpZCk7XG4gICAgaWYgKGFjY291bnRPclByb3ZpZGVyICYmIFwicHJvdmlkZXJcIiBpbiBhY2NvdW50T3JQcm92aWRlcikge1xuICAgICAgdGhpcy5wcm92aWRlciA9IGFjY291bnRPclByb3ZpZGVyLnByb3ZpZGVyO1xuICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudE9yUHJvdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvdmlkZXIgPSBhY2NvdW50T3JQcm92aWRlcjtcbiAgICAgIHRoaXMuYWNjb3VudCA9IG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHRoaXMuaW50ZXJmYWNlLmZ1bmN0aW9ucykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmludGVyZmFjZS5nZXRGdW5jdGlvbihuYW1lKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmZ1bmN0aW9ucywgZnJhZ21lbnQubmFtZSwge1xuICAgICAgICB2YWx1ZTogdGhpcy5idWlsZEZ1bmN0aW9uKGZyYWdtZW50KSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQnVpbGQgYSBmdW5jdGlvbiBpbnZvY2F0aW9uIHNjb3BlIGZvciB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gZnJhZ21lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBmdW5jIC0gVGhlIGZ1bmN0aW9uIGZyYWdtZW50IHRvIGJ1aWxkIGEgc2NvcGUgZm9yLlxuICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIEZ1bmN0aW9uSW52b2NhdGlvblNjb3BlLlxuICAgKi9cbiAgYnVpbGRGdW5jdGlvbihmdW5jKSB7XG4gICAgcmV0dXJuICgoKSA9PiB7XG4gICAgICBjb25zdCBmdW5jSW52b2NhdGlvblNjb3BlQ3JlYXRvciA9ICguLi5hcmdzKSA9PiBuZXcgRnVuY3Rpb25JbnZvY2F0aW9uU2NvcGUodGhpcywgZnVuYywgYXJncyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY0ludm9jYXRpb25TY29wZUNyZWF0b3IsIFwiaXNSZWFkT25seVwiLCB7XG4gICAgICAgIHZhbHVlOiAoKSA9PiBmdW5jLmlzUmVhZE9ubHkoKSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jSW52b2NhdGlvblNjb3BlQ3JlYXRvcjtcbiAgICB9KSgpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtdWx0aS1jYWxsIGludm9jYXRpb24gc2NvcGUgZm9yIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBpbnZvY2F0aW9uIHNjb3Blcy5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxzIC0gQW4gYXJyYXkgb2YgRnVuY3Rpb25JbnZvY2F0aW9uU2NvcGVzIHRvIGV4ZWN1dGUgaW4gYSBiYXRjaC5cbiAgICogQHJldHVybnMgQSBNdWx0aUNhbGxJbnZvY2F0aW9uU2NvcGUgaW5zdGFuY2UuXG4gICAqL1xuICBtdWx0aUNhbGwoY2FsbHMpIHtcbiAgICByZXR1cm4gbmV3IE11bHRpQ2FsbEludm9jYXRpb25TY29wZSh0aGlzLCBjYWxscyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgYmFsYW5jZSBmb3IgYSBnaXZlbiBhc3NldCBJRCBmb3IgdGhpcyBjb250cmFjdC5cbiAgICpcbiAgICogQHBhcmFtIGFzc2V0SWQgLSBUaGUgc3BlY2lmaWVkIGFzc2V0IElELlxuICAgKiBAcmV0dXJucyBUaGUgYmFsYW5jZSBvZiB0aGUgY29udHJhY3QgZm9yIHRoZSBzcGVjaWZpZWQgYXNzZXQuXG4gICAqL1xuICBnZXRCYWxhbmNlKGFzc2V0SWQpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDb250cmFjdEJhbGFuY2UodGhpcy5pZCwgYXNzZXRJZCk7XG4gIH1cbn07XG5leHBvcnQge1xuICBBYnN0cmFjdENvbnRyYWN0LFxuICBBYnN0cmFjdFByb2dyYW0sXG4gIENvbnRyYWN0LFxuICBGdW5jdGlvbkludm9jYXRpb25TY29wZSxcbiAgSW5zdHJ1Y3Rpb25TZXQsXG4gIE11bHRpQ2FsbEludm9jYXRpb25TY29wZSxcbiAgU2NyaXB0UmVxdWVzdCxcbiAgYXNzZXJ0LFxuICBidWlsZERyeVJ1blJlc3VsdCxcbiAgYnVpbGRGdW5jdGlvblJlc3VsdCxcbiAgZXh0cmFjdEludm9jYXRpb25SZXN1bHQsXG4gIGdldEFiaXNGcm9tQWxsQ2FsbHMsXG4gIGdldFJlc3VsdExvZ3Ncbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/program/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/recipes/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@fuel-ts/recipes/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Src14OwnedProxy: () => (/* binding */ Src14OwnedProxy),\n/* harmony export */   Src14OwnedProxyFactory: () => (/* binding */ Src14OwnedProxyFactory)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_program__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/program */ \"(ssr)/./node_modules/@fuel-ts/program/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_contract__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/contract */ \"(ssr)/./node_modules/@fuel-ts/contract/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) =>\n  key in obj\n    ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value,\n      })\n    : (obj[key] = value);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/types/Src14OwnedProxy.ts\n\n\nvar abi = {\n  programType: \"contract\",\n  specVersion: \"1\",\n  encodingVersion: \"1\",\n  concreteTypes: [\n    {\n      type: \"()\",\n      concreteTypeId:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n    },\n    {\n      type: \"enum standards::src5::AccessError\",\n      concreteTypeId:\n        \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\",\n      metadataTypeId: 1,\n    },\n    {\n      type: \"enum standards::src5::State\",\n      concreteTypeId:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      metadataTypeId: 2,\n    },\n    {\n      type: \"enum std::option::Option<struct std::contract_id::ContractId>\",\n      concreteTypeId:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      metadataTypeId: 4,\n      typeArguments: [\n        \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n      ],\n    },\n    {\n      type: \"enum sway_libs::ownership::errors::InitializationError\",\n      concreteTypeId:\n        \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\",\n      metadataTypeId: 5,\n    },\n    {\n      type: \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      concreteTypeId:\n        \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\",\n      metadataTypeId: 6,\n    },\n    {\n      type: \"str\",\n      concreteTypeId:\n        \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\",\n    },\n    {\n      type: \"struct std::contract_id::ContractId\",\n      concreteTypeId:\n        \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n      metadataTypeId: 9,\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      concreteTypeId:\n        \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\",\n      metadataTypeId: 10,\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      concreteTypeId:\n        \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\",\n      metadataTypeId: 11,\n    },\n  ],\n  metadataTypes: [\n    {\n      type: \"b256\",\n      metadataTypeId: 0,\n    },\n    {\n      type: \"enum standards::src5::AccessError\",\n      metadataTypeId: 1,\n      components: [\n        {\n          name: \"NotOwner\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum standards::src5::State\",\n      metadataTypeId: 2,\n      components: [\n        {\n          name: \"Uninitialized\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n        {\n          name: \"Initialized\",\n          typeId: 3,\n        },\n        {\n          name: \"Revoked\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum std::identity::Identity\",\n      metadataTypeId: 3,\n      components: [\n        {\n          name: \"Address\",\n          typeId: 8,\n        },\n        {\n          name: \"ContractId\",\n          typeId: 9,\n        },\n      ],\n    },\n    {\n      type: \"enum std::option::Option\",\n      metadataTypeId: 4,\n      components: [\n        {\n          name: \"None\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n        {\n          name: \"Some\",\n          typeId: 7,\n        },\n      ],\n      typeParameters: [7],\n    },\n    {\n      type: \"enum sway_libs::ownership::errors::InitializationError\",\n      metadataTypeId: 5,\n      components: [\n        {\n          name: \"CannotReinitialized\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"enum sway_libs::upgradability::errors::SetProxyOwnerError\",\n      metadataTypeId: 6,\n      components: [\n        {\n          name: \"CannotUninitialize\",\n          typeId:\n            \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n        },\n      ],\n    },\n    {\n      type: \"generic T\",\n      metadataTypeId: 7,\n    },\n    {\n      type: \"struct std::address::Address\",\n      metadataTypeId: 8,\n      components: [\n        {\n          name: \"bits\",\n          typeId: 0,\n        },\n      ],\n    },\n    {\n      type: \"struct std::contract_id::ContractId\",\n      metadataTypeId: 9,\n      components: [\n        {\n          name: \"bits\",\n          typeId: 0,\n        },\n      ],\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyOwnerSet\",\n      metadataTypeId: 10,\n      components: [\n        {\n          name: \"new_proxy_owner\",\n          typeId: 2,\n        },\n      ],\n    },\n    {\n      type: \"struct sway_libs::upgradability::events::ProxyTargetSet\",\n      metadataTypeId: 11,\n      components: [\n        {\n          name: \"new_target\",\n          typeId: 9,\n        },\n      ],\n    },\n  ],\n  functions: [\n    {\n      inputs: [],\n      name: \"proxy_target\",\n      output:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Returns the target contract of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Returns\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * [Option<ContractId>] - The new proxy contract to which all fallback calls will be passed or `None`.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\"],\n        },\n      ],\n    },\n    {\n      inputs: [\n        {\n          name: \"new_target\",\n          concreteTypeId:\n            \"29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54\",\n        },\n      ],\n      name: \"set_proxy_target\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Change the target contract of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" This method can only be called by the `proxy_owner`.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Arguments\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * `new_target`: [ContractId] - The new proxy contract to which all fallback calls will be passed.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * When not called by `proxy_owner`.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Write: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\", \"write\"],\n        },\n      ],\n    },\n    {\n      inputs: [],\n      name: \"proxy_owner\",\n      output:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Returns the owner of the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Returns\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * [State] - Represents the state of ownership for this contract.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"read\"],\n        },\n      ],\n    },\n    {\n      inputs: [],\n      name: \"initialize_proxy\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Initializes the proxy contract.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This method sets the storage values using the values of the configurable constants `INITIAL_TARGET` and `INITIAL_OWNER`.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This then allows methods that write to storage to be called.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" This method can only be called once.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * When `storage::SRC14.proxy_owner` is not [State::Uninitialized].\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Writes: `2`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"write\"],\n        },\n      ],\n    },\n    {\n      inputs: [\n        {\n          name: \"new_proxy_owner\",\n          concreteTypeId:\n            \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n        },\n      ],\n      name: \"set_proxy_owner\",\n      output:\n        \"2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d\",\n      attributes: [\n        {\n          name: \"doc-comment\",\n          arguments: [\" Changes proxy ownership to the passed State.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Additional Information\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" This method can be used to transfer ownership between Identities or to revoke ownership.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Arguments\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * `new_proxy_owner`: [State] - The new state of the proxy ownership.\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Reverts\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * When the sender is not the current proxy owner.\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\n            \" * When the new state of the proxy ownership is [State::Uninitialized].\",\n          ],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" # Number of Storage Accesses\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\"\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Reads: `1`\"],\n        },\n        {\n          name: \"doc-comment\",\n          arguments: [\" * Writes: `1`\"],\n        },\n        {\n          name: \"storage\",\n          arguments: [\"write\"],\n        },\n      ],\n    },\n  ],\n  loggedTypes: [\n    {\n      logId: \"4571204900286667806\",\n      concreteTypeId:\n        \"3f702ea3351c9c1ece2b84048006c8034a24cbc2bad2e740d0412b4172951d3d\",\n    },\n    {\n      logId: \"2151606668983994881\",\n      concreteTypeId:\n        \"1ddc0adda1270a016c08ffd614f29f599b4725407c8954c8b960bdf651a9a6c8\",\n    },\n    {\n      logId: \"2161305517876418151\",\n      concreteTypeId:\n        \"1dfe7feadc1d9667a4351761230f948744068a090fe91b1bc6763a90ed5d3893\",\n    },\n    {\n      logId: \"4354576968059844266\",\n      concreteTypeId:\n        \"3c6e90ae504df6aad8b34a93ba77dc62623e00b777eecacfa034a8ac6e890c74\",\n    },\n    {\n      logId: \"10870989709723147660\",\n      concreteTypeId:\n        \"96dd838b44f99d8ccae2a7948137ab6256c48ca4abc6168abc880de07fba7247\",\n    },\n    {\n      logId: \"10098701174489624218\",\n      concreteTypeId:\n        \"8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a\",\n    },\n  ],\n  messagesTypes: [],\n  configurables: [\n    {\n      name: \"INITIAL_TARGET\",\n      concreteTypeId:\n        \"0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8\",\n      offset: 13368,\n    },\n    {\n      name: \"INITIAL_OWNER\",\n      concreteTypeId:\n        \"192bc7098e2fe60635a9918afb563e4e5419d386da2bdbf0d716b4bc8549802c\",\n      offset: 13320,\n    },\n  ],\n};\nvar storageSlots = [\n  {\n    key: \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd55\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"7bb458adc1d118713319a5baa00a2d049dd64d2916477d2688d76970c898cd56\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea754\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n  {\n    key: \"bb79927b15d9259ea316f2ecb2297d6cc8851888a98278c0a2e03e1a091ea755\",\n    value: \"0000000000000000000000000000000000000000000000000000000000000000\",\n  },\n];\nvar Src14OwnedProxy = class extends _fuel_ts_program__WEBPACK_IMPORTED_MODULE_0__.Contract {\n  constructor(id, accountOrProvider) {\n    super(id, abi, accountOrProvider);\n  }\n};\n__publicField(Src14OwnedProxy, \"abi\", abi);\n__publicField(Src14OwnedProxy, \"storageSlots\", storageSlots);\n\n// src/types/Src14OwnedProxyFactory.ts\n\n\nvar bytecode = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.decompressBytecode)(\n  \"H4sIAAAAAAAAA9Vbe3Abx3lfgCAFvayz+TAFSjaUUjJkRwosUQ4ly9IhIATSEM2DSVpUGBhg64c0cSyIlVQ5tsccN001aSZlHcdlO06GrtOp6z4GAB+C7T7YR2bUiTtlZhxbTeMWmiatFAst60YZqm6j/r5v93DHw4GOJ84f0QznFne73+5+j9/32FVgISxOCOEV/K/Dn7o259GuXRO/JcSQ8c6CML4nwkZJF8HFnWLovZLXeK/kOyG89+JbGN9C+BZe+q2uEfRE4LIBGiv1VHThdi0i5gJdGTHa7TW0WNNY4JLmoFfXE4jPi3T5ep/q112j337Vr8WIF3PV373nAol5YfTls6OG8Id6m9E3+DG0tVB5F96/onG7b0akejWh9XaMpWNhYcSnL44exPv49JzLnNtoTtDMpMvaR0FvmxHPaaPd6B/rGDMSxRCP7WmaMxJ5I10Wt47qYg2etxnR/CJ/i7Tj29nuSr/42Tlux3yYLygC36+aMxiIzotTuuck+LeD+If9hoxEIQS6MdDX8DxgRAudNvrzNvql96Hvl/TFJdDfaaPfDbo9oL8az7tBf8hGf8GiXxTL0/cuKPpPg36Hjf4R0O1V678H9E9b9IuaRX+m9X3on1f0HwD9XTb6Z0A3Cfrr8LwX9Ccs+jOWnOIzkm+16c8p+juXvl/9f0Z0GnonHP19CeqfigmR6hGeVER4jb5Z7FH7a+jL32Atf2tEp84ELoUxV9XYQzQWOnVO6pRvzIi+AhugdTehPVtpV8/r/TyPTcxWdIv246CfIf3dHNGEES0GjXihRHSq9+z5slrHBOYLy3XkJ7nN6zg7brar17F6c0AXYjP+lr5fNWW+x/4nqsc1PK3mHLLmLGatOaddxtSxboHPsGHF6/7Zc6MDGJNs1o347CJ4/i/pcrgEvl/AvOcCl3Teb+CCk5b/tmq5zVyE3P4cNP4C4/8S40+7y63uklr7GUtuReKXktuMfxm5tSq5ST10lVvdu6bcoON3KB0PGokpjTAq8H1nf8/vME4lcoRlQann+TFux9rnHLTfgQ2QzuCbbw57PgJcDIZ660lOYab/PejIBez77aq1vyH3nfdjfDePjxaL3I5gzmh+Pn1Z22P0Cr+kuRnYOTuEdjfhMeQziXYoFKsXkq9OPVxxCnbrH+3C2Eg75Dnt5geO0V5TPeBNr+ZJxTTowNkh6EAwlKzXoaunIb//hA4sQJb/ZcSnFqUO0J6ctPyHXXRgHuNeBY3XoAN/Bj08X0MHjigd6LZ0oPCSKXfIbX0qnhtMJXL3dXh891q2MA0ZOmmt/JaiFcR48If1qZPb0haOuNjCtiW2kBTe1CDah9U+0oXiaAbjUy0C6/A1xjRxqktsT0VzhxojQge+ebHGwB28pkLRiAi/EX8lyHyMgY/xmUnwYBp8nEmX9VkjMW0ELpLukS059c/7lotMNJtMwqD1b6D17+DtRcgEOFRLJit+6JQJYgoN6wG+G/l0OVOAXKbAk87ARYll1bbtnXKRaxFzn8U68BSvYDywwU2u3neVLM7bbDtj2fb0Ym3b9mxStl3xN9W27X3PtO2vCHHzc34zXhKTgeikCMTHRSAxJgJ9JWH052CP5h6dcZgI8B4jAnGOWIv1HjGiuU6JD851iTbqC7sKh8o+yCOX5XZ02mr3+PTAD4V4htZxNSwmsK7fxvruXhS0zhXmOuUasb5ESaTB38AVzHc1aPZfofo/Ze3Lc5HHDGNfh0qw+6q1fZL40QjdOdUt7sZTx3M1/Li3MdJEfthzB2JKrHMB6/RChjch1jpjrhnjd5PfAu40utCOUkzY2BsUpw6KGxt7gkRb0kvkzmHMesR2uuRx2Dm2i2XZB5s08TESlLgWoXgyn8EaQ6HedoqhbwC9bPqyuA7vgzXohVkGhLtl4CbRonZ0Ghhs0TIiGvkO2D3Fl9inTvtsIswtcjvG89WDHzrmg83ivfKf/P1wE2SSgRzB96uGKZenlFwq+iblWJL40RMkDBEUN2u9u0Q6Aru4gtjoqubUA7u+ZphGAnKFrpKtMW/KhPM5ndtxxNrqvRZDPM5xCPhJ+A7d4yfpHeaC3mVc9M4+H3x/lX1ka9nHSSH+2GYfrZgXtrhUP9AnyrqXhO4ZogUYqQMjpX4A16EfKzEHYgCao4r+J1ievGfSDciN2tEZWtcEyzPZZMoqCFn5+H0XvWcbPMftSJfVtmxwwYUXdVWyw94CV/BnyanOaa/gm2b2Z9wq+8YC0VxlLObSbONN+91vG29YfAcNwjXob+CdXLV+98Fe+pEfDaAP4jHCeEefWwL9ZI+78AcdMwTZ5QbYWJhzM9gYYbJjzK2Krr4M3U0c//RDt7hPvVsfznu2JjuMwBWd9m3YcGv/B+CbZxm+fYh8rzsXOITx/ZBzdOHjMgbMXwQtituADYiTONajGCxvWHEb7LYqbhMPKfzvlvg/NcZtxv9Cd6Udz8MnuuUHvqwt1pHzRwuUE9A4Fz/oOy79YIH8oBmPIp6nfMvN54tBRf+IlQtMEQ6qXGAqo74Beym2yl2PmOYG+t3WA9w7KPxtPR1jW7pBuzsLbJ7K7O7xzcN3NJDfgO3BZxTO23zGdYQHsG/KNf1tsQ5diyHeTMA+D5IdYr0xxLDURvxsHwteE35hXe2ob+SGVSylfFQ+KOOoKRm7ESaTXQ8SxhmQOWR6VXfqnN3WupdiXJblz3FUuV6H7/Nh3SEzPgbGdIf6pqFPYdKnbhfa12x+2MLPYdCGL8Yawbcm4l9I62mnusTN6ll/s3z61qea5jAfeHRC534x/KZ+8ll/M56w35zpI7EmrLWDeEE1CenfIANT9g6575R6Aru1dFnlOFV9Q8ofS9/C+UqecAO8QJ6RyMs19LBvzr7Y63uB7IJ1BjqK71m8H8f7SV4b6xJ8bDRntRO5jLWOnMyfUD8A35vS5Wwzy/0wyZL9KzC64l+vKX6vs8lSt+Mm4T/+6vHXAH+0gv2gigWYZ3GSo0Zy1G24tK46nhLjLn7wNHSklbARa2wNleFT4oypreyDh3MNqUO5FbAZ8lF+LdksmpMxHT7PQ/4J77xtg4NiywCYvPEBPTCUFVryAT2dhO/W0R9xGPvDcmYlYvBVWP9qrL+V6UfY32e4jbwO/VspXlE+fdzmx8wYxM4jpe+kiz5h2W+uFXF6Hb3Dk/kGGWFfLKMw+NYaSkyT/mH+9jmFp9D/Cp6afLPbFvI1Sx6Yw+A1S50l2hSbEF61ks6m+nL1sGWN/A7yFr/Rq/vBY9QVKZ/B3rm21GXV8qTsjnz4PsVjs2H/PNktchCOSRx5xXa2jzTHyeFQClg1nA8D47YcBz4Bo6j+cx68HKY8H+8fOt5NeZFpu2RDs0XLhmaGpM06/XHdE7LOCrsxx/WofJ/G9SAOYgwlGzpLORRjOHKjuxzr/W/269H8ONa0g2p4JmZSXNAC3mLN7ci9QqgD6Oa3VDRfrzB3DfD3DNqUI9hy2akh7O3T+DuGuuWQGVdBz9eCb7rE5yL5FunH4lN+zD+i1i1tn8ZR/MZx91mKq8kPUCyHmtL0S2bu6tjPd5SPJblCR4qEm5r0sVMU33Ebaxamz6DaO35/Vu1hFdqP2b7V0TfKeRojPs7XtaSuI+6MEW2su5KfgietDppPKJoRtB930HzCheYnZT7suq+vK99MMlD58BTlHKrOkfM76J+20Yf/RV32skiCp1TXMWVxI+Regoz2jsQ+EYHeTaBWAd63YJ4Z5LCuddl/VjUuo9KXfDS1Y1vw3qIPmYVtMtuFvRVr7O0zam+qpk97m6Y4w9wb9rGEr19SfKV9ZbCvg1h7ybGvIvb1ceyrDt9O2/bVWmNfL6l9Bd33ZdG37ws6QLVaVR8iG5mi2HCJjQS6eK2eQBfXfr5CY1CDq9iZrG25+doKX6geq+I9qrHPEu+xlgbCINTV3Hy6937l08flfqjvzEVuR4gPs5W9uceagmurWPfDdMYBXsbB5wTbYWXdUxR78t4hkwUlo1a0R13wYFzZ/GnL5gtk89C7Qg7P+4xelddzjq/wS557vGTm31jXKkULOIrzoMvaR4EZ5C/8CjMqfRn3VIwI7CLd4pgW63tPrU/Fi9OaWhvFKXJvsYzM/3mfM7LOETlB9TiV5z/A8bYL3zg+MvdPeSTe3YQzBML8f8J4lcdW1VPvUzVdqj2a9k28NuuYbYgbsqhjHqc6Jn5vIL5K3PCg5kQ6ZWG3ev/oM+SrKvGRx4yPbPm8p1TxxxTj0t7gD+Fbw1bcD9/UJTI1cHOD+t2EdovJV9s3wXqP8yz6bsMkE6c2mO9UP9gJ8yxK80q54BnTwvjzq9hQ+rVIkORO+sfxKugYKh9Y41jHLer3BrQ/4lg/favYKNeQQEvOi2dMC8l5cQ5jxcYUb1AOpM6uqmLkAGHJMrRs8a06H6hNawXRknENZGXlFmY9omasW6lxmTEu5nghOh1UMY5bfGvPexdteW+nzHuR61p5r8opeQ+o/9TOe08q3bblvaRPZt57xJb3XqxhUwWXvDdXO+8VXHems1Rb3gvfUzPv3eeS99r0H3jzwfLecSvvzVPOgTOjwiL22WnLe7nu6ZL3EnaZeS/VGSnvrYwFvU5uSz1PO/LeTpX3Up1c1iIJt6y8d/GnyE3DP2FuGv4wc1PozuhPmpui75M/T7lpla2q/MXFLt1qjr73qzkGoiUxgjqqqunX2+uqhLXQQ8Za9b1Bfa/47JEuTx31AY16uS7hrJPZ68LIoaz9OGq07ZRjNCd9c5TrNsrntpGIF/VHrj0G8dTxbAIfyBdQzkE1I1lb70esSfkdxhEekm+C7TRQX+SEK+zfIXuq4aOG2UX7Ixqo+WrIXbV6/qbqm1Sz5n7JDrOfhj5ezFfH3xQ97hPrYvxFP8qBSX/pnopZJxizycsNkxEPLJFziDCZ6o9LbRc1AZsOgG7IRQ/sdHE/pRrrHTWM4PI1DJu9Uz5LfKT4IQnMg79ifGWsz827nXdDrgXyTWwbZR5Ddwh4jPO8GH1zCmMXuD/OlEF30rRj51nmSeF73XYW63IXIj+vvpmY7Acmr6yNyfn53T0dhDcW3vYhRxqi857YmDwPBy7E8/N3xnzjsv6/xH7NuokNL71WTT4NvBy24iclX4opvmCLmW6kNvqQjo8tjY8RE1BthfYWz1GM6a3lr8CbF1zOZo+RDgHD6O6BjI8SeaqPUB0I/g9nNHxuDJrV9Gaqz40R/w2QLtSTn2lQe6Fza2o7zq1zYfY7/QUaI8+a+/OoUwW3wj5vBTbehvkn5fzI/6rn/3b1/MDqyrk17jOUg3tA607Q2gtaiBNqnVuLAy68CdnWaJ2H96MuUw5uAd1bQBe5W+6MPMt2XeOPXdZI9T5zjROgtRO0OkBrF2jBZmqucaPLGtdRrGDTgSG5Fjf51/P5tn18OqWJdCroSaegN1ey0F3o5tWM0/fYdFfI8+Cl9ctWaz/QQaplRsxaJp+VGdymPGA4twq1TIrp11AdXIv59OZYM/sXrmXCj7QNDuiqlimolskx1KcI42JzqGsKbiebKXYIaoj/if+obV6P2uYNqG020jm6rbZJd1a4tsn+2HxPbVqTdX6J89ZKrdPct73+uMRPAQNCzrMu8PcA+atUMixSg2FPqjfstdmzXe9x11BHHdbAXb3wGtDSLJlV0fwSywz+DndE5F2IQzncxQuvBY3rsF/IP4fzMvjtqrimvk+dWfOZ3zL+x4zpbBjvteIMC+NxT4vxmvDTxHjcBXHDeO9tDoynOLgGxnu3qhxW9pcYz3dE3THe+zUXjKe43sT40gfE+JILxo8B48MK4zEHY3zJwnjwZ5nzefhI1IoRb8UXdmsxDZiawx0g5z5WrKZarPTtFK9TjV5bCb1sw3MV363j+jR/O8/9UDfHeuncGvEI67c6l8N5bDVebFe1Kds5HuxT3SujGo/7fTTRoPwY6tmV2M3tTF/FEuy/KI7gengYdxICB6lgnRTPoha8Q4d8dKFvge6nN8I29KwIRurEvYhF78Y7GW9U3VWwxxvFKswZ5lhdCx0GD/rhryyf8wvKz9yv2g7bk/dFlsqhoYPthM8ouIZR4jbH9nxWQDhBcTvdeeUzC2DYuhTOyimnQx95V1jyl843TJmNm++hf42UE9HdaIV5VNOzMC/ZpW8Br0IbB0RggDFP3kdEvUiLDQicZzTzfWfUAVDLaWL68EvAP5ozByxpAR7cqO5KkK2a/oDupgL/2EaoLiTfo61s0vyG8wK33KgB90QqOa6qL+H+oFVf2oy9bcKaPkL1JZVPtqraxQTnTYy9aC+5LwKZLn+2pGIkyBr662I737HbDseflNPLGgV8WNVZkh3bcFcLdBGrVmORb4fCLcRjzD+ZS+B+OOfV0v4kJsD+3M5YQOPv+F6KvLO3AxiwhzAglVi4U+sJ4mxqYa/WG55L9S/chXrbHPA8C6wJhgabxzDXDUbMCPHv2OYxo0sPc/45BOzsGRwzDuFeOsWe6CvnBoOXYuMlFQdiPO7IXxZtqs4J3nfNGd068A41mMqdzgLdtwe+bXa904la4OdULbIFtRO6B9MFvqk7V1V9v6l0hWogpq5U7kBDV7ZDV4LQlU32WiSwFHfWKjhj6oJNXnXynBFxskM33yS9xJrWgkeEj3TGD/mg3rSsfOpvN+WjZPQpyGifxGlVVyNb7kPewPUAxlnEjqBVuVvr3Lvfo7CW7sJDVoQFU6Sf8Hmw1XjhTKWdKJCv4bW6+07PBcddbr5H6ND/keq71Pg/BZW71HRfP9iLOOEeYEKftG/3u9Sof2ypvm+Zp9pEJ2jsxvg9GN/tdt8S6zDv0VIOp2Su7l5KmX8MMm+DzDfwPVqpS83QJdJNA7pUuQPm0GM+h7DO4/iOlTqDWwiD5nrQDCzVI+iJFbsu55P31/bJ/oWfpU+GbDln+qA+GePeruWTf1b/sqPHTj+WPjEy+vCD9N+CxC8/eCJtf/f49NCf/NW3Wo/vXP/7r06u2ub76pu9W1viT24589bR7LmJvx+UfY/9yqMPjjK9o48ePXF05JGjn31QkrHoyT4bv7vq7RduWeV5nf8J7/7s9hd3bXj+pmv8T4jXHnvm8eZ/3Py1F1vevVzY+uQj536t9cwfPn167vdK+wIrb/qDgQMjjzzyiyO/9OnY6Oix0T17BniR9xw70S+XL764+Zt3fP7A9t/N/+ZE57Nf/vrLvkvPvzZ7cNOb//qZYwfLl18+uv/V/5j8h4eu+8Ku/xk+uePbe3/06xf23ZVr+sG7/m8Uv9HxR0fvemvl2vu9D6f3bfzxUz/47sbnHn7u7V/9ja6rX/3i3kfH/9To/dHLkms7/1c+d7yuns+r50H5vF19335ePtvfkM8W9X3lEfn0qff1n1PPDvV8Vj7rJuXT88b/AzdExjYINgAA\",\n);\nvar _Src14OwnedProxyFactory = class extends _fuel_ts_contract__WEBPACK_IMPORTED_MODULE_2__.ContractFactory {\n  constructor(accountOrProvider) {\n    super(\n      bytecode,\n      Src14OwnedProxy.abi,\n      accountOrProvider,\n      Src14OwnedProxy.storageSlots,\n    );\n  }\n  static deploy(wallet, options = {}) {\n    const factory = new _Src14OwnedProxyFactory(wallet);\n    return factory.deploy(options);\n  }\n};\nvar Src14OwnedProxyFactory = _Src14OwnedProxyFactory;\n__publicField(Src14OwnedProxyFactory, \"bytecode\", bytecode);\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/recipes/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/script/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@fuel-ts/script/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractScript: () => (/* binding */ AbstractScript),\n/* harmony export */   Script: () => (/* binding */ Script),\n/* harmony export */   returnZeroScript: () => (/* binding */ returnZeroScript)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/account */ \"(ssr)/./node_modules/@fuel-ts/account/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_program__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fuel-ts/program */ \"(ssr)/./node_modules/@fuel-ts/program/dist/index.mjs\");\n// src/script.ts\n\n\n\n\n\n// src/script-invocation-scope.ts\n\n\nvar ScriptInvocationScope = class extends _fuel_ts_program__WEBPACK_IMPORTED_MODULE_4__.FunctionInvocationScope {\n  scriptRequest;\n  async updateScriptRequest() {\n    if (!this.scriptRequest) {\n      await this.buildScriptRequest();\n    }\n    this.transactionRequest.setScript(this.scriptRequest, this.args);\n  }\n  async buildScriptRequest() {\n    const programBytes = this.program.bytes;\n    const chainInfoCache = await this.program.provider.getChain();\n    if (!chainInfoCache) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError.CODES.CHAIN_INFO_CACHE_EMPTY,\n        \"Provider chain info cache is empty. Please make sure to initialize the `Provider` properly by running `new Provider()`\"\n      );\n    }\n    this.scriptRequest = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_4__.ScriptRequest(\n      programBytes,\n      (args) => this.func.encodeArguments(args),\n      () => []\n    );\n  }\n};\n\n// src/types.ts\n\nvar AbstractScript = class extends _fuel_ts_program__WEBPACK_IMPORTED_MODULE_4__.AbstractProgram {\n};\n\n// src/script.ts\nvar Script = class extends AbstractScript {\n  /**\n   * The compiled bytecode of the script.\n   */\n  bytes;\n  /**\n   * The ABI interface for the script.\n   */\n  interface;\n  /**\n   * The account associated with the script.\n   */\n  account;\n  /**\n   * The script request object.\n   */\n  script;\n  /**\n   * The provider used for interacting with the network.\n   */\n  provider;\n  /**\n   * Functions that can be invoked within the script.\n   */\n  functions;\n  /**\n   * Create a new instance of the Script class.\n   *\n   * @param bytecode - The compiled bytecode of the script.\n   * @param abi - The ABI interface for the script.\n   * @param account - The account associated with the script.\n   */\n  constructor(bytecode, abi, account) {\n    super();\n    this.bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(bytecode);\n    this.interface = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Interface(abi);\n    this.provider = account.provider;\n    this.account = account;\n    this.functions = {\n      main: (...args) => new ScriptInvocationScope(this, this.interface.getFunction(\"main\"), args)\n    };\n  }\n  /**\n   * Set the configurable constants of the script.\n   *\n   * @param configurables - An object containing the configurable constants and their values.\n   * @throws Will throw an error if the script has no configurable constants to be set or if an invalid constant is provided.\n   * @returns This instance of the `Script`.\n   */\n  setConfigurableConstants(configurables) {\n    try {\n      if (!Object.keys(this.interface.configurables).length) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n          `The script does not have configurable constants to be set`\n        );\n      }\n      Object.entries(configurables).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError(\n            _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError.CODES.CONFIGURABLE_NOT_FOUND,\n            `The script does not have a configurable constant named: '${key}'`\n          );\n        }\n        const { offset } = this.interface.configurables[key];\n        const encoded = this.interface.encodeConfigurable(key, value);\n        this.bytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_2__.FuelError.CODES.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${err.message}.`\n      );\n    }\n    return this;\n  }\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader script will have the same configurable constants\n   * as the original script which was used to generate the loader script.\n   */\n  deploy(account) {\n    return (0,_fuel_ts_account__WEBPACK_IMPORTED_MODULE_1__.deployScriptOrPredicate)({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) => new Script(loaderBytecode, newAbi, this.account)\n    });\n  }\n};\n\n// src/scripts.ts\n\nvar returnZeroScript = new _fuel_ts_program__WEBPACK_IMPORTED_MODULE_4__.ScriptRequest(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  \"0x24000000\",\n  () => new Uint8Array(0),\n  () => void 0\n);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/script/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/transactions/dist/configs.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@fuel-ts/transactions/dist/configs.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTRACT_MAX_SIZE: () => (/* binding */ CONTRACT_MAX_SIZE),\n/* harmony export */   FAILED_ASSERT_EQ_SIGNAL: () => (/* binding */ FAILED_ASSERT_EQ_SIGNAL),\n/* harmony export */   FAILED_ASSERT_NE_SIGNAL: () => (/* binding */ FAILED_ASSERT_NE_SIGNAL),\n/* harmony export */   FAILED_ASSERT_SIGNAL: () => (/* binding */ FAILED_ASSERT_SIGNAL),\n/* harmony export */   FAILED_REQUIRE_SIGNAL: () => (/* binding */ FAILED_REQUIRE_SIGNAL),\n/* harmony export */   FAILED_TRANSFER_TO_ADDRESS_SIGNAL: () => (/* binding */ FAILED_TRANSFER_TO_ADDRESS_SIGNAL),\n/* harmony export */   FAILED_UNKNOWN_SIGNAL: () => (/* binding */ FAILED_UNKNOWN_SIGNAL),\n/* harmony export */   MAX_PREDICATE_DATA_LENGTH: () => (/* binding */ MAX_PREDICATE_DATA_LENGTH),\n/* harmony export */   MAX_PREDICATE_LENGTH: () => (/* binding */ MAX_PREDICATE_LENGTH),\n/* harmony export */   MAX_SCRIPT_DATA_LENGTH: () => (/* binding */ MAX_SCRIPT_DATA_LENGTH),\n/* harmony export */   MAX_SCRIPT_LENGTH: () => (/* binding */ MAX_SCRIPT_LENGTH),\n/* harmony export */   MAX_STATIC_CONTRACTS: () => (/* binding */ MAX_STATIC_CONTRACTS),\n/* harmony export */   MAX_WITNESSES: () => (/* binding */ MAX_WITNESSES),\n/* harmony export */   PANIC_DOC_URL: () => (/* binding */ PANIC_DOC_URL),\n/* harmony export */   PANIC_REASONS: () => (/* binding */ PANIC_REASONS)\n/* harmony export */ });\n// src/configs.ts\nvar CONTRACT_MAX_SIZE = 16 * 1024;\nvar MAX_WITNESSES = 16;\nvar MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\nvar MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\nvar MAX_STATIC_CONTRACTS = 255;\nvar MAX_PREDICATE_LENGTH = 1024 * 1024;\nvar MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\nvar FAILED_REQUIRE_SIGNAL = \"0xffffffffffff0000\";\nvar FAILED_TRANSFER_TO_ADDRESS_SIGNAL = \"0xffffffffffff0001\";\nvar FAILED_ASSERT_EQ_SIGNAL = \"0xffffffffffff0003\";\nvar FAILED_ASSERT_SIGNAL = \"0xffffffffffff0004\";\nvar FAILED_ASSERT_NE_SIGNAL = \"0xffffffffffff0005\";\nvar FAILED_UNKNOWN_SIGNAL = \"0x0\";\nvar PANIC_REASONS = [\n  \"UnknownPanicReason\",\n  \"Revert\",\n  \"OutOfGas\",\n  \"TransactionValidity\",\n  \"MemoryOverflow\",\n  \"ArithmeticOverflow\",\n  \"ContractNotFound\",\n  \"MemoryOwnership\",\n  \"NotEnoughBalance\",\n  \"ExpectedInternalContext\",\n  \"AssetIdNotFound\",\n  \"InputNotFound\",\n  \"OutputNotFound\",\n  \"WitnessNotFound\",\n  \"TransactionMaturity\",\n  \"InvalidMetadataIdentifier\",\n  \"MalformedCallStructure\",\n  \"ReservedRegisterNotWritable\",\n  \"InvalidFlags\",\n  \"InvalidImmediateValue\",\n  \"ExpectedCoinInput\",\n  \"EcalError\",\n  \"MemoryWriteOverlap\",\n  \"ContractNotInInputs\",\n  \"InternalBalanceOverflow\",\n  \"ContractMaxSize\",\n  \"ExpectedUnallocatedStack\",\n  \"MaxStaticContractsReached\",\n  \"TransferAmountCannotBeZero\",\n  \"ExpectedOutputVariable\",\n  \"ExpectedParentInternalContext\",\n  \"PredicateReturnedNonOne\",\n  \"ContractIdAlreadyDeployed\",\n  \"ContractMismatch\",\n  \"MessageDataTooLong\",\n  \"ArithmeticError\",\n  \"ContractInstructionNotAllowed\",\n  \"TransferZeroCoins\",\n  \"InvalidInstruction\",\n  \"MemoryNotExecutable\",\n  \"PolicyIsNotSet\",\n  \"PolicyNotFound\",\n  \"TooManyReceipts\",\n  \"BalanceOverflow\",\n  \"InvalidBlockHeight\",\n  \"TooManySlots\",\n  \"ExpectedNestedCaller\",\n  \"MemoryGrowthOverlap\",\n  \"UninitalizedMemoryAccess\",\n  \"OverridingConsensusParameters\",\n  \"UnknownStateTransactionBytecodeRoot\",\n  \"OverridingStateTransactionBytecode\",\n  \"BytecodeAlreadyUploaded\",\n  \"ThePartIsNotSequentiallyConnected\",\n  \"BlobIdAlreadyUploaded\",\n  \"BlobNotFound\",\n  \"GasCostNotDefined\"\n];\nvar PANIC_DOC_URL = \"https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html\";\n\n//# sourceMappingURL=configs.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvdHJhbnNhY3Rpb25zL2Rpc3QvY29uZmlncy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWlCRTtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9qdWJvaWkvRnVlbC9BcmNhbmUvbm9kZV9tb2R1bGVzL0BmdWVsLXRzL3RyYW5zYWN0aW9ucy9kaXN0L2NvbmZpZ3MubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb25maWdzLnRzXG52YXIgQ09OVFJBQ1RfTUFYX1NJWkUgPSAxNiAqIDEwMjQ7XG52YXIgTUFYX1dJVE5FU1NFUyA9IDE2O1xudmFyIE1BWF9TQ1JJUFRfTEVOR1RIID0gMTAyNCAqIDEwMjQgKiAxMDI0O1xudmFyIE1BWF9TQ1JJUFRfREFUQV9MRU5HVEggPSAxMDI0ICogMTAyNCAqIDEwMjQ7XG52YXIgTUFYX1NUQVRJQ19DT05UUkFDVFMgPSAyNTU7XG52YXIgTUFYX1BSRURJQ0FURV9MRU5HVEggPSAxMDI0ICogMTAyNDtcbnZhciBNQVhfUFJFRElDQVRFX0RBVEFfTEVOR1RIID0gMTAyNCAqIDEwMjQ7XG52YXIgRkFJTEVEX1JFUVVJUkVfU0lHTkFMID0gXCIweGZmZmZmZmZmZmZmZjAwMDBcIjtcbnZhciBGQUlMRURfVFJBTlNGRVJfVE9fQUREUkVTU19TSUdOQUwgPSBcIjB4ZmZmZmZmZmZmZmZmMDAwMVwiO1xudmFyIEZBSUxFRF9BU1NFUlRfRVFfU0lHTkFMID0gXCIweGZmZmZmZmZmZmZmZjAwMDNcIjtcbnZhciBGQUlMRURfQVNTRVJUX1NJR05BTCA9IFwiMHhmZmZmZmZmZmZmZmYwMDA0XCI7XG52YXIgRkFJTEVEX0FTU0VSVF9ORV9TSUdOQUwgPSBcIjB4ZmZmZmZmZmZmZmZmMDAwNVwiO1xudmFyIEZBSUxFRF9VTktOT1dOX1NJR05BTCA9IFwiMHgwXCI7XG52YXIgUEFOSUNfUkVBU09OUyA9IFtcbiAgXCJVbmtub3duUGFuaWNSZWFzb25cIixcbiAgXCJSZXZlcnRcIixcbiAgXCJPdXRPZkdhc1wiLFxuICBcIlRyYW5zYWN0aW9uVmFsaWRpdHlcIixcbiAgXCJNZW1vcnlPdmVyZmxvd1wiLFxuICBcIkFyaXRobWV0aWNPdmVyZmxvd1wiLFxuICBcIkNvbnRyYWN0Tm90Rm91bmRcIixcbiAgXCJNZW1vcnlPd25lcnNoaXBcIixcbiAgXCJOb3RFbm91Z2hCYWxhbmNlXCIsXG4gIFwiRXhwZWN0ZWRJbnRlcm5hbENvbnRleHRcIixcbiAgXCJBc3NldElkTm90Rm91bmRcIixcbiAgXCJJbnB1dE5vdEZvdW5kXCIsXG4gIFwiT3V0cHV0Tm90Rm91bmRcIixcbiAgXCJXaXRuZXNzTm90Rm91bmRcIixcbiAgXCJUcmFuc2FjdGlvbk1hdHVyaXR5XCIsXG4gIFwiSW52YWxpZE1ldGFkYXRhSWRlbnRpZmllclwiLFxuICBcIk1hbGZvcm1lZENhbGxTdHJ1Y3R1cmVcIixcbiAgXCJSZXNlcnZlZFJlZ2lzdGVyTm90V3JpdGFibGVcIixcbiAgXCJJbnZhbGlkRmxhZ3NcIixcbiAgXCJJbnZhbGlkSW1tZWRpYXRlVmFsdWVcIixcbiAgXCJFeHBlY3RlZENvaW5JbnB1dFwiLFxuICBcIkVjYWxFcnJvclwiLFxuICBcIk1lbW9yeVdyaXRlT3ZlcmxhcFwiLFxuICBcIkNvbnRyYWN0Tm90SW5JbnB1dHNcIixcbiAgXCJJbnRlcm5hbEJhbGFuY2VPdmVyZmxvd1wiLFxuICBcIkNvbnRyYWN0TWF4U2l6ZVwiLFxuICBcIkV4cGVjdGVkVW5hbGxvY2F0ZWRTdGFja1wiLFxuICBcIk1heFN0YXRpY0NvbnRyYWN0c1JlYWNoZWRcIixcbiAgXCJUcmFuc2ZlckFtb3VudENhbm5vdEJlWmVyb1wiLFxuICBcIkV4cGVjdGVkT3V0cHV0VmFyaWFibGVcIixcbiAgXCJFeHBlY3RlZFBhcmVudEludGVybmFsQ29udGV4dFwiLFxuICBcIlByZWRpY2F0ZVJldHVybmVkTm9uT25lXCIsXG4gIFwiQ29udHJhY3RJZEFscmVhZHlEZXBsb3llZFwiLFxuICBcIkNvbnRyYWN0TWlzbWF0Y2hcIixcbiAgXCJNZXNzYWdlRGF0YVRvb0xvbmdcIixcbiAgXCJBcml0aG1ldGljRXJyb3JcIixcbiAgXCJDb250cmFjdEluc3RydWN0aW9uTm90QWxsb3dlZFwiLFxuICBcIlRyYW5zZmVyWmVyb0NvaW5zXCIsXG4gIFwiSW52YWxpZEluc3RydWN0aW9uXCIsXG4gIFwiTWVtb3J5Tm90RXhlY3V0YWJsZVwiLFxuICBcIlBvbGljeUlzTm90U2V0XCIsXG4gIFwiUG9saWN5Tm90Rm91bmRcIixcbiAgXCJUb29NYW55UmVjZWlwdHNcIixcbiAgXCJCYWxhbmNlT3ZlcmZsb3dcIixcbiAgXCJJbnZhbGlkQmxvY2tIZWlnaHRcIixcbiAgXCJUb29NYW55U2xvdHNcIixcbiAgXCJFeHBlY3RlZE5lc3RlZENhbGxlclwiLFxuICBcIk1lbW9yeUdyb3d0aE92ZXJsYXBcIixcbiAgXCJVbmluaXRhbGl6ZWRNZW1vcnlBY2Nlc3NcIixcbiAgXCJPdmVycmlkaW5nQ29uc2Vuc3VzUGFyYW1ldGVyc1wiLFxuICBcIlVua25vd25TdGF0ZVRyYW5zYWN0aW9uQnl0ZWNvZGVSb290XCIsXG4gIFwiT3ZlcnJpZGluZ1N0YXRlVHJhbnNhY3Rpb25CeXRlY29kZVwiLFxuICBcIkJ5dGVjb2RlQWxyZWFkeVVwbG9hZGVkXCIsXG4gIFwiVGhlUGFydElzTm90U2VxdWVudGlhbGx5Q29ubmVjdGVkXCIsXG4gIFwiQmxvYklkQWxyZWFkeVVwbG9hZGVkXCIsXG4gIFwiQmxvYk5vdEZvdW5kXCIsXG4gIFwiR2FzQ29zdE5vdERlZmluZWRcIlxuXTtcbnZhciBQQU5JQ19ET0NfVVJMID0gXCJodHRwczovL2RvY3MucnMvZnVlbC1hc20vbGF0ZXN0L2Z1ZWxfYXNtL2VudW0uUGFuaWNSZWFzb24uaHRtbFwiO1xuZXhwb3J0IHtcbiAgQ09OVFJBQ1RfTUFYX1NJWkUsXG4gIEZBSUxFRF9BU1NFUlRfRVFfU0lHTkFMLFxuICBGQUlMRURfQVNTRVJUX05FX1NJR05BTCxcbiAgRkFJTEVEX0FTU0VSVF9TSUdOQUwsXG4gIEZBSUxFRF9SRVFVSVJFX1NJR05BTCxcbiAgRkFJTEVEX1RSQU5TRkVSX1RPX0FERFJFU1NfU0lHTkFMLFxuICBGQUlMRURfVU5LTk9XTl9TSUdOQUwsXG4gIE1BWF9QUkVESUNBVEVfREFUQV9MRU5HVEgsXG4gIE1BWF9QUkVESUNBVEVfTEVOR1RILFxuICBNQVhfU0NSSVBUX0RBVEFfTEVOR1RILFxuICBNQVhfU0NSSVBUX0xFTkdUSCxcbiAgTUFYX1NUQVRJQ19DT05UUkFDVFMsXG4gIE1BWF9XSVRORVNTRVMsXG4gIFBBTklDX0RPQ19VUkwsXG4gIFBBTklDX1JFQVNPTlNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWdzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/transactions/dist/configs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/transactions/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@fuel-ts/transactions/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteArrayCoder: () => (/* binding */ ByteArrayCoder),\n/* harmony export */   InputCoder: () => (/* binding */ InputCoder),\n/* harmony export */   InputCoinCoder: () => (/* binding */ InputCoinCoder),\n/* harmony export */   InputContractCoder: () => (/* binding */ InputContractCoder),\n/* harmony export */   InputMessageCoder: () => (/* binding */ InputMessageCoder),\n/* harmony export */   InputType: () => (/* binding */ InputType),\n/* harmony export */   OutputChangeCoder: () => (/* binding */ OutputChangeCoder),\n/* harmony export */   OutputCoder: () => (/* binding */ OutputCoder),\n/* harmony export */   OutputCoinCoder: () => (/* binding */ OutputCoinCoder),\n/* harmony export */   OutputContractCoder: () => (/* binding */ OutputContractCoder),\n/* harmony export */   OutputContractCreatedCoder: () => (/* binding */ OutputContractCreatedCoder),\n/* harmony export */   OutputType: () => (/* binding */ OutputType),\n/* harmony export */   OutputVariableCoder: () => (/* binding */ OutputVariableCoder),\n/* harmony export */   PoliciesCoder: () => (/* binding */ PoliciesCoder),\n/* harmony export */   PolicyType: () => (/* binding */ PolicyType),\n/* harmony export */   ReceiptType: () => (/* binding */ ReceiptType),\n/* harmony export */   StorageSlotCoder: () => (/* binding */ StorageSlotCoder),\n/* harmony export */   TransactionBlobCoder: () => (/* binding */ TransactionBlobCoder),\n/* harmony export */   TransactionCoder: () => (/* binding */ TransactionCoder),\n/* harmony export */   TransactionCreateCoder: () => (/* binding */ TransactionCreateCoder),\n/* harmony export */   TransactionMintCoder: () => (/* binding */ TransactionMintCoder),\n/* harmony export */   TransactionScriptCoder: () => (/* binding */ TransactionScriptCoder),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   TransactionUpgradeCoder: () => (/* binding */ TransactionUpgradeCoder),\n/* harmony export */   TransactionUploadCoder: () => (/* binding */ TransactionUploadCoder),\n/* harmony export */   TxPointerCoder: () => (/* binding */ TxPointerCoder),\n/* harmony export */   UpgradePurposeCoder: () => (/* binding */ UpgradePurposeCoder),\n/* harmony export */   UpgradePurposeTypeEnum: () => (/* binding */ UpgradePurposeTypeEnum),\n/* harmony export */   UtxoIdCoder: () => (/* binding */ UtxoIdCoder),\n/* harmony export */   WitnessCoder: () => (/* binding */ WitnessCoder),\n/* harmony export */   createAssetId: () => (/* binding */ createAssetId),\n/* harmony export */   getMessageId: () => (/* binding */ getMessageId),\n/* harmony export */   getMintedAssetId: () => (/* binding */ getMintedAssetId),\n/* harmony export */   sortPolicies: () => (/* binding */ sortPolicies)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/abi-coder */ \"(ssr)/./node_modules/@fuel-ts/abi-coder/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fuel-ts/hasher */ \"(ssr)/./node_modules/@fuel-ts/hasher/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fuel-ts/utils */ \"(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\");\n// src/coders/input.ts\n\n\n\n\n\n// src/coders/byte-array.ts\n\n\nvar ByteArrayCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  length;\n  #paddingLength;\n  constructor(length) {\n    const paddingLength = (8 - length % 8) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      \"ByteArray\",\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n  encode(value) {\n    const parts = [];\n    const data = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n    parts.push(data);\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = [(0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.hexlify)(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n    return [value, o];\n  }\n};\n\n// src/coders/tx-pointer.ts\n\n\nvar TxPointerCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.StructCoder {\n  constructor() {\n    super(\"TxPointer\", {\n      blockHeight: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }),\n      txIndex: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true })\n    });\n  }\n  static decodeFromGqlScalar(value) {\n    if (value.length !== 12) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.DECODE_ERROR,\n        `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`\n      );\n    }\n    const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];\n    return {\n      blockHeight: parseInt(blockHeight, 16),\n      txIndex: parseInt(txIndex, 16)\n    };\n  }\n};\n\n// src/coders/input.ts\nvar InputType = /* @__PURE__ */ ((InputType2) => {\n  InputType2[InputType2[\"Coin\"] = 0] = \"Coin\";\n  InputType2[InputType2[\"Contract\"] = 1] = \"Contract\";\n  InputType2[InputType2[\"Message\"] = 2] = \"Message\";\n  return InputType2;\n})(InputType || {});\nvar InputCoinCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"InputCoin\", \"struct InputCoin\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.txID));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.owner));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateGasUsed));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateLength));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n    return [\n      {\n        type: 0 /* Coin */,\n        txID,\n        outputIndex,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        predicate,\n        predicateData\n      },\n      o\n    ];\n  }\n};\nvar InputContractCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"InputContract\", \"struct InputContract\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.txID));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.balanceRoot));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.contractID));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const contractID = decoded;\n    return [\n      {\n        type: 1 /* Contract */,\n        txID,\n        outputIndex,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID\n      },\n      o\n    ];\n  }\n};\nvar InputMessageCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"InputMessage\", \"struct InputMessage\", 0);\n  }\n  static getMessageId(value) {\n    const parts = [];\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value.data || \"0x\"));\n    return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts));\n  }\n  static encodeData(messageData) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(messageData || \"0x\");\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n  encode(value) {\n    const parts = [];\n    const data = InputMessageCoder.encodeData(value.data);\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateGasUsed));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(data.length));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateLength));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  static decodeData(messageData) {\n    const bytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n    return [\n      {\n        type: 2 /* Message */,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData\n      },\n      o\n    ];\n  }\n};\nvar InputCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"Input\", \"struct Input\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (type) {\n      case 0 /* Coin */: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case 1 /* Contract */: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case 2 /* Message */: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Coin */: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Contract */: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Message */: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/output.ts\n\n\n\nvar OutputType = /* @__PURE__ */ ((OutputType2) => {\n  OutputType2[OutputType2[\"Coin\"] = 0] = \"Coin\";\n  OutputType2[OutputType2[\"Contract\"] = 1] = \"Contract\";\n  OutputType2[OutputType2[\"Change\"] = 2] = \"Change\";\n  OutputType2[OutputType2[\"Variable\"] = 3] = \"Variable\";\n  OutputType2[OutputType2[\"ContractCreated\"] = 4] = \"ContractCreated\";\n  return OutputType2;\n})(OutputType || {});\nvar OutputCoinCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"OutputCoin\", \"struct OutputCoin\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.to));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.assetId));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 0 /* Coin */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputContractCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"OutputContract\", \"struct OutputContract\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).encode(value.inputIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.balanceRoot));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.stateRoot));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    return [\n      {\n        type: 1 /* Contract */,\n        inputIndex,\n        balanceRoot,\n        stateRoot\n      },\n      o\n    ];\n  }\n};\nvar OutputChangeCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"OutputChange\", \"struct OutputChange\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.to));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.assetId));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 2 /* Change */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputVariableCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"OutputVariable\", \"struct OutputVariable\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.to));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.assetId));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const assetId = decoded;\n    return [\n      {\n        type: 3 /* Variable */,\n        to,\n        amount,\n        assetId\n      },\n      o\n    ];\n  }\n};\nvar OutputContractCreatedCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"OutputContractCreated\", \"struct OutputContractCreated\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.contractId));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.stateRoot));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    return [\n      {\n        type: 4 /* ContractCreated */,\n        contractId,\n        stateRoot\n      },\n      o\n    ];\n  }\n};\nvar OutputCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"Output\", \" struct Output\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (type) {\n      case 0 /* Coin */: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case 1 /* Contract */: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case 2 /* Change */: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case 3 /* Variable */: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case 4 /* ContractCreated */: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Coin */: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Contract */: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Change */: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 3 /* Variable */: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 4 /* ContractCreated */: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/policy.ts\n\n\n\nvar PolicyType = /* @__PURE__ */ ((PolicyType2) => {\n  PolicyType2[PolicyType2[\"Tip\"] = 1] = \"Tip\";\n  PolicyType2[PolicyType2[\"WitnessLimit\"] = 2] = \"WitnessLimit\";\n  PolicyType2[PolicyType2[\"Maturity\"] = 4] = \"Maturity\";\n  PolicyType2[PolicyType2[\"MaxFee\"] = 8] = \"MaxFee\";\n  return PolicyType2;\n})(PolicyType || {});\nvar sortPolicies = (policies) => policies.sort((a, b) => a.type - b.type);\nfunction validateDuplicatedPolicies(policies) {\n  const seenTypes = /* @__PURE__ */ new Set();\n  policies.forEach((policy) => {\n    if (seenTypes.has(policy.type)) {\n      throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n        _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.DUPLICATED_POLICY,\n        `Duplicate policy type found: ${8 /* MaxFee */}`\n      );\n    }\n    seenTypes.add(policy.type);\n  });\n}\nvar PoliciesCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"Policies\", \"array Policy\", 0);\n  }\n  encode(policies) {\n    validateDuplicatedPolicies(policies);\n    const sortedPolicies = sortPolicies(policies);\n    const parts = [];\n    sortedPolicies.forEach(({ data, type }) => {\n      switch (type) {\n        case 8 /* MaxFee */:\n        case 1 /* Tip */:\n        case 2 /* WitnessLimit */:\n          parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(data));\n          break;\n        case 4 /* Maturity */:\n          parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(data));\n          break;\n        default: {\n          throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type}`);\n        }\n      }\n    });\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset, policyTypes) {\n    let o = offset;\n    const policies = [];\n    if (policyTypes & 1 /* Tip */) {\n      const [tip, nextOffset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 1 /* Tip */, data: tip });\n    }\n    if (policyTypes & 2 /* WitnessLimit */) {\n      const [witnessLimit, nextOffset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 2 /* WitnessLimit */, data: witnessLimit });\n    }\n    if (policyTypes & 4 /* Maturity */) {\n      const [maturity, nextOffset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(\n        data,\n        o\n      );\n      o = nextOffset;\n      policies.push({ type: 4 /* Maturity */, data: maturity });\n    }\n    if (policyTypes & 8 /* MaxFee */) {\n      const [maxFee, nextOffset] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n      o = nextOffset;\n      policies.push({ type: 8 /* MaxFee */, data: maxFee });\n    }\n    return [policies, o];\n  }\n};\n\n// src/receipt.ts\n\n\n\nvar ReceiptType = /* @__PURE__ */ ((ReceiptType2) => {\n  ReceiptType2[ReceiptType2[\"Call\"] = 0] = \"Call\";\n  ReceiptType2[ReceiptType2[\"Return\"] = 1] = \"Return\";\n  ReceiptType2[ReceiptType2[\"ReturnData\"] = 2] = \"ReturnData\";\n  ReceiptType2[ReceiptType2[\"Panic\"] = 3] = \"Panic\";\n  ReceiptType2[ReceiptType2[\"Revert\"] = 4] = \"Revert\";\n  ReceiptType2[ReceiptType2[\"Log\"] = 5] = \"Log\";\n  ReceiptType2[ReceiptType2[\"LogData\"] = 6] = \"LogData\";\n  ReceiptType2[ReceiptType2[\"Transfer\"] = 7] = \"Transfer\";\n  ReceiptType2[ReceiptType2[\"TransferOut\"] = 8] = \"TransferOut\";\n  ReceiptType2[ReceiptType2[\"ScriptResult\"] = 9] = \"ScriptResult\";\n  ReceiptType2[ReceiptType2[\"MessageOut\"] = 10] = \"MessageOut\";\n  ReceiptType2[ReceiptType2[\"Mint\"] = 11] = \"Mint\";\n  ReceiptType2[ReceiptType2[\"Burn\"] = 12] = \"Burn\";\n  return ReceiptType2;\n})(ReceiptType || {});\nvar getMintedAssetId = (contractId, subId) => {\n  const contractIdBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(contractId);\n  const subIdBytes = (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(subId);\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)([contractIdBytes, subIdBytes]));\n};\nvar createAssetId = (contractId, subId) => ({\n  bits: getMintedAssetId(contractId, subId)\n});\nvar getMessageId = (value) => {\n  const parts = [];\n  parts.push(new ByteArrayCoder(32).encode(value.sender));\n  parts.push(new ByteArrayCoder(32).encode(value.recipient));\n  parts.push(new ByteArrayCoder(32).encode(value.nonce));\n  parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.amount));\n  parts.push((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value.data || \"0x\"));\n  return (0,_fuel_ts_hasher__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts));\n};\n\n// src/coders/storage-slot.ts\n\nvar StorageSlotCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.StructCoder {\n  constructor() {\n    super(\"StorageSlot\", {\n      key: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder(),\n      value: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder()\n    });\n  }\n};\n\n// src/coders/transaction.ts\n\n\n\n\n// src/coders/upgrade-purpose.ts\n\n\n\nvar UpgradePurposeTypeEnum = /* @__PURE__ */ ((UpgradePurposeTypeEnum2) => {\n  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2[\"ConsensusParameters\"] = 0] = \"ConsensusParameters\";\n  UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2[\"StateTransition\"] = 1] = \"StateTransition\";\n  return UpgradePurposeTypeEnum2;\n})(UpgradePurposeTypeEnum || {});\nvar UpgradePurposeCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"UpgradePurpose\", \"UpgradePurpose\", 0);\n  }\n  encode(upgradePurposeType) {\n    const parts = [];\n    const { type } = upgradePurposeType;\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).encode(type));\n    switch (type) {\n      case 0 /* ConsensusParameters */: {\n        const data = upgradePurposeType.data;\n        parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(data.witnessIndex));\n        parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(data.checksum));\n        break;\n      }\n      case 1 /* StateTransition */: {\n        const data = upgradePurposeType.data;\n        parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(data.bytecodeRoot));\n        break;\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let o = offset;\n    let decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* ConsensusParameters */: {\n        [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n        const witnessIndex = decoded;\n        [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n        const checksum = decoded;\n        return [{ type, data: { witnessIndex, checksum } }, o];\n      }\n      case 1 /* StateTransition */: {\n        [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n        const bytecodeRoot = decoded;\n        return [{ type, data: { bytecodeRoot } }, o];\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/witness.ts\n\n\nvar WitnessCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\n      \"Witness\",\n      // Types of dynamic length are not supported in the ABI\n      \"unknown\",\n      0\n    );\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n    return [\n      {\n        dataLength,\n        data: witnessData\n      },\n      o\n    ];\n  }\n};\n\n// src/coders/transaction.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[TransactionType2[\"Script\"] = 0] = \"Script\";\n  TransactionType2[TransactionType2[\"Create\"] = 1] = \"Create\";\n  TransactionType2[TransactionType2[\"Mint\"] = 2] = \"Mint\";\n  TransactionType2[TransactionType2[\"Upgrade\"] = 3] = \"Upgrade\";\n  TransactionType2[TransactionType2[\"Upload\"] = 4] = \"Upload\";\n  TransactionType2[TransactionType2[\"Blob\"] = 5] = \"Blob\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionScriptCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionScript\", \"struct TransactionScript\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.scriptGasLimit));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.receiptsRoot));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.scriptLength));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.scriptDataLength));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const scriptGasLimit = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 0 /* Script */,\n        scriptGasLimit,\n        scriptLength,\n        scriptDataLength,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionCreateCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionCreate\", \"struct TransactionCreate\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.bytecodeWitnessIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.salt));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.storageSlotsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(\n      new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(\n        value.storageSlots\n      )\n    );\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(\n      data,\n      o\n    );\n    const storageSlots = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 1 /* Create */,\n        bytecodeWitnessIndex,\n        policyTypes,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        policies,\n        storageSlots,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionMintCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionMint\", \"struct TransactionMint\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new InputContractCoder().encode(value.inputContract));\n    parts.push(new OutputContractCoder().encode(value.outputContract));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.mintAmount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.mintAssetId));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").encode(value.gasPrice));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new InputContractCoder().decode(data, o);\n    const inputContract = decoded;\n    [decoded, o] = new OutputContractCoder().decode(data, o);\n    const outputContract = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const mintAmount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const mintAssetId = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.BigNumberCoder(\"u64\").decode(data, o);\n    const gasPrice = decoded;\n    return [\n      {\n        type: 2 /* Mint */,\n        txPointer,\n        inputContract,\n        outputContract,\n        mintAmount,\n        mintAssetId,\n        gasPrice\n      },\n      o\n    ];\n  }\n};\nvar TransactionUpgradeCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionUpgrade\", \"struct TransactionUpgrade\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new UpgradePurposeCoder().decode(data, o);\n    const upgradePurpose = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 3 /* Upgrade */,\n        upgradePurpose,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionUploadCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionUpload\", \"struct TransactionUpload\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.root));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.subsectionIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.subsectionsNumber));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.proofSetCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder(), value.proofSetCount).encode(value.proofSet));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const root = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const subsectionIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const subsectionsNumber = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const proofSetCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder(), proofSetCount).decode(data, o);\n    const proofSet = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 4 /* Upload */,\n        root,\n        witnessIndex,\n        subsectionIndex,\n        subsectionsNumber,\n        proofSetCount,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        proofSet,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionBlobCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"TransactionBlob\", \"struct TransactionBlob\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().encode(value.blobId));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder().decode(data, o);\n    const blobId = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u32\", { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n    return [\n      {\n        type: 5 /* Blob */,\n        blobId,\n        witnessIndex,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses\n      },\n      o\n    ];\n  }\n};\nvar TransactionCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n  constructor() {\n    super(\"Transaction\", \"struct Transaction\", 0);\n  }\n  encode(value) {\n    const parts = [];\n    parts.push(new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).encode(value.type));\n    const { type } = value;\n    switch (value.type) {\n      case 0 /* Script */: {\n        parts.push(\n          new TransactionScriptCoder().encode(value)\n        );\n        break;\n      }\n      case 1 /* Create */: {\n        parts.push(\n          new TransactionCreateCoder().encode(value)\n        );\n        break;\n      }\n      case 2 /* Mint */: {\n        parts.push(new TransactionMintCoder().encode(value));\n        break;\n      }\n      case 3 /* Upgrade */: {\n        parts.push(\n          new TransactionUpgradeCoder().encode(value)\n        );\n        break;\n      }\n      case 4 /* Upload */: {\n        parts.push(\n          new TransactionUploadCoder().encode(value)\n        );\n        break;\n      }\n      case 5 /* Blob */: {\n        parts.push(new TransactionBlobCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n    return (0,_fuel_ts_utils__WEBPACK_IMPORTED_MODULE_3__.concat)(parts);\n  }\n  decode(data, offset) {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u8\", { padToWordSize: true }).decode(data, o);\n    const type = decoded;\n    switch (type) {\n      case 0 /* Script */: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 1 /* Create */: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 2 /* Mint */: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 3 /* Upgrade */: {\n        [decoded, o] = new TransactionUpgradeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 4 /* Upload */: {\n        [decoded, o] = new TransactionUploadCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case 5 /* Blob */: {\n        [decoded, o] = new TransactionBlobCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n};\n\n// src/coders/utxo-id.ts\n\nvar UtxoIdCoder = class extends _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.StructCoder {\n  constructor() {\n    super(\"UtxoId\", {\n      transactionId: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.B256Coder(),\n      outputIndex: new _fuel_ts_abi_coder__WEBPACK_IMPORTED_MODULE_0__.NumberCoder(\"u16\", { padToWordSize: true })\n    });\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/transactions/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@fuel-ts/utils/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   arrayify: () => (/* binding */ arrayify),\n/* harmony export */   assertUnreachable: () => (/* binding */ assertUnreachable),\n/* harmony export */   capitalizeString: () => (/* binding */ capitalizeString),\n/* harmony export */   chunkAndPadBytes: () => (/* binding */ chunkAndPadBytes),\n/* harmony export */   compressBytecode: () => (/* binding */ compressBytecode),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   dataSlice: () => (/* binding */ dataSlice),\n/* harmony export */   decodeBase58: () => (/* binding */ decodeBase58),\n/* harmony export */   decompressBytecode: () => (/* binding */ decompressBytecode),\n/* harmony export */   defaultConsensusKey: () => (/* binding */ defaultConsensusKey),\n/* harmony export */   defaultSnapshotConfigs: () => (/* binding */ defaultSnapshotConfigs),\n/* harmony export */   encodeBase58: () => (/* binding */ encodeBase58),\n/* harmony export */   hexlify: () => (/* binding */ hexlify),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   normalizeString: () => (/* binding */ normalizeString),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toUtf8Bytes: () => (/* binding */ toUtf8Bytes),\n/* harmony export */   toUtf8String: () => (/* binding */ toUtf8String)\n/* harmony export */ });\n/* harmony import */ var _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fuel-ts/errors */ \"(ssr)/./node_modules/@fuel-ts/errors/dist/index.mjs\");\n/* harmony import */ var _fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fuel-ts/math */ \"(ssr)/./node_modules/@fuel-ts/math/dist/index.mjs\");\n/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fflate */ \"(ssr)/./node_modules/fflate/esm/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/utils/capitalizeString.ts\nvar capitalizeString = (str) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n// src/utils/chunkAndPadBytes.ts\nvar chunkAndPadBytes = (bytes, chunkSize) => {\n  const chunks = [];\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + (8 - remainingBytes % 8) % 8;\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n  return chunks;\n};\n\n// src/utils/arrayify.ts\n\nvar arrayify = (value, name, copy = true) => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n  const nameMessage = name ? ` ${name} -` : \"\";\n  const message = `invalid data:${nameMessage} ${value}\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, message);\n};\n\n// src/utils/concat.ts\nvar concatBytes = (arrays) => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return concatenated;\n};\nvar concat = (arrays) => {\n  const bytes = arrays.map((v) => arrayify(v));\n  return concatBytes(bytes);\n};\n\n// src/utils/hexlify.ts\nvar HexCharacters = \"0123456789abcdef\";\nfunction hexlify(data) {\n  const bytes = arrayify(data);\n  let result = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];\n  }\n  return result;\n}\n\n// src/utils/normalizeString.ts\n\nvar normalizeString = (str) => {\n  const transformations = [\n    (s) => s.replace(/\\s+/g, \"-\"),\n    // spaces to -\n    (s) => s.replace(/\\./g, \"-\"),\n    // dots to -\n    (s) => s.replace(/_/g, \"-\"),\n    // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()),\n    // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, \"\"),\n    // delete any '-' left\n    (s) => s.replace(/^\\d+/, \"\"),\n    // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1)\n    // capitalize first letter\n  ];\n  const output = transformations.reduce((s, t) => t(s), str);\n  if (output === \"\") {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.PARSE_FAILED, errMsg);\n  }\n  return output;\n};\n\n// src/utils/date-time.ts\nvar TAI64_LEAP_SECONDS = 37;\nvar TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\nvar msToSeconds = (ms) => Math.floor(ms / 1e3);\nvar secondsToMs = (seconds) => seconds * 1e3;\nvar tai64ToUnixSeconds = (tai64) => Number(BigInt(tai64) - TAI64_UNIX_OFFSET);\nvar unixSecondsToTai64 = (unixSeconds) => String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);\nvar tai64ToUnixMilliseconds = (tai64) => secondsToMs(tai64ToUnixSeconds(tai64));\nvar _DateTime = class extends Date {\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64) {\n    return new _DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds) {\n    return new _DateTime(unixMilliseconds);\n  }\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds) {\n    return new _DateTime(secondsToMs(unixSeconds));\n  }\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  constructor(date) {\n    super(date);\n  }\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64() {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds() {\n    return this.getTime();\n  }\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds() {\n    return msToSeconds(this.getTime());\n  }\n};\nvar DateTime = _DateTime;\n__publicField(DateTime, \"TAI64_NULL\", \"\");\n\n// src/utils/sleep.ts\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n\n// src/utils/defaultSnapshots/chainConfig.json\nvar chainConfig_default = {\n  chain_name: \"local_testnet\",\n  consensus_parameters: {\n    V2: {\n      tx_params: {\n        V1: {\n          max_inputs: 255,\n          max_outputs: 255,\n          max_witnesses: 255,\n          max_gas_per_tx: 3e7,\n          max_size: 112640,\n          max_bytecode_subsections: 256\n        }\n      },\n      predicate_params: {\n        V1: {\n          max_predicate_length: 24576,\n          max_predicate_data_length: 24576,\n          max_message_data_length: 102400,\n          max_gas_per_predicate: 1e6\n        }\n      },\n      script_params: {\n        V1: {\n          max_script_length: 102400,\n          max_script_data_length: 102400\n        }\n      },\n      contract_params: {\n        V1: {\n          contract_max_size: 112640,\n          max_storage_slots: 1760\n        }\n      },\n      fee_params: {\n        V1: {\n          gas_price_factor: 115e4,\n          gas_per_byte: 63\n        }\n      },\n      chain_id: 0,\n      gas_costs: {\n        V4: {\n          add: 2,\n          addi: 2,\n          and: 2,\n          andi: 2,\n          bal: 274,\n          bhei: 2,\n          bhsh: 2,\n          burn: 7566,\n          cb: 2,\n          cfsi: 2,\n          div: 2,\n          divi: 2,\n          eck1: 1489,\n          ecr1: 20513,\n          eq: 2,\n          exp: 2,\n          expi: 2,\n          flag: 2,\n          gm: 2,\n          gt: 2,\n          gtf: 3,\n          ji: 2,\n          jmp: 2,\n          jne: 2,\n          jnei: 2,\n          jnzi: 2,\n          jmpf: 2,\n          jmpb: 2,\n          jnzf: 2,\n          jnzb: 2,\n          jnef: 2,\n          jneb: 2,\n          lb: 2,\n          log: 80,\n          lt: 2,\n          lw: 2,\n          mint: 6566,\n          mlog: 2,\n          mod: 2,\n          modi: 2,\n          move: 2,\n          movi: 1,\n          mroo: 3,\n          mul: 2,\n          muli: 2,\n          mldv: 3,\n          noop: 1,\n          not: 2,\n          or: 1,\n          ori: 2,\n          poph: 2,\n          popl: 2,\n          pshh: 5,\n          pshl: 5,\n          ret_contract: 43,\n          rvrt_contract: 39,\n          sb: 2,\n          sll: 2,\n          slli: 2,\n          srl: 2,\n          srli: 2,\n          srw: 237,\n          sub: 2,\n          subi: 2,\n          sw: 2,\n          sww: 5708,\n          time: 106,\n          tr: 9253,\n          tro: 7199,\n          wdcm: 2,\n          wqcm: 2,\n          wdop: 2,\n          wqop: 3,\n          wdml: 3,\n          wqml: 3,\n          wddv: 3,\n          wqdv: 4,\n          wdmd: 6,\n          wqmd: 9,\n          wdam: 6,\n          wqam: 6,\n          wdmm: 6,\n          wqmm: 6,\n          xor: 2,\n          xori: 2,\n          aloc: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 35\n            }\n          },\n          bsiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 564\n            }\n          },\n          bldd: {\n            LightOperation: {\n              base: 33,\n              units_per_gas: 130\n            }\n          },\n          cfe: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 62\n            }\n          },\n          cfei: {\n            LightOperation: {\n              base: 10,\n              units_per_gas: 66\n            }\n          },\n          call: {\n            LightOperation: {\n              base: 6934,\n              units_per_gas: 14\n            }\n          },\n          ccp: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 155\n            }\n          },\n          croo: {\n            LightOperation: {\n              base: 69,\n              units_per_gas: 4\n            }\n          },\n          csiz: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 580\n            }\n          },\n          ed19: {\n            LightOperation: {\n              base: 3232,\n              units_per_gas: 7\n            }\n          },\n          k256: {\n            LightOperation: {\n              base: 21,\n              units_per_gas: 6\n            }\n          },\n          ldc: {\n            LightOperation: {\n              base: 84,\n              units_per_gas: 113\n            }\n          },\n          logd: {\n            LightOperation: {\n              base: 278,\n              units_per_gas: 5\n            }\n          },\n          mcl: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1282\n            }\n          },\n          mcli: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1250\n            }\n          },\n          mcp: {\n            LightOperation: {\n              base: 3,\n              units_per_gas: 385\n            }\n          },\n          mcpi: {\n            LightOperation: {\n              base: 7,\n              units_per_gas: 585\n            }\n          },\n          meq: {\n            LightOperation: {\n              base: 2,\n              units_per_gas: 1234\n            }\n          },\n          retd_contract: {\n            LightOperation: {\n              base: 227,\n              units_per_gas: 5\n            }\n          },\n          s256: {\n            LightOperation: {\n              base: 25,\n              units_per_gas: 5\n            }\n          },\n          scwq: {\n            HeavyOperation: {\n              base: 5666,\n              gas_per_unit: 6628\n            }\n          },\n          smo: {\n            LightOperation: {\n              base: 14635,\n              units_per_gas: 3\n            }\n          },\n          srwq: {\n            HeavyOperation: {\n              base: 245,\n              gas_per_unit: 243\n            }\n          },\n          swwq: {\n            HeavyOperation: {\n              base: 5661,\n              gas_per_unit: 5776\n            }\n          },\n          contract_root: {\n            LightOperation: {\n              base: 24,\n              units_per_gas: 3\n            }\n          },\n          state_root: {\n            HeavyOperation: {\n              base: 189,\n              gas_per_unit: 96\n            }\n          },\n          new_storage_per_byte: 63,\n          vm_initialization: {\n            LightOperation: {\n              base: 3127,\n              units_per_gas: 61\n            }\n          }\n        }\n      },\n      base_asset_id: \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      block_gas_limit: 3e7,\n      block_transaction_size_limit: 260096,\n      privileged_address: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  consensus: {\n    PoA: {\n      signing_key: \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/metadata.json\nvar metadata_default = {\n  chain_config: \"chainConfig.json\",\n  table_encoding: {\n    Json: {\n      filepath: \"stateConfig.json\"\n    }\n  }\n};\n\n// src/utils/defaultSnapshots/stateConfig.json\nvar stateConfig_default = {\n  coins: [],\n  messages: [],\n  contracts: [],\n  blobs: [],\n  block_height: 0,\n  da_block_height: 0\n};\n\n// src/utils/defaultSnapshotConfigs.ts\nvar defaultSnapshotConfigs = {\n  chainConfig: chainConfig_default,\n  metadata: metadata_default,\n  stateConfig: stateConfig_default\n};\nvar defaultConsensusKey = \"0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298\";\n\n// src/utils/isDefined.ts\nfunction isDefined(value) {\n  return value !== void 0;\n}\n\n// src/utils/base58.ts\n\n\nvar BN_0 = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(0);\nvar BN_58 = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(58);\nvar Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar Lookup = null;\nfunction getAlpha(letter) {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(result);\n}\nfunction encodeBase58(_value) {\n  const bytes = arrayify(_value);\n  let value = (0,_fuel_ts_math__WEBPACK_IMPORTED_MODULE_1__.bn)(bytes);\n  let result = \"\";\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n  return result;\n}\nfunction decodeBase58(value) {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n\n// src/utils/dataSlice.ts\n\nfunction dataSlice(data, start, end) {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(_fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_DATA, \"cannot slice beyond data bounds\");\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n\n// src/utils/toUtf8Bytes.ts\n\nfunction toUtf8Bytes(stri, form = true) {\n  let str = stri;\n  if (form) {\n    str = stri.normalize(\"NFC\");\n  }\n  const result = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      result.push(c);\n    } else if (c < 2048) {\n      result.push(c >> 6 | 192);\n      result.push(c & 63 | 128);\n    } else if ((c & 64512) === 55296) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n      if (i >= str.length || (c2 & 64512) !== 56320) {\n        throw new _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.FuelError(\n          _fuel_ts_errors__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INVALID_INPUT_PARAMETERS,\n          \"Invalid UTF-8 in the input string.\"\n        );\n      }\n      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);\n      result.push(pair >> 18 | 240);\n      result.push(pair >> 12 & 63 | 128);\n      result.push(pair >> 6 & 63 | 128);\n      result.push(pair & 63 | 128);\n    } else {\n      result.push(c >> 12 | 224);\n      result.push(c >> 6 & 63 | 128);\n      result.push(c & 63 | 128);\n    }\n  }\n  return new Uint8Array(result);\n}\n\n// src/utils/toUtf8String.ts\nfunction onError(reason, offset, bytes, output, badCodepoint) {\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\nfunction helper(codePoints) {\n  return codePoints.map((codePoint) => {\n    if (codePoint <= 65535) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 65536;\n    return String.fromCharCode(\n      (codePoint >> 10 & 1023) + 55296,\n      (codePoint & 1023) + 56320\n    );\n  }).join(\"\");\n}\nfunction getUtf8CodePoints(_bytes) {\n  const bytes = arrayify(_bytes, \"bytes\");\n  const result = [];\n  let i = 0;\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    let extraLength = null;\n    let overlongMask = null;\n    if ((c & 224) === 192) {\n      extraLength = 1;\n      overlongMask = 127;\n    } else if ((c & 240) === 224) {\n      extraLength = 2;\n      overlongMask = 2047;\n    } else if ((c & 248) === 240) {\n      extraLength = 3;\n      overlongMask = 65535;\n    } else {\n      if ((c & 192) === 128) {\n        i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n      } else {\n        i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n      }\n      continue;\n    }\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(\"OVERRUN\", i - 1, bytes, result);\n      continue;\n    }\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n      if ((nextChar & 192) !== 128) {\n        i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n        res = null;\n        break;\n      }\n      res = res << 6 | nextChar & 63;\n      i++;\n    }\n    if (res === null) {\n      continue;\n    }\n    if (res > 1114111) {\n      i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res >= 55296 && res <= 57343) {\n      i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    if (res <= overlongMask) {\n      i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\nfunction toUtf8String(bytes) {\n  return helper(getUtf8CodePoints(bytes));\n}\n\n// src/utils/bytecode.ts\n\nvar compressBytecode = (bytecodeAsBinary) => {\n  if (!bytecodeAsBinary) {\n    return \"\";\n  }\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = (0,fflate__WEBPACK_IMPORTED_MODULE_2__.gzipSync)(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped)\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n  return bytecodeCompressEncoded;\n};\nvar decompressBytecode = (bytecodeAsBase64) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map(\n    (_, i) => bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = (0,fflate__WEBPACK_IMPORTED_MODULE_2__.gunzipSync)(bytecodeDecompressDecoded);\n  return bytecodeDecompressBytes;\n};\n\n// src/index.ts\nfunction assertUnreachable(_x) {\n  throw new Error(\"Didn't expect to get here\");\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/utils/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fuel-ts/versions/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@fuel-ts/versions/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFuelCoreVersionCompatibility: () => (/* binding */ checkFuelCoreVersionCompatibility),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   gt: () => (/* binding */ gt),\n/* harmony export */   majorEq: () => (/* binding */ majorEq),\n/* harmony export */   minorEq: () => (/* binding */ minorEq),\n/* harmony export */   patchEq: () => (/* binding */ patchEq),\n/* harmony export */   versions: () => (/* binding */ versions)\n/* harmony export */ });\n// src/lib/getBuiltinVersions.ts\nfunction getBuiltinVersions() {\n  return {\n    FORC: \"0.66.6\",\n    FUEL_CORE: \"0.40.4\",\n    FUELS: \"0.99.0\"\n  };\n}\n\n// src/lib/semver.ts\nfunction parseVersion(version) {\n  const [major, minor, patch] = version.split(\".\").map((v) => parseInt(v, 10));\n  return { major, minor, patch };\n}\nfunction versionDiffs(version1, version2) {\n  const semver1 = parseVersion(version1);\n  const semver2 = parseVersion(version2);\n  const major = semver1.major - semver2.major;\n  const minor = semver1.minor - semver2.minor;\n  const patch = semver1.patch - semver2.patch;\n  return {\n    major,\n    minor,\n    patch,\n    fullVersionDiff: major || minor || patch\n  };\n}\nfunction gt(version1, version2) {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff > 0;\n}\nfunction eq(version1, version2) {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff === 0;\n}\nfunction majorEq(version1, version2) {\n  const { major } = versionDiffs(version1, version2);\n  return major === 0;\n}\nfunction minorEq(version1, version2) {\n  const { minor } = versionDiffs(version1, version2);\n  return minor === 0;\n}\nfunction patchEq(version1, version2) {\n  const { patch } = versionDiffs(version1, version2);\n  return patch === 0;\n}\n\n// src/lib/checkFuelCoreVersionCompatibility.ts\nfunction checkFuelCoreVersionCompatibility(networkVersion) {\n  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();\n  if (/^\\d+\\.\\d+\\.\\d+\\D+/m.test(networkVersion)) {\n    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      \nThis unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);\n  }\n  return {\n    supportedVersion,\n    isMajorSupported: majorEq(networkVersion, supportedVersion),\n    isMinorSupported: minorEq(networkVersion, supportedVersion),\n    isPatchSupported: patchEq(networkVersion, supportedVersion)\n  };\n}\n\n// src/index.ts\nvar versions = getBuiltinVersions();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZ1ZWwtdHMvdmVyc2lvbnMvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxVQUFVLFFBQVE7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsOEJBQThCO0FBQ3hDO0FBQ0EsNEVBQTRFLGVBQWU7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFTRTtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9qdWJvaWkvRnVlbC9BcmNhbmUvbm9kZV9tb2R1bGVzL0BmdWVsLXRzL3ZlcnNpb25zL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvZ2V0QnVpbHRpblZlcnNpb25zLnRzXG5mdW5jdGlvbiBnZXRCdWlsdGluVmVyc2lvbnMoKSB7XG4gIHJldHVybiB7XG4gICAgRk9SQzogXCIwLjY2LjZcIixcbiAgICBGVUVMX0NPUkU6IFwiMC40MC40XCIsXG4gICAgRlVFTFM6IFwiMC45OS4wXCJcbiAgfTtcbn1cblxuLy8gc3JjL2xpYi9zZW12ZXIudHNcbmZ1bmN0aW9uIHBhcnNlVmVyc2lvbih2ZXJzaW9uKSB7XG4gIGNvbnN0IFttYWpvciwgbWlub3IsIHBhdGNoXSA9IHZlcnNpb24uc3BsaXQoXCIuXCIpLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgcmV0dXJuIHsgbWFqb3IsIG1pbm9yLCBwYXRjaCB9O1xufVxuZnVuY3Rpb24gdmVyc2lvbkRpZmZzKHZlcnNpb24xLCB2ZXJzaW9uMikge1xuICBjb25zdCBzZW12ZXIxID0gcGFyc2VWZXJzaW9uKHZlcnNpb24xKTtcbiAgY29uc3Qgc2VtdmVyMiA9IHBhcnNlVmVyc2lvbih2ZXJzaW9uMik7XG4gIGNvbnN0IG1ham9yID0gc2VtdmVyMS5tYWpvciAtIHNlbXZlcjIubWFqb3I7XG4gIGNvbnN0IG1pbm9yID0gc2VtdmVyMS5taW5vciAtIHNlbXZlcjIubWlub3I7XG4gIGNvbnN0IHBhdGNoID0gc2VtdmVyMS5wYXRjaCAtIHNlbXZlcjIucGF0Y2g7XG4gIHJldHVybiB7XG4gICAgbWFqb3IsXG4gICAgbWlub3IsXG4gICAgcGF0Y2gsXG4gICAgZnVsbFZlcnNpb25EaWZmOiBtYWpvciB8fCBtaW5vciB8fCBwYXRjaFxuICB9O1xufVxuZnVuY3Rpb24gZ3QodmVyc2lvbjEsIHZlcnNpb24yKSB7XG4gIGNvbnN0IHsgZnVsbFZlcnNpb25EaWZmIH0gPSB2ZXJzaW9uRGlmZnModmVyc2lvbjEsIHZlcnNpb24yKTtcbiAgcmV0dXJuIGZ1bGxWZXJzaW9uRGlmZiA+IDA7XG59XG5mdW5jdGlvbiBlcSh2ZXJzaW9uMSwgdmVyc2lvbjIpIHtcbiAgY29uc3QgeyBmdWxsVmVyc2lvbkRpZmYgfSA9IHZlcnNpb25EaWZmcyh2ZXJzaW9uMSwgdmVyc2lvbjIpO1xuICByZXR1cm4gZnVsbFZlcnNpb25EaWZmID09PSAwO1xufVxuZnVuY3Rpb24gbWFqb3JFcSh2ZXJzaW9uMSwgdmVyc2lvbjIpIHtcbiAgY29uc3QgeyBtYWpvciB9ID0gdmVyc2lvbkRpZmZzKHZlcnNpb24xLCB2ZXJzaW9uMik7XG4gIHJldHVybiBtYWpvciA9PT0gMDtcbn1cbmZ1bmN0aW9uIG1pbm9yRXEodmVyc2lvbjEsIHZlcnNpb24yKSB7XG4gIGNvbnN0IHsgbWlub3IgfSA9IHZlcnNpb25EaWZmcyh2ZXJzaW9uMSwgdmVyc2lvbjIpO1xuICByZXR1cm4gbWlub3IgPT09IDA7XG59XG5mdW5jdGlvbiBwYXRjaEVxKHZlcnNpb24xLCB2ZXJzaW9uMikge1xuICBjb25zdCB7IHBhdGNoIH0gPSB2ZXJzaW9uRGlmZnModmVyc2lvbjEsIHZlcnNpb24yKTtcbiAgcmV0dXJuIHBhdGNoID09PSAwO1xufVxuXG4vLyBzcmMvbGliL2NoZWNrRnVlbENvcmVWZXJzaW9uQ29tcGF0aWJpbGl0eS50c1xuZnVuY3Rpb24gY2hlY2tGdWVsQ29yZVZlcnNpb25Db21wYXRpYmlsaXR5KG5ldHdvcmtWZXJzaW9uKSB7XG4gIGNvbnN0IHsgRlVFTF9DT1JFOiBzdXBwb3J0ZWRWZXJzaW9uIH0gPSBnZXRCdWlsdGluVmVyc2lvbnMoKTtcbiAgaWYgKC9eXFxkK1xcLlxcZCtcXC5cXGQrXFxEKy9tLnRlc3QobmV0d29ya1ZlcnNpb24pKSB7XG4gICAgY29uc29sZS53YXJuKGBZb3UncmUgcnVubmluZyBhZ2FpbnN0IGFuIHVucmVsZWFzZWQgZnVlbC1jb3JlIHZlcnNpb246ICR7bmV0d29ya1ZlcnNpb259LiBUaGluZ3MgbWF5IHdvcmsgYXMgZXhwZWN0ZWQsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkLiBQbGVhc2UgdXNlIGEgcmVsZWFzZWQgdmVyc2lvbi4gICAgICBcblRoaXMgdW5yZWxlYXNlZCBmdWVsLWNvcmUgYnVpbGQgbWF5IGluY2x1ZGUgZmVhdHVyZXMgYW5kIHVwZGF0ZXMgbm90IHlldCBzdXBwb3J0ZWQgYnkgdGhpcyB2ZXJzaW9uIG9mIHRoZSBUUy1TREsuYCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdXBwb3J0ZWRWZXJzaW9uLFxuICAgIGlzTWFqb3JTdXBwb3J0ZWQ6IG1ham9yRXEobmV0d29ya1ZlcnNpb24sIHN1cHBvcnRlZFZlcnNpb24pLFxuICAgIGlzTWlub3JTdXBwb3J0ZWQ6IG1pbm9yRXEobmV0d29ya1ZlcnNpb24sIHN1cHBvcnRlZFZlcnNpb24pLFxuICAgIGlzUGF0Y2hTdXBwb3J0ZWQ6IHBhdGNoRXEobmV0d29ya1ZlcnNpb24sIHN1cHBvcnRlZFZlcnNpb24pXG4gIH07XG59XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHZlcnNpb25zID0gZ2V0QnVpbHRpblZlcnNpb25zKCk7XG5leHBvcnQge1xuICBjaGVja0Z1ZWxDb3JlVmVyc2lvbkNvbXBhdGliaWxpdHksXG4gIGVxLFxuICBndCxcbiAgbWFqb3JFcSxcbiAgbWlub3JFcSxcbiAgcGF0Y2hFcSxcbiAgdmVyc2lvbnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fuel-ts/versions/dist/index.mjs\n");

/***/ })

};
;